import { __assign, __decorate, __param } from 'tslib';
import { EventEmitter, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, HostListener, Directive, NgModule } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';

var CountUpDirective = /** @class */ (function () {
    function CountUpDirective(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    CountUpDirective.prototype.onClick = function () {
        if (this.reanimateOnClick) {
            this.animate();
        }
    };
    CountUpDirective.prototype.ngOnChanges = function (changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (changes.endVal && changes.endVal.currentValue !== undefined) {
            if (this.previousEndVal !== undefined) {
                this.options = __assign({}, this.options, { startVal: this.previousEndVal });
            }
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            this.animate();
            this.previousEndVal = this.endVal;
        }
    };
    CountUpDirective.prototype.animate = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.countUp.reset();
            _this.countUp.start(function () {
                _this.zone.run(function () {
                    _this.complete.emit();
                });
            });
        });
    };
    CountUpDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input('countUp')
    ], CountUpDirective.prototype, "endVal", void 0);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "options", void 0);
    __decorate([
        Input()
    ], CountUpDirective.prototype, "reanimateOnClick", void 0);
    __decorate([
        Output()
    ], CountUpDirective.prototype, "complete", void 0);
    __decorate([
        HostListener('click')
    ], CountUpDirective.prototype, "onClick", null);
    CountUpDirective = __decorate([
        Directive({
            selector: '[countUp]'
        }),
        __param(2, Inject(PLATFORM_ID))
    ], CountUpDirective);
    return CountUpDirective;
}());

var CountUpModule = /** @class */ (function () {
    function CountUpModule() {
    }
    CountUpModule = __decorate([
        NgModule({
            imports: [],
            declarations: [CountUpDirective],
            exports: [CountUpDirective]
        })
    ], CountUpModule);
    return CountUpModule;
}());

/*
 * Public API Surface of count-up
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CountUpDirective, CountUpModule };
//# sourceMappingURL=ngx-countup.js.map
