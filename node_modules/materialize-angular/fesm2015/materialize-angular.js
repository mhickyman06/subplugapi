import { EventEmitter, Component, Renderer2, Output, ViewChild, Input, ContentChildren, Directive, ElementRef, HostListener, NgModule, forwardRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Router } from '@angular/router';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * Generated from: app/config/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/** @type {?} */
const config = {
    components: {
        prefix: 'materialize'
    }
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/collapsible/collapsible.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CollapsibleComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = CollapsibleComponent.defaultProps.className;
        this.disabled = CollapsibleComponent.defaultProps.disabled;
        this.isOpen = CollapsibleComponent.defaultProps.isOpen;
        this.showIndicator = CollapsibleComponent.defaultProps.showIndicator;
        this.prefix = config.components.prefix;
        this.onCloseEmitter = new EventEmitter();
        this.onOpenEmitter = new EventEmitter();
        this.onToggle = this.onToggle.bind(this);
        this.update = this.update.bind(this);
        window.addEventListener('resize', this.update);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.isOpen) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.update();
            }), 300);
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.update();
    }
    /**
     * @return {?}
     */
    onToggle() {
        if (!this.disabled) {
            if (this.isOpen) {
                this.close();
                this.onCloseEmitter.emit();
            }
            else {
                this.open();
                this.onOpenEmitter.emit();
            }
        }
    }
    /**
     * @return {?}
     */
    open() {
        this.isOpen = true;
        this.update();
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
        this.update();
    }
    /**
     * @return {?}
     */
    update() {
        /** @type {?} */
        const contentContainer = this.containerRef.nativeElement;
        /** @type {?} */
        const maxHeight = this.isOpen
            ? contentContainer.scrollHeight
            : 0;
        this.renderer.setStyle(contentContainer, 'maxHeight', `${maxHeight}px`);
    }
}
CollapsibleComponent.defaultProps = {
    className: '',
    disabled: false,
    isOpen: false,
    showIndicator: true
};
CollapsibleComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-collapsible }`,
                template: "<div\n  [ngClass]=\"[prefix + '-collapsible', className]\"\n  [class.disabled]=\"disabled\"\n  [class.open]=\"isOpen\"\n>\n  <div (click)=\"onToggle()\"\n    [isRippleActive]=\"!disabled\"\n    [ngClass]=\"[prefix + '-collapsible-title', className]\"\n\n    materializeRipple\n  >\n    <ng-content select=\"materialize-collapsible-title\"></ng-content>\n\n    <materialize-icon *ngIf=\"showIndicator\" [className]=\"prefix + '-collapsible-title-icon'\">\n      expand_more\n    </materialize-icon>\n  </div>\n\n  <div [ngClass]=\"[prefix + '-collapsible-content-container', className]\" #container>\n    <div [ngClass]=\"prefix + '-collapsible-content'\">\n      <ng-content select=\"materialize-collapsible-content\"></ng-content>\n    </div>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
CollapsibleComponent.ctorParameters = () => [
    { type: Renderer2 }
];
CollapsibleComponent.propDecorators = {
    onCloseEmitter: [{ type: Output, args: ['onClose',] }],
    onOpenEmitter: [{ type: Output, args: ['onOpen',] }],
    containerRef: [{ type: ViewChild, args: ['container', { static: true },] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    isOpen: [{ type: Input }],
    showIndicator: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CollapsibleComponent.defaultProps;
    /** @type {?} */
    CollapsibleComponent.prototype.onCloseEmitter;
    /** @type {?} */
    CollapsibleComponent.prototype.onOpenEmitter;
    /** @type {?} */
    CollapsibleComponent.prototype.containerRef;
    /** @type {?} */
    CollapsibleComponent.prototype.className;
    /** @type {?} */
    CollapsibleComponent.prototype.disabled;
    /** @type {?} */
    CollapsibleComponent.prototype.isOpen;
    /** @type {?} */
    CollapsibleComponent.prototype.showIndicator;
    /** @type {?} */
    CollapsibleComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    CollapsibleComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/accordion/accordion.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AccordionComponent {
    constructor() {
        this.className = AccordionComponent.defaultProps.className;
        this.activeIndex = AccordionComponent.defaultProps.activeIndex;
        this.initCollapsibles = this.initCollapsibles.bind(this);
        this.registerCollapsibles = this.registerCollapsibles.bind(this);
        this.onToggleEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.initCollapsibles();
        this.collapsiblesQueryList.changes.subscribe(this.initCollapsibles);
    }
    /**
     * @return {?}
     */
    initCollapsibles() {
        setTimeout(this.registerCollapsibles, 0);
    }
    /**
     * @return {?}
     */
    registerCollapsibles() {
        this.collapsiblesQueryList.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            item.onOpenEmitter.subscribe((/**
             * @return {?}
             */
            () => {
                this.toggleCollapsibles(index);
            }));
        }));
    }
    /**
     * @param {?} currentIndex
     * @return {?}
     */
    toggleCollapsibles(currentIndex) {
        this.activeIndex = currentIndex;
        this.onToggleEmitter.emit(this.activeIndex);
        this.collapsiblesQueryList.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            if (index === currentIndex) {
                item.open();
            }
            else {
                item.close();
            }
        }));
    }
    /**
     * @return {?}
     */
    showNext() {
        /** @type {?} */
        const nextIndex = this.activeIndex === null || this.activeIndex >= this.collapsiblesQueryList.length
            ? null
            : this.activeIndex + 1;
        this.toggleCollapsibles(nextIndex);
    }
    /**
     * @return {?}
     */
    showPrev() {
        /** @type {?} */
        const prevIndex = this.activeIndex === null || this.activeIndex === 0
            ? null
            : this.activeIndex - 1;
        this.toggleCollapsibles(prevIndex);
    }
}
AccordionComponent.defaultProps = {
    activeIndex: null,
    className: ''
};
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-accordion }`,
                template: "<div [ngClass]=\"className\">\n  <ng-content select=\"materialize-collapsible\"></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [];
AccordionComponent.propDecorators = {
    collapsiblesQueryList: [{ type: ContentChildren, args: [CollapsibleComponent,] }],
    onToggleEmitter: [{ type: Output, args: ['onToggle',] }],
    className: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AccordionComponent.defaultProps;
    /** @type {?} */
    AccordionComponent.prototype.collapsiblesQueryList;
    /** @type {?} */
    AccordionComponent.prototype.onToggleEmitter;
    /** @type {?} */
    AccordionComponent.prototype.className;
    /** @type {?} */
    AccordionComponent.prototype.activeIndex;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/collapsible/collapsible-content/collapsible-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CollapsibleContentComponent {
}
CollapsibleContentComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-collapsible-content }`,
                template: "<ng-content></ng-content>\n"
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/collapsible/collapsible-title/collapsible-title.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CollapsibleTitleComponent {
}
CollapsibleTitleComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-collapsible-title }`,
                template: "<ng-content></ng-content>\n"
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/common/prefix.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PrefixDirective {
}
PrefixDirective.decorators = [
    { type: Directive, args: [{
                selector: '[materializePrefix]'
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/common/ripple.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Coordinate() { }
if (false) {
    /** @type {?} */
    Coordinate.prototype.x;
    /** @type {?} */
    Coordinate.prototype.y;
}
class RippleDirective {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.rippleDuration = 500;
        this.isRippleActive = true;
        this.isRippleCenter = false;
        this.prefix = config.components.prefix;
        this.createRipple = this.createRipple.bind(this);
        this.element = this.elementRef.nativeElement;
        this.renderer.addClass(this.element, `${this.prefix}-ripple-element`);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.isRippleActive) {
            this.renderer.addClass(this.element, 'disabled');
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    createRipple(event) {
        if (!this.isRippleActive) {
            return;
        }
        /** @type {?} */
        const coordinates = this.isRippleCenter
            ? this.getCoordinatesByCenter()
            : this.getCoordinatesByEvent(event);
        /** @type {?} */
        const radio = this.getRippleRadio(coordinates);
        this.renderRipple(radio, coordinates);
    }
    /**
     * @param {?} radio
     * @param {?} coordinate
     * @return {?}
     */
    renderRipple(radio, coordinate) {
        /** @type {?} */
        const ripple = this.renderer.createElement('div');
        /** @type {?} */
        const centerY = coordinate.y - radio;
        /** @type {?} */
        const centerX = coordinate.x - radio;
        this.renderer.addClass(ripple, 'ripple');
        this.renderer.setStyle(ripple, 'height', `${radio * 2}px`);
        this.renderer.setStyle(ripple, 'width', `${radio * 2}px`);
        this.renderer.setStyle(ripple, 'top', `${centerY}px`);
        this.renderer.setStyle(ripple, 'left', `${centerX}px`);
        this.renderer.insertBefore(this.element, ripple, this.element.firstChild);
        this.scaleRipple(ripple);
    }
    /**
     * @return {?}
     */
    getCoordinatesByCenter() {
        const { offsetHeight, offsetWidth } = this.element;
        /** @type {?} */
        const y = offsetHeight / 2;
        /** @type {?} */
        const x = offsetWidth / 2;
        return { x, y };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getCoordinatesByEvent(event) {
        /** @type {?} */
        const offset = this.getOffset(this.element);
        /** @type {?} */
        const y = event.pageY - offset.top;
        /** @type {?} */
        const x = event.pageX - offset.left;
        return { x, y };
    }
    /**
     * @param {?} coordinate
     * @return {?}
     */
    getRippleRadio(coordinate) {
        /** @type {?} */
        const height = Math.max(this.element.offsetHeight - coordinate.y, coordinate.y);
        /** @type {?} */
        const width = Math.max(this.element.offsetWidth - coordinate.x, coordinate.x);
        /** @type {?} */
        const radio = Math.hypot(height, width);
        return radio;
    }
    /**
     * @param {?} ripple
     * @return {?}
     */
    scaleRipple(ripple) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            ripple.style.transitionDuration = `${this.rippleDuration}ms`;
            ripple.style.transform = 'scale(1)';
            this.hideRipple(ripple);
        }), 0);
    }
    /**
     * @param {?} ripple
     * @return {?}
     */
    hideRipple(ripple) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.renderer.setStyle(ripple, 'transitionDuration', `${this.rippleDuration}ms`);
            this.renderer.setStyle(ripple, 'opacity', '0');
            this.removeRipple(ripple);
        }), this.rippleDuration);
    }
    /**
     * @param {?} ripple
     * @return {?}
     */
    removeRipple(ripple) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.renderer.removeChild(this.element, ripple);
        }), this.rippleDuration);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    getOffset(element) {
        /** @type {?} */
        const rect = element.getBoundingClientRect();
        /** @type {?} */
        const top = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        /** @type {?} */
        const left = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
        /** @type {?} */
        const offset = {
            left: rect.left + left,
            top: rect.top + top
        };
        return offset;
    }
}
RippleDirective.decorators = [
    { type: Directive, args: [{
                selector: `[${config.components.prefix}Ripple]`
            },] }
];
/** @nocollapse */
RippleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
RippleDirective.propDecorators = {
    rippleDuration: [{ type: Input }],
    isRippleActive: [{ type: Input }],
    isRippleCenter: [{ type: Input }],
    createRipple: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    RippleDirective.prototype.rippleDuration;
    /** @type {?} */
    RippleDirective.prototype.isRippleActive;
    /** @type {?} */
    RippleDirective.prototype.isRippleCenter;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/common/suffix.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SuffixDirective {
}
SuffixDirective.decorators = [
    { type: Directive, args: [{
                selector: '[materializeSuffix]'
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/common/common.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeCommonModule {
}
MaterializeCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PrefixDirective,
                    RippleDirective,
                    SuffixDirective
                ],
                exports: [
                    PrefixDirective,
                    RippleDirective,
                    SuffixDirective
                ],
                imports: [CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/icon/icon.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function IconModel() { }
if (false) {
    /** @type {?} */
    IconModel.prototype.className;
    /** @type {?} */
    IconModel.prototype.size;
}
/** @enum {string} */
const ICON_SIZES = {
    NONE: "",
    XS: "xs",
    SM: "sm",
    MD: "md",
    LG: "lg",
    XL: "xl",
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/icon/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IconComponent {
    constructor() {
        this.className = IconComponent.defaultProps.className;
        this.size = IconComponent.defaultProps.size;
        this.prefix = config.components.prefix;
        this.onClickEmitter = new EventEmitter();
        this.onBlurEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.onClickEmitter.emit();
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onBlurEmitter.emit();
    }
}
IconComponent.defaultProps = {
    className: '',
    size: ICON_SIZES.NONE
};
IconComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-icon }`,
                template: "<span class=\"icon\" [ngClass]=\"[prefix + '-icon', size, className]\" (click)=\"onClick()\" (blur)=\"onBlur()\">\n  <ng-content></ng-content>\n</span>\n"
            }] }
];
/** @nocollapse */
IconComponent.ctorParameters = () => [];
IconComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
    className: [{ type: Input }],
    size: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IconComponent.defaultProps;
    /** @type {?} */
    IconComponent.prototype.onClickEmitter;
    /** @type {?} */
    IconComponent.prototype.onBlurEmitter;
    /** @type {?} */
    IconComponent.prototype.className;
    /** @type {?} */
    IconComponent.prototype.size;
    /** @type {?} */
    IconComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/icon/icon.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeIconModule {
}
MaterializeIconModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IconComponent],
                exports: [IconComponent],
                imports: [CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/collapsible/collapsible.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeCollapsibleModule {
}
MaterializeCollapsibleModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CollapsibleComponent,
                    CollapsibleContentComponent,
                    CollapsibleTitleComponent
                ],
                exports: [
                    CollapsibleComponent,
                    CollapsibleContentComponent,
                    CollapsibleTitleComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeIconModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/accordion/accordion.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeAccordionModule {
}
MaterializeAccordionModule.decorators = [
    { type: NgModule, args: [{
                declarations: [AccordionComponent],
                exports: [AccordionComponent],
                imports: [
                    MaterializeCollapsibleModule,
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/accordion/accordion.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function AccordionModel() { }
if (false) {
    /** @type {?} */
    AccordionModel.prototype.activeIndex;
    /** @type {?} */
    AccordionModel.prototype.className;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button/button.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function ButtonModel() { }
if (false) {
    /** @type {?} */
    ButtonModel.prototype.className;
    /** @type {?} */
    ButtonModel.prototype.disabled;
    /** @type {?} */
    ButtonModel.prototype.level;
    /** @type {?} */
    ButtonModel.prototype.rippleDuration;
    /** @type {?} */
    ButtonModel.prototype.type;
}
/** @enum {string} */
const BUTTON_LEVELS = {
    TEXT: "text",
    ACCENT: "accent",
    OUTLINE: "outline",
};
/** @enum {string} */
const BUTTON_TYPES = {
    BUTTON: "button",
    SUBMIT: "submit",
    RESET: "reset",
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button/button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ButtonComponent {
    constructor() {
        this.className = ButtonComponent.defaultProps.className;
        this.disabled = ButtonComponent.defaultProps.disabled;
        this.level = ButtonComponent.defaultProps.level;
        this.rippleDuration = ButtonComponent.defaultProps.rippleDuration;
        this.type = ButtonComponent.defaultProps.type;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onBlurEmitter = new EventEmitter();
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.isFocused = false;
            this.onClickEmitter.emit();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onBlurEmitter.emit();
        this.isFocused = false;
    }
}
ButtonComponent.defaultProps = {
    className: '',
    disabled: false,
    level: BUTTON_LEVELS.ACCENT,
    rippleDuration: 250,
    type: BUTTON_TYPES.BUTTON
};
ButtonComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-button }`,
                template: "<button [ngClass]=\"[prefix + '-button', level, className]\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (focus)=\"onFocus()\"\n\n  materializeRipple\n  [isRippleActive]=\"!disabled\"\n  [rippleDuration]=\"rippleDuration\"\n  \n  [class.focused]=\"isFocused\"\n  [disabled]=\"disabled\"\n  [type]=\"type\"\n  \n  #element>\n  <ng-content></ng-content>\n</button>\n"
            }] }
];
/** @nocollapse */
ButtonComponent.ctorParameters = () => [];
ButtonComponent.propDecorators = {
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    level: [{ type: Input }],
    rippleDuration: [{ type: Input }],
    type: [{ type: Input }],
    onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    element: [{ type: ViewChild, args: ['element', { static: true },] }]
};
if (false) {
    /** @type {?} */
    ButtonComponent.defaultProps;
    /** @type {?} */
    ButtonComponent.prototype.className;
    /** @type {?} */
    ButtonComponent.prototype.disabled;
    /** @type {?} */
    ButtonComponent.prototype.level;
    /** @type {?} */
    ButtonComponent.prototype.rippleDuration;
    /** @type {?} */
    ButtonComponent.prototype.type;
    /** @type {?} */
    ButtonComponent.prototype.onBlurEmitter;
    /** @type {?} */
    ButtonComponent.prototype.onClickEmitter;
    /** @type {?} */
    ButtonComponent.prototype.element;
    /** @type {?} */
    ButtonComponent.prototype.prefix;
    /** @type {?} */
    ButtonComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button/button.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeButtonModule {
}
MaterializeButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ButtonComponent],
                exports: [ButtonComponent],
                imports: [
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button-toggle-group/button-toggle/button-toggle.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ButtonToggleComponent {
    constructor() {
        this.className = ButtonToggleComponent.defaultProps.className;
        this.disabled = ButtonToggleComponent.defaultProps.disabled;
        this.name = ButtonToggleComponent.defaultProps.name;
        this.value = ButtonToggleComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.onClickEmitter = new EventEmitter();
        this.isActive = false;
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.isActive = !this.isActive;
            this.isFocused = false;
            this.onClickEmitter.emit(this.value);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
        }
    }
}
ButtonToggleComponent.defaultProps = {
    className: '',
    disabled: false,
    name: '',
    value: ''
};
ButtonToggleComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-button-toggle }`,
                template: "<div (click)=\"onClick()\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n\n  [ngClass]=\"[prefix + '-button-toggle', className]\"\n  [class.active]=\"isActive\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n  [isRippleActive]=\"!disabled\"\n\n  materializeRipple  \n>\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
ButtonToggleComponent.ctorParameters = () => [];
ButtonToggleComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ButtonToggleComponent.defaultProps;
    /** @type {?} */
    ButtonToggleComponent.prototype.onClickEmitter;
    /** @type {?} */
    ButtonToggleComponent.prototype.className;
    /** @type {?} */
    ButtonToggleComponent.prototype.disabled;
    /** @type {?} */
    ButtonToggleComponent.prototype.name;
    /** @type {?} */
    ButtonToggleComponent.prototype.value;
    /** @type {?} */
    ButtonToggleComponent.prototype.prefix;
    /** @type {?} */
    ButtonToggleComponent.prototype.isActive;
    /** @type {?} */
    ButtonToggleComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button-toggle-group/button-toggle-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ButtonToggleGroupComponent {
    constructor() {
        this.canUncheck = ButtonToggleGroupComponent.defaultProps.canUncheck;
        this.className = ButtonToggleGroupComponent.defaultProps.className;
        this.disabled = ButtonToggleGroupComponent.defaultProps.disabled;
        this.value = ButtonToggleGroupComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onChangeEmitter = new EventEmitter();
        this.initButtons = this.initButtons.bind(this);
        this.registerButtons = this.registerButtons.bind(this);
        this.toggleButton = this.toggleButton.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.initButtons();
        this.buttonsQueryList.changes.subscribe(this.initButtons);
    }
    /**
     * @return {?}
     */
    initButtons() {
        if (this.disabled) {
            this.disableButtons(this.disabled);
        }
        setTimeout(this.registerButtons, 0);
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    disableButtons(disabled) {
        this.buttonsQueryList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.disabled = disabled;
        }));
    }
    /**
     * @return {?}
     */
    registerButtons() {
        this.buttonsQueryList.forEach((/**
         * @param {?} button
         * @return {?}
         */
        button => {
            button.isActive = (this.value.lastIndexOf(button.value) >= 0);
            button.onClickEmitter.subscribe(this.toggleButton);
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toggleButton(value) {
        this.setValueAllButtons(value);
        /** @type {?} */
        const currentButton = this.buttonsQueryList.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.value === value));
        this.value = currentButton && currentButton.isActive
            ? currentButton.value
            : '';
        this.onTouched();
        this.onChange(this.value);
        this.onChangeEmitter.emit(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValueAllButtons(value) {
        this.buttonsQueryList.forEach((/**
         * @param {?} button
         * @return {?}
         */
        button => {
            if (button.value !== value) {
                button.isActive = false;
            }
            if (button.value === value && !this.canUncheck) {
                button.isActive = true;
            }
        }));
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.disableButtons(this.disabled);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
ButtonToggleGroupComponent.defaultProps = {
    canUncheck: false,
    className: '',
    disabled: false,
    value: ''
};
ButtonToggleGroupComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ButtonToggleGroupComponent))
                    }],
                selector: `${config.components.prefix}-button-toggle-group }`,
                template: "<div \n  [ngClass]=\"[prefix + '-button-toggle-group', className]\"\n  [class.disabled]=\"disabled\"\n>\n  <ng-content select=\"materialize-button-toggle\"></ng-content>\n</div>\n  "
            }] }
];
/** @nocollapse */
ButtonToggleGroupComponent.ctorParameters = () => [];
ButtonToggleGroupComponent.propDecorators = {
    buttonsQueryList: [{ type: ContentChildren, args: [ButtonToggleComponent,] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    canUncheck: [{ type: Input }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ButtonToggleGroupComponent.defaultProps;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.buttonsQueryList;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.onChangeEmitter;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.canUncheck;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.className;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.disabled;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.value;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.prefix;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button-toggle-group/button-toggle-group.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeButtonToggleGroupModule {
}
MaterializeButtonToggleGroupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ButtonToggleComponent,
                    ButtonToggleGroupComponent
                ],
                exports: [
                    ButtonToggleComponent,
                    ButtonToggleGroupComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button-toggle-group/button-toggle-group.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function ButtonToggleGroupModel() { }
if (false) {
    /** @type {?} */
    ButtonToggleGroupModel.prototype.canUncheck;
    /** @type {?} */
    ButtonToggleGroupModel.prototype.className;
    /** @type {?} */
    ButtonToggleGroupModel.prototype.disabled;
    /** @type {?} */
    ButtonToggleGroupModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button-toggle-group/button-toggle/button-toggle.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function ButtonToggleModel() { }
if (false) {
    /** @type {?} */
    ButtonToggleModel.prototype.className;
    /** @type {?} */
    ButtonToggleModel.prototype.disabled;
    /** @type {?} */
    ButtonToggleModel.prototype.name;
    /** @type {?} */
    ButtonToggleModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/fixtures/calendar-week-days.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/** @type {?} */
const days = {
    friday: {
        name: 'Friday',
        shortName: 'Fri',
        shortestName: 'Fr'
    },
    monday: {
        name: 'Monday',
        shortName: 'Mon',
        shortestName: 'Mo'
    },
    saturday: {
        name: 'Saturday',
        shortName: 'Sat',
        shortestName: 'Sa'
    },
    sunday: {
        name: 'Sunday',
        shortName: 'Sun',
        shortestName: 'Su'
    },
    thursday: {
        name: 'Thursday',
        shortName: 'Thu',
        shortestName: 'Th'
    },
    tuesday: {
        name: 'Tuesday',
        shortName: 'Tue',
        shortestName: 'Tu'
    },
    wednesday: {
        name: 'Wednesday',
        shortName: 'Wed',
        shortestName: 'We'
    }
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/fixtures/calendar-months.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/** @type {?} */
const months = {
    april: {
        name: 'April',
        shortName: 'Apr',
        shortestName: 'Ap'
    },
    august: {
        name: 'August',
        shortName: 'Aug',
        shortestName: 'Au'
    },
    december: {
        name: 'December',
        shortName: 'Dec',
        shortestName: 'De'
    },
    february: {
        name: 'February',
        shortName: 'Feb',
        shortestName: 'Fe'
    },
    january: {
        name: 'January',
        shortName: 'Jan',
        shortestName: 'Ja'
    },
    july: {
        name: 'July',
        shortName: 'Jul',
        shortestName: 'Ju'
    },
    june: {
        name: 'June',
        shortName: 'Jun',
        shortestName: 'Ju'
    },
    march: {
        name: 'March',
        shortName: 'Mar',
        shortestName: 'Ma'
    },
    may: {
        name: 'May',
        shortName: 'May',
        shortestName: 'Ma'
    },
    november: {
        name: 'November',
        shortName: 'Nov',
        shortestName: 'No'
    },
    october: {
        name: 'October',
        shortName: 'Oct',
        shortestName: 'Oc'
    },
    september: {
        name: 'September',
        shortName: 'Sep',
        shortestName: 'Se'
    }
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/calendar/calendar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CalendarComponent {
    constructor() {
        this.className = CalendarComponent.defaultProps.className;
        this.date = CalendarComponent.defaultProps.date;
        this.displayOtherMonthDays = CalendarComponent.defaultProps.displayOtherMonthDays;
        this.prefix = config.components.prefix;
        this.selectYearAnimationDuration = 150;
        this.scrollToActiveYear = this.scrollToActiveYear.bind(this);
        this.onSelectDayEmitter = new EventEmitter();
        this.dayLabels = this.getDayLabels(days);
        this.monthLabels = this.getMonthLabels(months);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        /** @type {?} */
        const dateExists = (typeof this.date !== 'undefined' && this.date !== null);
        /** @type {?} */
        const openDate = dateExists ? this.date : new Date();
        /** @type {?} */
        const isToday = this.isTodayDate(openDate);
        /** @type {?} */
        const month = openDate.getMonth();
        /** @type {?} */
        const year = openDate.getFullYear();
        this.weeks = this.fillWeeks(month, year);
        this.years = this.fillYears(year);
        this.selectedDate = this.createDateModel(openDate, false, isToday, dateExists);
    }
    /**
     * @param {?} dayLabels
     * @return {?}
     */
    getDayLabels(dayLabels) {
        return [
            dayLabels.sunday,
            dayLabels.monday,
            dayLabels.tuesday,
            dayLabels.wednesday,
            dayLabels.thursday,
            dayLabels.friday,
            dayLabels.saturday
        ];
    }
    /**
     * @param {?} monthLabels
     * @return {?}
     */
    getMonthLabels(monthLabels) {
        return [
            monthLabels.january,
            monthLabels.february,
            monthLabels.march,
            monthLabels.april,
            monthLabels.may,
            monthLabels.june,
            monthLabels.july,
            monthLabels.august,
            monthLabels.september,
            monthLabels.october,
            monthLabels.november,
            monthLabels.december
        ];
    }
    /**
     * @param {?} date
     * @param {?} isOutOfMonth
     * @param {?} isToday
     * @param {?} showSelected
     * @return {?}
     */
    createDateModel(date, isOutOfMonth, isToday, showSelected) {
        /** @type {?} */
        const weekDay = date.getDay();
        /** @type {?} */
        const month = date.getMonth();
        /** @type {?} */
        const dateModel = {
            ISODate: this.generateISODate(date),
            date: date,
            dayLabel: this.dayLabels[weekDay],
            isOutOfMonth: isOutOfMonth,
            isToday: isToday,
            monthLabel: this.monthLabels[month],
            showSelected: showSelected
        };
        return dateModel;
    }
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    createDateObject(day, month, year) {
        /** @type {?} */
        const date = new Date();
        date.setDate(day);
        date.setMonth(month);
        date.setFullYear(year);
        return date;
    }
    /**
     * @param {?} currentYear
     * @return {?}
     */
    fillYears(currentYear) {
        /** @type {?} */
        const firstYear = currentYear - 100;
        /** @type {?} */
        const lastYear = currentYear + 100;
        /** @type {?} */
        const years = [];
        for (let i = firstYear; i <= lastYear; i++) {
            years.push(i);
        }
        return years;
    }
    /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    fillWeeks(month, year) {
        this.selectedMonth = {
            label: this.monthLabels[month],
            number: month,
            year: year
        };
        /** @type {?} */
        const finalMonthDay = this.createDateObject(0, month, year);
        /** @type {?} */
        const weeks = [];
        /** @type {?} */
        let initMonthDate = new Date(year, month, 1);
        /** @type {?} */
        let day = 0 - initMonthDate.getDay();
        /** @type {?} */
        let daysInWeek = [];
        while (initMonthDate.getDay() !== 0 || finalMonthDay >= initMonthDate) {
            ++day;
            initMonthDate = new Date(year, month, day);
            daysInWeek.push(this.createDayDate(initMonthDate, day, finalMonthDay));
            if (daysInWeek.length === 7) {
                weeks.push(daysInWeek);
                daysInWeek = [];
            }
        }
        return weeks;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isTodayDate(date) {
        /** @type {?} */
        const ISOCurrentDate = this.generateISODate(new Date());
        /** @type {?} */
        const ISODate = this.generateISODate(date);
        /** @type {?} */
        const isToday = (ISODate === ISOCurrentDate);
        return isToday;
    }
    /**
     * @param {?} date
     * @param {?} dayNumber
     * @param {?} finalMonthDay
     * @return {?}
     */
    createDayDate(date, dayNumber, finalMonthDay) {
        /** @type {?} */
        const isToday = this.isTodayDate(date);
        /** @type {?} */
        const isOutOfMonth = (dayNumber <= 0 || date > finalMonthDay);
        return this.createDateModel(date, isOutOfMonth, isToday, true);
    }
    /**
     * @return {?}
     */
    showPrevMonth() {
        /** @type {?} */
        const month = this.selectedMonth.number;
        /** @type {?} */
        const year = this.selectedMonth.year;
        /** @type {?} */
        const prevMonth = month >= 1
            ? month - 1
            : 11;
        /** @type {?} */
        const prevYear = month < 1
            ? year - 1
            : year;
        this.weeks = this.fillWeeks(prevMonth, prevYear);
    }
    /**
     * @return {?}
     */
    showNextMonth() {
        /** @type {?} */
        const month = this.selectedMonth.number;
        /** @type {?} */
        const year = this.selectedMonth.year;
        /** @type {?} */
        const nextMonth = month < 11
            ? month + 1
            : 0;
        /** @type {?} */
        const nextYear = month >= 11
            ? year + 1
            : year;
        this.weeks = this.fillWeeks(nextMonth, nextYear);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    generateISODate(date) {
        /** @type {?} */
        const day = date.getDate();
        /** @type {?} */
        const month = date.getMonth() + 1;
        /** @type {?} */
        const year = date.getFullYear();
        /** @type {?} */
        const dayString = day > 9
            ? day
            : `0${day}`;
        /** @type {?} */
        const monthString = month > 9
            ? month
            : `0${month}`;
        return `${year}-${monthString}-${dayString}`;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    onSelectDay(date) {
        if (date.isOutOfMonth) {
            return;
        }
        this.selectedDate = date;
        this.onSelectDayEmitter.emit(this.selectedDate);
    }
    /**
     * @param {?} year
     * @return {?}
     */
    onSelectYear(year) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const day = this.selectedDate.date.getDate();
            /** @type {?} */
            const month = this.selectedDate.date.getMonth();
            this.date = this.createDateObject(day, month, year);
            this.showYears = false;
            this.selectedDate = this.createDateModel(this.date, false, true, true);
            this.weeks = this.fillWeeks(month, year);
        }), this.selectYearAnimationDuration);
    }
    /**
     * @return {?}
     */
    displayYears() {
        this.showYears = true;
        setTimeout(this.scrollToActiveYear, 0);
    }
    /**
     * @return {?}
     */
    scrollToActiveYear() {
        const { nativeElement } = this.yearsContainerRef;
        /** @type {?} */
        const activeYear = nativeElement.querySelector('.selected');
        if (activeYear) {
            /** @type {?} */
            const top = this.getScrollCenter(nativeElement, activeYear);
            nativeElement.scrollTop = top;
        }
    }
    /**
     * @param {?} container
     * @param {?} internalElement
     * @return {?}
     */
    getScrollCenter(container, internalElement) {
        /** @type {?} */
        const yearTop = internalElement.offsetTop;
        /** @type {?} */
        const yearMiddleHeight = internalElement.offsetHeight / 2;
        /** @type {?} */
        const containerTop = container.offsetTop;
        /** @type {?} */
        const containerMiddleHeight = container.offsetHeight / 2;
        /** @type {?} */
        const elementRelativeTop = (yearTop - containerTop) - (containerMiddleHeight - yearMiddleHeight);
        if (elementRelativeTop < 0) {
            return 0;
        }
        return elementRelativeTop;
    }
}
CalendarComponent.defaultProps = {
    className: '',
    date: new Date(),
    displayOtherMonthDays: true
};
CalendarComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-calendar }`,
                template: "<div [ngClass]=\"[prefix + '-calendar', className]\">\n  <div [ngClass]=\"prefix + '-calendar-header'\">\n    <div [ngClass]=\"prefix + '-calendar-year'\">\n      <materialize-button (onClick)=\"displayYears()\">{{ selectedMonth.year }}</materialize-button>\n    </div>\n    <div [ngClass]=\"prefix + '-calendar-date'\">\n      <materialize-button (onClick)=\"showYears = false\">\n        {{ selectedDate.dayLabel.shortName }}, {{ selectedDate.monthLabel.shortName }} {{ selectedDate.date.getDate() }}\n      </materialize-button>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-calendar-body'\">\n    <ng-container *ngIf=\"!showYears\">\n      <div [ngClass]=\"prefix + '-calendar-controls'\">\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showPrevMonth()\">\n          <materialize-icon>chevron_left</materialize-icon>\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-month'\">\n          {{ selectedMonth.label.shortName }} {{ selectedMonth.year }}\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showNextMonth()\">\n          <materialize-icon>chevron_right</materialize-icon>\n        </div>\n      </div>\n      \n      <table [ngClass]=\"prefix + '-calendar-table'\">\n        <thead>\n          <tr>\n            <td [ngClass]=\"prefix + '-calendar-day-name'\" *ngFor=\"let day of dayLabels\">{{ day.shortestName }}</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let week of weeks\">\n            <td *ngFor=\"let day of week\">\n              <div [ngClass]=\"prefix + '-calendar-day'\"\n                (click)=\"onSelectDay(day)\"\n                *ngIf=\"!day.isOutOfMonth || displayOtherMonthDays\"\n  \n                [class.current]=\"day.isToday\"\n                [class.selected]=\"selectedDate.showSelected && selectedDate.ISODate === day.ISODate\"\n                [class.disabled]=\"day.isOutOfMonth\"\n  \n                materializeRipple\n                [rippleDuration]=\"800\"\n              >\n                {{ day.date.getDate() }}\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n    \n    <div [ngClass]=\"prefix + '-calendar-years'\"  #yearsContainer>\n      <ng-container *ngIf=\"showYears\">\n        <div [ngClass]=\"prefix + '-calendar-year-option'\"\n          *ngFor=\"let year of years\"\n\n          (click)=\"onSelectYear(year)\"\n          [class.selected]=\"year === selectedMonth.year\"\n\n          materializeRipple\n          [rippleDuration]=\"selectYearAnimationDuration\"\n        >\n          {{ year }}\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
CalendarComponent.ctorParameters = () => [];
CalendarComponent.propDecorators = {
    yearsContainerRef: [{ type: ViewChild, args: ['yearsContainer', { static: false },] }],
    onSelectDayEmitter: [{ type: Output, args: ['onSelectDay',] }],
    className: [{ type: Input }],
    date: [{ type: Input }],
    displayOtherMonthDays: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CalendarComponent.defaultProps;
    /** @type {?} */
    CalendarComponent.prototype.yearsContainerRef;
    /** @type {?} */
    CalendarComponent.prototype.onSelectDayEmitter;
    /** @type {?} */
    CalendarComponent.prototype.className;
    /** @type {?} */
    CalendarComponent.prototype.date;
    /** @type {?} */
    CalendarComponent.prototype.displayOtherMonthDays;
    /** @type {?} */
    CalendarComponent.prototype.prefix;
    /** @type {?} */
    CalendarComponent.prototype.dayLabels;
    /** @type {?} */
    CalendarComponent.prototype.monthLabels;
    /** @type {?} */
    CalendarComponent.prototype.selectedDate;
    /** @type {?} */
    CalendarComponent.prototype.selectedMonth;
    /** @type {?} */
    CalendarComponent.prototype.showYears;
    /** @type {?} */
    CalendarComponent.prototype.weeks;
    /** @type {?} */
    CalendarComponent.prototype.years;
    /** @type {?} */
    CalendarComponent.prototype.selectYearAnimationDuration;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/calendar/calendar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeCalendarModule {
}
MaterializeCalendarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CalendarComponent],
                exports: [CalendarComponent],
                imports: [
                    CommonModule,
                    MaterializeButtonModule,
                    MaterializeCommonModule,
                    MaterializeIconModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/calendar/calendar.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function CalendarModel() { }
if (false) {
    /** @type {?} */
    CalendarModel.prototype.className;
    /** @type {?} */
    CalendarModel.prototype.date;
    /** @type {?} */
    CalendarModel.prototype.displayOtherMonthDays;
}
/**
 * @record
 */
function DateModel() { }
if (false) {
    /** @type {?} */
    DateModel.prototype.date;
    /** @type {?} */
    DateModel.prototype.dayLabel;
    /** @type {?} */
    DateModel.prototype.ISODate;
    /** @type {?} */
    DateModel.prototype.isToday;
    /** @type {?} */
    DateModel.prototype.isOutOfMonth;
    /** @type {?} */
    DateModel.prototype.monthLabel;
    /** @type {?} */
    DateModel.prototype.showSelected;
}
/**
 * @record
 */
function MonthModel() { }
if (false) {
    /** @type {?} */
    MonthModel.prototype.label;
    /** @type {?} */
    MonthModel.prototype.number;
    /** @type {?} */
    MonthModel.prototype.year;
}
/**
 * @record
 */
function DateLabel() { }
if (false) {
    /** @type {?} */
    DateLabel.prototype.name;
    /** @type {?} */
    DateLabel.prototype.shortName;
    /** @type {?} */
    DateLabel.prototype.shortestName;
}
/**
 * @record
 */
function DayLabels() { }
if (false) {
    /** @type {?} */
    DayLabels.prototype.sunday;
    /** @type {?} */
    DayLabels.prototype.monday;
    /** @type {?} */
    DayLabels.prototype.tuesday;
    /** @type {?} */
    DayLabels.prototype.wednesday;
    /** @type {?} */
    DayLabels.prototype.thursday;
    /** @type {?} */
    DayLabels.prototype.friday;
    /** @type {?} */
    DayLabels.prototype.saturday;
}
/**
 * @record
 */
function MonthLabels() { }
if (false) {
    /** @type {?} */
    MonthLabels.prototype.january;
    /** @type {?} */
    MonthLabels.prototype.february;
    /** @type {?} */
    MonthLabels.prototype.march;
    /** @type {?} */
    MonthLabels.prototype.april;
    /** @type {?} */
    MonthLabels.prototype.may;
    /** @type {?} */
    MonthLabels.prototype.june;
    /** @type {?} */
    MonthLabels.prototype.july;
    /** @type {?} */
    MonthLabels.prototype.august;
    /** @type {?} */
    MonthLabels.prototype.september;
    /** @type {?} */
    MonthLabels.prototype.october;
    /** @type {?} */
    MonthLabels.prototype.november;
    /** @type {?} */
    MonthLabels.prototype.december;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/card/card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CardComponent {
    constructor() {
        this.className = CardComponent.defaultProps.className;
        this.prefix = config.components.prefix;
    }
}
CardComponent.defaultProps = { className: '' };
CardComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-card }`,
                template: "<div [ngClass]=\"[prefix + '-card', className]\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
CardComponent.propDecorators = {
    className: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CardComponent.defaultProps;
    /** @type {?} */
    CardComponent.prototype.className;
    /** @type {?} */
    CardComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/card/card.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeCardModule {
}
MaterializeCardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CardComponent],
                exports: [CardComponent],
                imports: [CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/card/card.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function CardModel() { }
if (false) {
    /** @type {?} */
    CardModel.prototype.className;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/checkbox/checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxComponent {
    constructor() {
        this.className = CheckboxComponent.defaultProps.className;
        this.disabled = CheckboxComponent.defaultProps.disabled;
        this.id = CheckboxComponent.defaultProps.id;
        this.indeterminate = CheckboxComponent.defaultProps.indeterminate;
        this.name = CheckboxComponent.defaultProps.name;
        this.required = CheckboxComponent.defaultProps.required;
        this.value = CheckboxComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onChangeEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    toggleValue() {
        if (!this.disabled) {
            this.value = !this.value;
            this.isFocused = false;
            this.onChange(this.value);
            this.onChangeEmitter.emit(this.value);
        }
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
CheckboxComponent.defaultProps = {
    className: '',
    disabled: false,
    id: null,
    indeterminate: false,
    name: '',
    required: false,
    value: false
};
CheckboxComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CheckboxComponent))
                    }],
                selector: `${config.components.prefix}-checkbox }`,
                template: "<div  (click)=\"toggleValue()\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"  \n\n  [ngClass]=\"[prefix + '-checkbox', className]\"\n  [class.active]=\"value\"\n  [class.focused]=\"isFocused\"\n  [class.indeterminate]=\"indeterminate && !value\"\n  [class.disabled]=\"disabled\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n>\n  <div [ngClass]=\"[prefix + '-checkbox-indicator']\">\n    <div [ngClass]=\"[prefix + '-checkbox-indicator-ripple']\" materializeRipple [isRippleActive]=\"!disabled\" [rippleDuration]=\"200\"></div>\n  </div>\n  <div [ngClass]=\"[prefix + '-checkbox-label']\">\n    <ng-content></ng-content>\n  </div>\n\n  <input type=\"checkbox\" [disabled]=\"disabled\" [attr.id]=\"id\" [name]=\"name\" [required]=\"required\" [checked]=\"value\" [indeterminate]=\"indeterminate\" [value]=\"value\" />\n</div>\n  "
            }] }
];
/** @nocollapse */
CheckboxComponent.ctorParameters = () => [];
CheckboxComponent.propDecorators = {
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }],
    indeterminate: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }]
};
if (false) {
    /** @type {?} */
    CheckboxComponent.defaultProps;
    /** @type {?} */
    CheckboxComponent.prototype.className;
    /** @type {?} */
    CheckboxComponent.prototype.disabled;
    /** @type {?} */
    CheckboxComponent.prototype.id;
    /** @type {?} */
    CheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    CheckboxComponent.prototype.name;
    /** @type {?} */
    CheckboxComponent.prototype.required;
    /** @type {?} */
    CheckboxComponent.prototype.value;
    /** @type {?} */
    CheckboxComponent.prototype.onChangeEmitter;
    /** @type {?} */
    CheckboxComponent.prototype.prefix;
    /** @type {?} */
    CheckboxComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/checkbox/checkbox.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeCheckboxModule {
}
MaterializeCheckboxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CheckboxComponent],
                exports: [CheckboxComponent],
                imports: [
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/checkbox/checkbox.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function CheckboxModel() { }
if (false) {
    /** @type {?} */
    CheckboxModel.prototype.className;
    /** @type {?} */
    CheckboxModel.prototype.disabled;
    /** @type {?} */
    CheckboxModel.prototype.id;
    /** @type {?} */
    CheckboxModel.prototype.indeterminate;
    /** @type {?} */
    CheckboxModel.prototype.name;
    /** @type {?} */
    CheckboxModel.prototype.required;
    /** @type {?} */
    CheckboxModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/collapsible/collapsible.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function CollapsibleModel() { }
if (false) {
    /** @type {?} */
    CollapsibleModel.prototype.className;
    /** @type {?} */
    CollapsibleModel.prototype.disabled;
    /** @type {?} */
    CollapsibleModel.prototype.showIndicator;
    /** @type {?} */
    CollapsibleModel.prototype.isOpen;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/input/input.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function InputModel() { }
if (false) {
    /** @type {?} */
    InputModel.prototype.autocomplete;
    /** @type {?} */
    InputModel.prototype.className;
    /** @type {?} */
    InputModel.prototype.disabled;
    /** @type {?} */
    InputModel.prototype.floatLabel;
    /** @type {?} */
    InputModel.prototype.id;
    /** @type {?} */
    InputModel.prototype.hasCounter;
    /** @type {?} */
    InputModel.prototype.name;
    /** @type {?} */
    InputModel.prototype.maxLength;
    /** @type {?} */
    InputModel.prototype.placeholder;
    /** @type {?} */
    InputModel.prototype.required;
    /** @type {?} */
    InputModel.prototype.type;
    /** @type {?} */
    InputModel.prototype.value;
}
/** @enum {string} */
const INPUT_TYPE = {
    PASSWORD: "password",
    TEXT: "text",
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatePickerComponent {
    constructor() {
        this.className = DatePickerComponent.defaultProps.className;
        this.disabled = DatePickerComponent.defaultProps.disabled;
        this.displayOtherMonthDays = DatePickerComponent.defaultProps.displayOtherMonthDays;
        this.floatLabel = DatePickerComponent.defaultProps.floatLabel;
        this.format = DatePickerComponent.defaultProps.format;
        this.fullSize = DatePickerComponent.defaultProps.fullSize;
        this.id = DatePickerComponent.defaultProps.id;
        this.name = DatePickerComponent.defaultProps.name;
        this.placeholder = DatePickerComponent.defaultProps.placeholder;
        this.required = DatePickerComponent.defaultProps.required;
        this.inputValue = DatePickerComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isOpen = false;
        this.close = this.close.bind(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.date = this.buildDate(this.inputValue);
    }
    /**
     * @param {?} selectedDate
     * @return {?}
     */
    onSelectDay(selectedDate) {
        this.isOpen = false;
        this.date = selectedDate.date;
        this.inputValue = this.formatDate(selectedDate.date);
        this.onChange(selectedDate.date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    formatDate(date) {
        /** @type {?} */
        const day = date.getDate();
        /** @type {?} */
        const month = date.getMonth() + 1;
        /** @type {?} */
        const dayString = day < 10
            ? `0${day}`
            : day.toString();
        /** @type {?} */
        const monthString = month < 10
            ? `0${month}`
            : month.toString();
        /** @type {?} */
        const yearString = date.getFullYear().toString();
        /** @type {?} */
        const formatedDate = this.format
            .replace('dd', dayString)
            .replace('mm', monthString)
            .replace('yyyy', yearString);
        return formatedDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    buildDate(value) {
        /** @type {?} */
        const dayStartPosition = this.format.indexOf(DatePickerComponent.DAY_KEY);
        /** @type {?} */
        const monthStartPosition = this.format.indexOf(DatePickerComponent.MONTH_KEY);
        /** @type {?} */
        const yearStartPosition = this.format.indexOf(DatePickerComponent.YEAR_KEY);
        if (dayStartPosition >= 0 && monthStartPosition >= 0 && yearStartPosition >= 0) {
            /** @type {?} */
            const dayEndPosition = dayStartPosition + DatePickerComponent.DAY_KEY.length;
            /** @type {?} */
            const monthEndPosition = monthStartPosition + DatePickerComponent.MONTH_KEY.length;
            /** @type {?} */
            const yearEndPosition = yearStartPosition + DatePickerComponent.YEAR_KEY.length;
            /** @type {?} */
            const dayString = value.substring(dayStartPosition, dayEndPosition);
            /** @type {?} */
            const monthString = value.substring(monthStartPosition, monthEndPosition);
            /** @type {?} */
            const yearString = value.substring(yearStartPosition, yearEndPosition);
            if (dayString && monthString && yearString) {
                /** @type {?} */
                const day = Number(dayString);
                /** @type {?} */
                const month = Number(monthString) - 1;
                /** @type {?} */
                const year = Number(yearString);
                return new Date(year, month, day);
            }
        }
        return new Date();
    }
    /**
     * @return {?}
     */
    open() {
        this.isOpen = true;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.backdropRef.nativeElement.addEventListener('click', this.close);
        }), 0);
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onInputChange(value) {
        this.date = this.buildDate(value);
        this.onChange(this.date);
    }
    /**
     * @return {?}
     */
    onInputFocus() {
        this.onTouched();
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.date = value;
        this.inputValue = this.formatDate(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
    }
    /**
     * @return {?}
     */
    onTouched() { }
}
DatePickerComponent.DAY_KEY = 'dd';
DatePickerComponent.MONTH_KEY = 'mm';
DatePickerComponent.YEAR_KEY = 'yyyy';
DatePickerComponent.defaultProps = {
    autocomplete: 'none',
    className: '',
    date: new Date(),
    disabled: false,
    displayOtherMonthDays: true,
    floatLabel: '',
    format: 'dd-mm-yyyy',
    fullSize: false,
    hasCounter: false,
    id: null,
    maxLength: 500,
    name: '',
    placeholder: '',
    required: false,
    type: INPUT_TYPE.TEXT,
    value: ''
};
DatePickerComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => DatePickerComponent))
                    }],
                selector: `${config.components.prefix}-datepicker }`,
                template: "<div [ngClass]=\"[prefix + '-datepicker', className]\" [class.full-size]=\"fullSize\">\n  <div #backdrop *ngIf=\"isOpen\" [ngClass]=\"prefix + '-datepicker-backdrop'\"></div>\n\n  <materialize-input\n    [disabled]=\"disabled\"\n    [floatLabel]=\"floatLabel\"\n    [id]=\"id\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [value]=\"inputValue\"\n\n    (onChange)=\"onInputChange($event)\"\n    (onFocus)=\"onInputFocus()\"\n  >\n    <materialize-button (onClick)=\"open()\"\n      materializeSuffix\n      [className]=\"prefix + '-datepicker-button'\"\n      [disabled]=\"disabled\"\n    >\n      <materialize-icon [className]=\"prefix + '-datepicker-button'\">calendar_today</materialize-icon>\n    </materialize-button>\n  </materialize-input>\n\n  <materialize-calendar *ngIf=\"isOpen\"\n    [className]=\"prefix + '-datepicker-calendar'\"\n    [date]=\"date\"\n    (onSelectDay)=\"onSelectDay($event)\">\n  </materialize-calendar>\n</div>\n"
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [];
DatePickerComponent.propDecorators = {
    backdropRef: [{ type: ViewChild, args: ['backdrop', { static: false },] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    displayOtherMonthDays: [{ type: Input }],
    floatLabel: [{ type: Input }],
    format: [{ type: Input }],
    fullSize: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    inputValue: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DatePickerComponent.DAY_KEY;
    /** @type {?} */
    DatePickerComponent.MONTH_KEY;
    /** @type {?} */
    DatePickerComponent.YEAR_KEY;
    /** @type {?} */
    DatePickerComponent.defaultProps;
    /** @type {?} */
    DatePickerComponent.prototype.backdropRef;
    /** @type {?} */
    DatePickerComponent.prototype.className;
    /** @type {?} */
    DatePickerComponent.prototype.disabled;
    /** @type {?} */
    DatePickerComponent.prototype.displayOtherMonthDays;
    /** @type {?} */
    DatePickerComponent.prototype.floatLabel;
    /** @type {?} */
    DatePickerComponent.prototype.format;
    /** @type {?} */
    DatePickerComponent.prototype.fullSize;
    /** @type {?} */
    DatePickerComponent.prototype.id;
    /** @type {?} */
    DatePickerComponent.prototype.name;
    /** @type {?} */
    DatePickerComponent.prototype.placeholder;
    /** @type {?} */
    DatePickerComponent.prototype.required;
    /** @type {?} */
    DatePickerComponent.prototype.inputValue;
    /** @type {?} */
    DatePickerComponent.prototype.prefix;
    /** @type {?} */
    DatePickerComponent.prototype.date;
    /** @type {?} */
    DatePickerComponent.prototype.isOpen;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/input/input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputComponent {
    constructor() {
        this.autocomplete = InputComponent.defaultProps.autocomplete;
        this.className = InputComponent.defaultProps.className;
        this.disabled = InputComponent.defaultProps.disabled;
        this.floatLabel = InputComponent.defaultProps.floatLabel;
        this.hasCounter = InputComponent.defaultProps.hasCounter;
        this.id = InputComponent.defaultProps.id;
        this.maxLength = InputComponent.defaultProps.maxLength;
        this.name = InputComponent.defaultProps.name;
        this.placeholder = InputComponent.defaultProps.placeholder;
        this.required = InputComponent.defaultProps.required;
        this.type = InputComponent.defaultProps.type;
        this.value = InputComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onBlurEmitter = new EventEmitter();
        this.onChangeEmitter = new EventEmitter();
        this.onFocusEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onBlurEmitter.emit();
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onFocusEmitter.emit();
            this.onTouched();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        const { value } = event.target;
        this.value = value;
        this.onChangeEmitter.emit(this.value);
        this.onInputChange(value);
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onInputChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onInputChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
InputComponent.defaultProps = {
    autocomplete: 'none',
    className: '',
    disabled: false,
    floatLabel: '',
    hasCounter: false,
    id: null,
    maxLength: 500,
    name: '',
    placeholder: '',
    required: false,
    type: INPUT_TYPE.TEXT,
    value: ''
};
InputComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => InputComponent))
                    }],
                selector: `${config.components.prefix}-input }`,
                template: "<div\n  [ngClass]=\"[prefix + '-form-control-container', className]\"\n  [class.float-label]=\"floatLabel\"\n  [class.active]=\"value || placeholder\"\n  [class.focused]=\"isFocused\"\n  [class.disabled]=\"disabled\"\n>\n  <div [ngClass]=\"prefix + '-form-control-prefix'\">\n    <ng-content select=\"[materializePrefix]\"></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n    <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n    <input (input)=\"onChange($event)\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n      [ngClass]=\"prefix + '-form-control'\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [attr.id]=\"id\"\n      [maxLength]=\"maxLength\"\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [type]=\"type\"\n      [value]=\"value\"\n    />\n  </div>\n\n  <div [ngClass]=\"prefix + '-form-control-suffix'\">\n    <ng-content select=\"[materializeSuffix]\"></ng-content>\n  </div>\n</div>\n\n<materialize-form-message type=\"info\" *ngIf=\"hasCounter\">{{ value.length }} / {{ maxLength }}</materialize-form-message>\n"
            }] }
];
/** @nocollapse */
InputComponent.ctorParameters = () => [];
InputComponent.propDecorators = {
    onFocusEmitter: [{ type: Output, args: ['onFocus',] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
    autocomplete: [{ type: Input }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    floatLabel: [{ type: Input }],
    hasCounter: [{ type: Input }],
    id: [{ type: Input }],
    maxLength: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    type: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    InputComponent.defaultProps;
    /** @type {?} */
    InputComponent.prototype.onFocusEmitter;
    /** @type {?} */
    InputComponent.prototype.onChangeEmitter;
    /** @type {?} */
    InputComponent.prototype.onBlurEmitter;
    /** @type {?} */
    InputComponent.prototype.autocomplete;
    /** @type {?} */
    InputComponent.prototype.className;
    /** @type {?} */
    InputComponent.prototype.disabled;
    /** @type {?} */
    InputComponent.prototype.floatLabel;
    /** @type {?} */
    InputComponent.prototype.hasCounter;
    /** @type {?} */
    InputComponent.prototype.id;
    /** @type {?} */
    InputComponent.prototype.maxLength;
    /** @type {?} */
    InputComponent.prototype.name;
    /** @type {?} */
    InputComponent.prototype.placeholder;
    /** @type {?} */
    InputComponent.prototype.required;
    /** @type {?} */
    InputComponent.prototype.type;
    /** @type {?} */
    InputComponent.prototype.value;
    /** @type {?} */
    InputComponent.prototype.prefix;
    /** @type {?} */
    InputComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/form-message/form-message.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function FormMessageModel() { }
if (false) {
    /** @type {?} */
    FormMessageModel.prototype.className;
    /** @type {?} */
    FormMessageModel.prototype.level;
}
/** @enum {string} */
const FORM_MESSAGE_LEVELS = {
    ERROR: "error",
    INFO: "info",
    SUCCESS: "success",
    WARNING: "warning",
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/form-message/form-message.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormMessageComponent {
    constructor() {
        this.className = FormMessageComponent.defaultProps.className;
        this.level = FormMessageComponent.defaultProps.level;
        this.prefix = config.components.prefix;
    }
}
FormMessageComponent.defaultProps = {
    className: '',
    level: FORM_MESSAGE_LEVELS.INFO
};
FormMessageComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-form-message }`,
                template: "<div [ngClass]=\"[prefix + '-form-message', className, level]\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
FormMessageComponent.propDecorators = {
    className: [{ type: Input, args: ['className',] }],
    level: [{ type: Input, args: ['type',] }]
};
if (false) {
    /** @type {?} */
    FormMessageComponent.defaultProps;
    /** @type {?} */
    FormMessageComponent.prototype.className;
    /** @type {?} */
    FormMessageComponent.prototype.level;
    /** @type {?} */
    FormMessageComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/form-message/form-message.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeFormMessageModule {
}
MaterializeFormMessageModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FormMessageComponent],
                exports: [FormMessageComponent],
                imports: [CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/input/input.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeInputModule {
}
MaterializeInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [InputComponent],
                exports: [InputComponent],
                imports: [
                    CommonModule,
                    MaterializeCommonModule,
                    MaterializeIconModule,
                    MaterializeFormMessageModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/datepicker/datepicker.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeDatePickerModule {
}
MaterializeDatePickerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DatePickerComponent],
                exports: [DatePickerComponent],
                imports: [
                    CommonModule,
                    MaterializeButtonModule,
                    MaterializeCalendarModule,
                    MaterializeIconModule,
                    MaterializeInputModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/datepicker/datepicker.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function DatePickerModel() { }
if (false) {
    /** @type {?} */
    DatePickerModel.prototype.date;
    /** @type {?} */
    DatePickerModel.prototype.format;
    /** @type {?} */
    DatePickerModel.prototype.fullSize;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/drawer/drawer.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
class DrawerModel {
}
if (false) {
    /** @type {?} */
    DrawerModel.prototype.className;
    /** @type {?} */
    DrawerModel.prototype.closeOnBackdrop;
    /** @type {?} */
    DrawerModel.prototype.hasBackdrop;
    /** @type {?} */
    DrawerModel.prototype.isOpen;
    /** @type {?} */
    DrawerModel.prototype.position;
    /** @type {?} */
    DrawerModel.prototype.transitionDuration;
    /** @type {?} */
    DrawerModel.prototype.type;
}
/** @enum {string} */
const DRAWER_POSITIONS = {
    RIGHT: "right",
    LEFT: "left",
};
/** @enum {string} */
const DRAWER_TYPES = {
    OVER: "over",
    PUSH: "push",
    STATIC: "static",
};

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/drawer/drawer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DrawerComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = DrawerComponent.defaultProps.className;
        this.closeOnBackdrop = DrawerComponent.defaultProps.closeOnBackdrop;
        this.hasBackdrop = DrawerComponent.defaultProps.hasBackdrop;
        this.isOpen = DrawerComponent.defaultProps.isOpen;
        this.position = DrawerComponent.defaultProps.position;
        this.transitionDuration = DrawerComponent.defaultProps.transitionDuration;
        this.type = DrawerComponent.defaultProps.type;
        this.prefix = config.components.prefix;
        this.close = this.close.bind(this);
        this.closeByBackdrop = this.closeByBackdrop.bind(this);
        this.open = this.open.bind(this);
        this.onOpenEmitter = new EventEmitter();
        this.onCloseEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.renderer.setStyle(this.drawerRef.nativeElement, 'transitionDuration', `${this.transitionDuration}ms`);
            if (this.closeOnBackdrop) {
                this.backdropRef.nativeElement.addEventListener('click', this.closeByBackdrop);
            }
        }), 0);
    }
    /**
     * @return {?}
     */
    open() {
        if (this.type !== DRAWER_TYPES.STATIC) {
            this.renderer.setStyle(this.backdropRef.nativeElement, 'display', 'block');
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.isOpen = true;
            }), 0);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeByBackdrop(event) {
        if (event.target === this.backdropRef.nativeElement) {
            this.close();
        }
    }
    /**
     * @return {?}
     */
    close() {
        this.isOpen = false;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.renderer.setStyle(this.backdropRef.nativeElement, 'display', 'none');
            this.onCloseEmitter.emit();
        }), this.transitionDuration);
    }
}
DrawerComponent.defaultProps = {
    className: '',
    closeOnBackdrop: true,
    hasBackdrop: true,
    isOpen: false,
    position: DRAWER_POSITIONS.LEFT,
    transitionDuration: 250,
    type: DRAWER_TYPES.OVER
};
DrawerComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-drawer }`,
                template: "<div #drawer\n  [ngClass]=\"[prefix + '-drawer', className, type, position]\"\n  [class.open]=\"isOpen\"\n  [class.backdrop]=\"hasBackdrop\"\n>\n  <div [ngClass]=\"prefix + '-drawer-backdrop'\" #backdrop></div>\n\n  <div [ngClass]=\"prefix + '-drawer-content'\">\n    <ng-content select=\"materialize-drawer-content\"></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-drawer-container'\">\n    <ng-content select=\"materialize-drawer-container\"></ng-content>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
DrawerComponent.ctorParameters = () => [
    { type: Renderer2 }
];
DrawerComponent.propDecorators = {
    backdropRef: [{ type: ViewChild, args: ['backdrop', { static: true },] }],
    drawerRef: [{ type: ViewChild, args: ['drawer', { static: true },] }],
    onOpenEmitter: [{ type: Output, args: ['onOpen',] }],
    onCloseEmitter: [{ type: Output, args: ['onClose',] }],
    className: [{ type: Input }],
    closeOnBackdrop: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    isOpen: [{ type: Input }],
    position: [{ type: Input }],
    transitionDuration: [{ type: Input }],
    type: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DrawerComponent.defaultProps;
    /** @type {?} */
    DrawerComponent.prototype.backdropRef;
    /** @type {?} */
    DrawerComponent.prototype.drawerRef;
    /** @type {?} */
    DrawerComponent.prototype.onOpenEmitter;
    /** @type {?} */
    DrawerComponent.prototype.onCloseEmitter;
    /** @type {?} */
    DrawerComponent.prototype.className;
    /** @type {?} */
    DrawerComponent.prototype.closeOnBackdrop;
    /** @type {?} */
    DrawerComponent.prototype.hasBackdrop;
    /** @type {?} */
    DrawerComponent.prototype.isOpen;
    /** @type {?} */
    DrawerComponent.prototype.position;
    /** @type {?} */
    DrawerComponent.prototype.transitionDuration;
    /** @type {?} */
    DrawerComponent.prototype.type;
    /** @type {?} */
    DrawerComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    DrawerComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/drawer/drawer-container/drawer-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DrawerContainerComponent {
}
DrawerContainerComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-drawer-container }`,
                template: "<ng-content></ng-content>\n"
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/drawer/drawer-content/drawer-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DrawerContentComponent {
}
DrawerContentComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-drawer-content }`,
                template: "<ng-content></ng-content>    \n"
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/drawer/drawer.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeDrawerModule {
}
MaterializeDrawerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DrawerComponent,
                    DrawerContainerComponent,
                    DrawerContentComponent
                ],
                exports: [
                    DrawerComponent,
                    DrawerContainerComponent,
                    DrawerContentComponent
                ],
                imports: [
                    CommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/utils/get-offset-top.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/** @type {?} */
const getOffseTop = (/**
 * @param {?} element
 * @return {?}
 */
(element) => {
    /** @type {?} */
    let offsetTop = 0;
    /** @type {?} */
    let nextElement = element;
    while (nextElement.offsetParent) {
        if (!isNaN(nextElement.offsetTop)) {
            offsetTop += nextElement.offsetTop;
        }
        nextElement = (/** @type {?} */ (nextElement.offsetParent));
    }
    return offsetTop;
});

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/glossary/glossary-item/glossary-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GlossaryItemComponent {
    constructor() {
        this.className = GlossaryItemComponent.defaultProps.className;
        this.referenceId = GlossaryItemComponent.defaultProps.referenceId;
        this.prefix = config.components.prefix;
        this.isActive = false;
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.onClickEmitter.emit(this.referenceId);
    }
}
GlossaryItemComponent.defaultProps = {
    className: '',
    referenceId: ''
};
GlossaryItemComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-glossary-item`,
                template: "<li\n  [ngClass]=\"[prefix + '-glossary-item', className]\"\n  [class.active]=\"isActive\"\n>\n  <ng-content></ng-content>\n</li>\n"
            }] }
];
/** @nocollapse */
GlossaryItemComponent.ctorParameters = () => [];
GlossaryItemComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    className: [{ type: Input }],
    referenceId: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    GlossaryItemComponent.defaultProps;
    /** @type {?} */
    GlossaryItemComponent.prototype.onClickEmitter;
    /** @type {?} */
    GlossaryItemComponent.prototype.className;
    /** @type {?} */
    GlossaryItemComponent.prototype.referenceId;
    /** @type {?} */
    GlossaryItemComponent.prototype.prefix;
    /** @type {?} */
    GlossaryItemComponent.prototype.isActive;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/glossary/glossary.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GlossaryComponent {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        this.className = GlossaryComponent.defaultProps.className;
        this.scrollSpy = GlossaryComponent.defaultProps.scrollSpy;
        this.topSpace = GlossaryComponent.defaultProps.topSpace;
        this.prefix = config.components.prefix;
        this.activeReferenceId = '';
        this.onClickItem = this.onClickItem.bind(this);
        this.registerOptions = this.registerOptions.bind(this);
        this.update = this.update.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.registerOptions();
        setTimeout(this.update, 30);
        if (this.scrollSpy) {
            this.scrollSpy.onChangeEmitter.subscribe((/**
             * @param {?} referenceId
             * @return {?}
             */
            (referenceId) => {
                this.activeReferenceId = referenceId;
                this.activeItemByReferenceId(referenceId);
            }));
        }
    }
    /**
     * @return {?}
     */
    update() {
        this.activeReferenceId = this.getActiveReferenceId();
        this.activeItemByReferenceId(this.activeReferenceId);
        this.scrollTo(this.activeReferenceId);
    }
    /**
     * @param {?} referenceId
     * @return {?}
     */
    scrollTo(referenceId) {
        /** @type {?} */
        const element = document.getElementById(referenceId);
        if (element) {
            /** @type {?} */
            const elementOffsetTop = getOffseTop(element);
            /** @type {?} */
            const scrollTop = elementOffsetTop - this.topSpace;
            setTimeout((/**
             * @return {?}
             */
            () => window.scrollTo(0, scrollTop)), 150);
        }
    }
    /**
     * @return {?}
     */
    getActiveReferenceId() {
        /** @type {?} */
        const routerTree = this.router.parseUrl(this.router.url);
        if (routerTree && routerTree.fragment) {
            return routerTree.fragment;
        }
        return '';
    }
    /**
     * @return {?}
     */
    registerOptions() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.onClickEmitter.subscribe(this.onClickItem);
        }));
    }
    /**
     * @param {?} referenceId
     * @return {?}
     */
    onClickItem(referenceId) {
        this.activeReferenceId = referenceId;
        this.activeItemByReferenceId(referenceId);
        this.scrollTo(referenceId);
        /** @type {?} */
        const routerTree = this.router.parseUrl(this.router.url);
        const { primary } = routerTree.root.children;
        /** @type {?} */
        const urlWithoutParams = primary
            ? primary.segments.map((/**
             * @param {?} segment
             * @return {?}
             */
            segment => segment.path))
            : routerTree.root.segments.map((/**
             * @param {?} segment
             * @return {?}
             */
            segment => segment.path));
        this.router.navigate(urlWithoutParams, { fragment: referenceId });
    }
    /**
     * @param {?} referenceId
     * @return {?}
     */
    activeItemByReferenceId(referenceId) {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.isActive = item.referenceId === referenceId;
        }));
    }
}
GlossaryComponent.defaultProps = {
    className: '',
    scrollSpy: null,
    topSpace: 0
};
GlossaryComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-glossary`,
                template: "<ul [ngClass]=\"className\">\n  <ng-content></ng-content>\n</ul>\n"
            }] }
];
/** @nocollapse */
GlossaryComponent.ctorParameters = () => [
    { type: Router }
];
GlossaryComponent.propDecorators = {
    items: [{ type: ContentChildren, args: [GlossaryItemComponent,] }],
    className: [{ type: Input }],
    scrollSpy: [{ type: Input }],
    topSpace: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GlossaryComponent.defaultProps;
    /** @type {?} */
    GlossaryComponent.prototype.items;
    /** @type {?} */
    GlossaryComponent.prototype.className;
    /** @type {?} */
    GlossaryComponent.prototype.scrollSpy;
    /** @type {?} */
    GlossaryComponent.prototype.topSpace;
    /** @type {?} */
    GlossaryComponent.prototype.prefix;
    /** @type {?} */
    GlossaryComponent.prototype.activeReferenceId;
    /**
     * @type {?}
     * @private
     */
    GlossaryComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/scroll-spy/scroll-spy-item/scroll-spy-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ScrollSpyItemComponent {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.className = ScrollSpyItemComponent.defaultProps.className;
        this.id = ScrollSpyItemComponent.defaultProps.id;
    }
}
ScrollSpyItemComponent.defaultProps = {
    className: '',
    id: ''
};
ScrollSpyItemComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-scroll-spy-item`,
                template: "<div [attr.id]=\"id\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
ScrollSpyItemComponent.ctorParameters = () => [
    { type: ElementRef }
];
ScrollSpyItemComponent.propDecorators = {
    className: [{ type: Input }],
    id: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ScrollSpyItemComponent.defaultProps;
    /** @type {?} */
    ScrollSpyItemComponent.prototype.className;
    /** @type {?} */
    ScrollSpyItemComponent.prototype.id;
    /** @type {?} */
    ScrollSpyItemComponent.prototype.element;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/utils/window-scroll-position.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/** @type {?} */
const windowScrollPosition = (/**
 * @return {?}
 */
() => {
    if (window.pageYOffset) {
        return window.pageYOffset;
    }
    return document.body.scrollTop;
});

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/scroll-spy/scroll-spy.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ScrollSpyComponent {
    constructor() {
        this.className = ScrollSpyComponent.defaultProps.className;
        this.itemId = ScrollSpyComponent.defaultProps.itemId;
        this.onChangeEmitter = new EventEmitter();
        this.onScroll = this.onScroll.bind(this);
        this.validateScroll = this.validateScroll.bind(this);
        window.addEventListener('scroll', this.onScroll);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.onScroll();
    }
    /**
     * @return {?}
     */
    onScroll() {
        setTimeout(this.validateScroll, 100);
    }
    /**
     * @return {?}
     */
    validateScroll() {
        /** @type {?} */
        const item = this.getCurrentItem();
        if (this.itemId !== item.id) {
            this.itemId = item.id;
            this.onChangeEmitter.emit(this.itemId);
        }
    }
    /**
     * @return {?}
     */
    getCurrentItem() {
        /** @type {?} */
        const items = this.items.toArray();
        for (let i = 0; i < items.length; i++) {
            /** @type {?} */
            const elementOffsetTop = getOffseTop(items[i].element.nativeElement);
            if (elementOffsetTop > windowScrollPosition()) {
                /** @type {?} */
                const prevItem = items[i - 1]
                    ? items[i - 1]
                    : items[0];
                return prevItem;
            }
        }
        return items[items.length - 1];
    }
}
ScrollSpyComponent.defaultProps = {
    className: '',
    itemId: ''
};
ScrollSpyComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-scroll-spy`,
                template: "<div [ngClass]=\"className\">\n  <ng-content select=\"materialize-scroll-spy-item\"></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
ScrollSpyComponent.ctorParameters = () => [];
ScrollSpyComponent.propDecorators = {
    items: [{ type: ContentChildren, args: [ScrollSpyItemComponent,] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    className: [{ type: Input }],
    itemId: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ScrollSpyComponent.defaultProps;
    /** @type {?} */
    ScrollSpyComponent.prototype.items;
    /** @type {?} */
    ScrollSpyComponent.prototype.onChangeEmitter;
    /** @type {?} */
    ScrollSpyComponent.prototype.className;
    /** @type {?} */
    ScrollSpyComponent.prototype.itemId;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/scroll-spy/scroll-spy.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeScrollSpyModule {
}
MaterializeScrollSpyModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ScrollSpyComponent,
                    ScrollSpyItemComponent
                ],
                exports: [
                    ScrollSpyComponent,
                    ScrollSpyItemComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/glossary/glossary.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeGlossaryModule {
}
MaterializeGlossaryModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    GlossaryComponent,
                    GlossaryItemComponent
                ],
                exports: [
                    GlossaryComponent,
                    GlossaryItemComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeScrollSpyModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/glossary/glossary-item/glossary-item.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function GlossaryItemModel() { }
if (false) {
    /** @type {?} */
    GlossaryItemModel.prototype.className;
    /** @type {?} */
    GlossaryItemModel.prototype.referenceId;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/glossary/glossary.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function GlossaryModel() { }
if (false) {
    /** @type {?} */
    GlossaryModel.prototype.className;
    /** @type {?} */
    GlossaryModel.prototype.scrollSpy;
    /** @type {?} */
    GlossaryModel.prototype.topSpace;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/html-visualizer/html-visualizer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HTMLVisualizerComponent {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.className = HTMLVisualizerComponent.defaultProps.className;
        this.html = HTMLVisualizerComponent.defaultProps.html;
        this.prefix = config.components.prefix;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.htmlContent = this.render(this.html);
    }
    /**
     * @param {?} html
     * @return {?}
     */
    render(html) {
        /** @type {?} */
        const tags = this.splitByTags(html);
        /** @type {?} */
        const lines = [];
        /** @type {?} */
        let depth = 0;
        for (let i = 0; i < tags.length; i++) {
            /** @type {?} */
            const currentTag = tags[i];
            /** @type {?} */
            const nextTag = tags[i + 1];
            /** @type {?} */
            const lastTag = tags[i + 2];
            /** @type {?} */
            const result = this.createLineLogic(currentTag, nextTag, lastTag, depth, i);
            depth = result.depth;
            i = result.cycle;
            lines.push(result.line);
        }
        return lines.join('<br />');
    }
    /**
     * @param {?} content
     * @param {?} className
     * @return {?}
     */
    createNode(content, className) {
        /** @type {?} */
        let escapedContent = content.replace(/&/g, '&amp;');
        escapedContent = escapedContent.trim();
        escapedContent = escapedContent.replace(/\[\[/g, '&#123&#123;');
        escapedContent = escapedContent.replace(/\]\]/g, '&#125&#125;');
        escapedContent = escapedContent.replace(/</g, '&lt;');
        escapedContent = escapedContent.replace(/>/g, '&gt;');
        escapedContent = escapedContent.replace(/(\S+)="([^']*?)"/g, (/**
         * @param {?} match
         * @return {?}
         */
        match => {
            /** @type {?} */
            const value = match.match(/"([^']*?)"/g);
            /** @type {?} */
            const attribute = match.match(/(\S+)=/g);
            /** @type {?} */
            const attributeValidated = (attribute && attribute[0]) || '';
            /** @type {?} */
            const valueValidated = (value && value[0]) || '';
            /** @type {?} */
            const attributeTag = `<span class="${HTMLVisualizerComponent.ATTRIBUTE_CLASS}">${attributeValidated}</span>`;
            /** @type {?} */
            const valueTag = `<span class="${HTMLVisualizerComponent.VALUE_CLASS}">${valueValidated}</span>`;
            return attributeTag + valueTag;
        }));
        escapedContent = escapedContent.replace(/(&lt;\/|&lt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        match => `<span class="${HTMLVisualizerComponent.SYMBOL_CLASS}">&lt;${match.includes('/') ? '/' : ''}</span>`));
        escapedContent = escapedContent.replace(/(\/&gt;|&gt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        match => `<span class="${HTMLVisualizerComponent.SYMBOL_CLASS}">${match.includes('/') ? '/' : ''}&gt;</span>`));
        return `<span class="${className}">${escapedContent}</span>`;
    }
    /**
     * @param {?} depth
     * @param {?} content
     * @return {?}
     */
    indentNode(depth, content) {
        /** @type {?} */
        const indentationBase = '&emsp;&emsp;';
        /** @type {?} */
        const indentation = indentationBase.repeat(depth);
        return `${indentation}${content}`;
    }
    /**
     * @param {?} xml
     * @return {?}
     */
    splitByTags(xml) {
        /** @type {?} */
        const tags = xml.split(/(<\/?[^>]+>)/g);
        /** @type {?} */
        const cleanedTags = tags.filter((/**
         * @param {?} line
         * @return {?}
         */
        line => line.trim() !== ''));
        return cleanedTags;
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isTag(contentNode) {
        return (/<[^>!]+>/).test(contentNode);
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isOpeningTag(contentNode) {
        if (this.isTag(contentNode) && !this.isClosingTag(contentNode) && !this.isSelfClosingTag(contentNode)) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isClosingTag(contentNode) {
        return (/<\/+[^>]+>/).test(contentNode);
    }
    /**
     * @param {?} contentNode
     * @return {?}
     */
    isSelfClosingTag(contentNode) {
        return (/<[^>]+\/>/).test(contentNode);
    }
    /**
     * @param {?} firstTag
     * @param {?} middleTag
     * @param {?} lastTag
     * @param {?} depth
     * @param {?} cycle
     * @return {?}
     */
    createLineLogic(firstTag, middleTag, lastTag, depth, cycle) {
        if (this.isOpeningTag(firstTag) && this.isClosingTag(middleTag)) {
            /** @type {?} */
            const openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            const closeNode = this.createNode(middleTag, 'tag');
            return {
                cycle: cycle + 1,
                depth: depth,
                line: this.indentNode(depth, `${openNode}${closeNode}`)
            };
        }
        if (this.isOpeningTag(firstTag) && !this.isTag(middleTag)) {
            /** @type {?} */
            const openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            const contentNode = this.createNode(middleTag, 'string');
            /** @type {?} */
            const closeNode = this.createNode(lastTag, 'tag');
            return {
                cycle: cycle + 2,
                depth: depth,
                line: this.indentNode(depth, `${openNode}${contentNode}${closeNode}`)
            };
        }
        if (this.isSelfClosingTag(firstTag)) {
            /** @type {?} */
            const selfClosingNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth,
                line: this.indentNode(depth, selfClosingNode)
            };
        }
        if (this.isClosingTag(firstTag)) {
            /** @type {?} */
            const closeNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth - 1,
                line: this.indentNode(depth - 1, closeNode)
            };
        }
        return {
            cycle: cycle,
            depth: depth + 1,
            line: this.indentNode(depth, this.createNode(firstTag, 'text'))
        };
    }
}
HTMLVisualizerComponent.ATTRIBUTE_CLASS = `${config.components.prefix}-html-visualizer-attribute`;
HTMLVisualizerComponent.VALUE_CLASS = `${config.components.prefix}-html-visualizer-value`;
HTMLVisualizerComponent.SYMBOL_CLASS = `${config.components.prefix}-html-visualizer-symbol`;
HTMLVisualizerComponent.defaultProps = {
    className: '',
    html: ''
};
HTMLVisualizerComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-html-visualizer`,
                template: "<div [ngClass]=\"prefix + '-html-visualizer'\">\n  <div [ngClass]=\"prefix + '-html-visualizer-content'\" [innerHTML]=\"htmlContent\" ngNonBindable></div>\n</div>\n"
            }] }
];
/** @nocollapse */
HTMLVisualizerComponent.ctorParameters = () => [
    { type: DomSanitizer }
];
HTMLVisualizerComponent.propDecorators = {
    className: [{ type: Input }],
    html: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HTMLVisualizerComponent.ATTRIBUTE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.VALUE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.SYMBOL_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.defaultProps;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.className;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.html;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.htmlContent;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    HTMLVisualizerComponent.prototype.sanitizer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/html-visualizer/html-visualizer.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeHTMLVisualizerModule {
}
MaterializeHTMLVisualizerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [HTMLVisualizerComponent],
                exports: [HTMLVisualizerComponent],
                imports: [CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/html-visualizer/html-visualizer.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function HTMLVisualizerModel() { }
if (false) {
    /** @type {?} */
    HTMLVisualizerModel.prototype.className;
    /** @type {?} */
    HTMLVisualizerModel.prototype.html;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/label/label.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LabelComponent {
    constructor() {
        this.className = LabelComponent.defaultProps.className;
        this.prefix = config.components.prefix;
    }
}
LabelComponent.defaultProps = {
    className: ''
};
LabelComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-label }`,
                template: "<label [ngClass]=\"[prefix + '-label', className]\">\n  <ng-content></ng-content>\n</label>\n"
            }] }
];
LabelComponent.propDecorators = {
    className: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LabelComponent.defaultProps;
    /** @type {?} */
    LabelComponent.prototype.className;
    /** @type {?} */
    LabelComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/label/label.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeLabelModule {
}
MaterializeLabelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [LabelComponent],
                exports: [LabelComponent],
                imports: [CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/label/label.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function LabelModel() { }
if (false) {
    /** @type {?} */
    LabelModel.prototype.className;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/modal/modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalComponent {
    constructor() {
        this.className = ModalComponent.defaultProps.className;
        this.dismissOnBackdrop = ModalComponent.defaultProps.dismissOnBackdrop;
        this.hasBackdrop = ModalComponent.defaultProps.hasBackdrop;
        this.hasCloseButton = ModalComponent.defaultProps.hasCloseButton;
        this.isOpen = ModalComponent.defaultProps.isOpen;
        this.transitionDuration = ModalComponent.defaultProps.transitionDuration;
        this.prefix = config.components.prefix;
        this.onOpenEmitter = new EventEmitter();
        this.onCloseEmitter = new EventEmitter();
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
        this.closeByBackdrop = this.closeByBackdrop.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.hasBackdrop && this.dismissOnBackdrop) {
            this.backdropRef.nativeElement.addEventListener('click', this.closeByBackdrop);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeByBackdrop(event) {
        const { target } = event;
        const { nativeElement } = this.backdropRef;
        if (target === nativeElement) {
            this.close();
        }
    }
    /**
     * @return {?}
     */
    open() {
        this.modalRef.nativeElement.style.transitionDuration = `${this.transitionDuration}ms`;
        this.isOpen = true;
        this.onOpenEmitter.emit();
    }
    /**
     * @return {?}
     */
    close() {
        this.modalRef.nativeElement.style.transitionDuration = `${this.transitionDuration / 2}ms`;
        this.isOpen = false;
        this.onCloseEmitter.emit();
    }
}
ModalComponent.defaultProps = {
    className: '',
    dismissOnBackdrop: true,
    hasBackdrop: true,
    hasCloseButton: true,
    isOpen: false,
    transitionDuration: 400
};
ModalComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-modal }`,
                template: "<div [ngClass]=\"[prefix + '-modal', className]\" [class.active]=\"isOpen\" #modal>\n  <div [ngClass]=\"prefix + '-modal-backdrop'\" #backdrop *ngIf=\"hasBackdrop\"></div>\n  <div [ngClass]=\"prefix + '-modal-content'\">\n    <materialize-icon [className]=\"prefix + '-modal-icon-close'\" *ngIf=\"hasCloseButton\" (onClick)=\"close()\">close</materialize-icon>\n\n    <ng-content></ng-content>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
ModalComponent.ctorParameters = () => [];
ModalComponent.propDecorators = {
    modalRef: [{ type: ViewChild, args: ['modal', { static: true },] }],
    backdropRef: [{ type: ViewChild, args: ['backdrop', { static: false },] }],
    onOpenEmitter: [{ type: Output, args: ['onOpen',] }],
    onCloseEmitter: [{ type: Output, args: ['onClose',] }],
    className: [{ type: Input }],
    dismissOnBackdrop: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    hasCloseButton: [{ type: Input }],
    isOpen: [{ type: Input }],
    transitionDuration: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ModalComponent.defaultProps;
    /** @type {?} */
    ModalComponent.prototype.modalRef;
    /** @type {?} */
    ModalComponent.prototype.backdropRef;
    /** @type {?} */
    ModalComponent.prototype.onOpenEmitter;
    /** @type {?} */
    ModalComponent.prototype.onCloseEmitter;
    /** @type {?} */
    ModalComponent.prototype.className;
    /** @type {?} */
    ModalComponent.prototype.dismissOnBackdrop;
    /** @type {?} */
    ModalComponent.prototype.hasBackdrop;
    /** @type {?} */
    ModalComponent.prototype.hasCloseButton;
    /** @type {?} */
    ModalComponent.prototype.isOpen;
    /** @type {?} */
    ModalComponent.prototype.transitionDuration;
    /** @type {?} */
    ModalComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/modal/modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeModalModule {
}
MaterializeModalModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ModalComponent],
                exports: [ModalComponent],
                imports: [
                    CommonModule,
                    MaterializeIconModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/modal/modal.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function ModalModel() { }
if (false) {
    /** @type {?} */
    ModalModel.prototype.className;
    /** @type {?} */
    ModalModel.prototype.dismissOnBackdrop;
    /** @type {?} */
    ModalModel.prototype.hasBackdrop;
    /** @type {?} */
    ModalModel.prototype.hasCloseButton;
    /** @type {?} */
    ModalModel.prototype.isOpen;
    /** @type {?} */
    ModalModel.prototype.transitionDuration;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/navbar/navbar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NavbarComponent {
    constructor() {
        this.className = NavbarComponent.defaultProps.className;
        this.prefix = config.components.prefix;
    }
}
NavbarComponent.defaultProps = {
    className: ''
};
NavbarComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-navbar }`,
                template: "<div [ngClass]=\"[prefix + '-navbar', className]\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
NavbarComponent.propDecorators = {
    className: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NavbarComponent.defaultProps;
    /** @type {?} */
    NavbarComponent.prototype.className;
    /** @type {?} */
    NavbarComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/navbar/navbar.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeNavbarModule {
}
MaterializeNavbarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NavbarComponent],
                exports: [NavbarComponent],
                imports: [CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/navbar/navbar.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function NavbarModel() { }
if (false) {
    /** @type {?} */
    NavbarModel.prototype.className;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/radio-group/radio/radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioComponent {
    constructor() {
        this.className = RadioComponent.defaultProps.className;
        this.disabled = RadioComponent.defaultProps.disabled;
        this.id = RadioComponent.defaultProps.id;
        this.name = RadioComponent.defaultProps.name;
        this.required = RadioComponent.defaultProps.required;
        this.value = RadioComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isActive = false;
        this.isFocused = false;
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.isActive = !this.isActive;
            this.isFocused = false;
            this.onClickEmitter.emit(this.value);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
        }
    }
}
RadioComponent.defaultProps = {
    className: '',
    disabled: false,
    id: null,
    name: '',
    required: false,
    value: ''
};
RadioComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-radio }`,
                template: "<div\n  [ngClass]=\"[prefix + '-radio', className]\"\n  [class.active]=\"isActive\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n\n  (click)=\"onClick()\"\n  (blur)=\"onBlur()\"\n  (focus)=\"onFocus()\"\n>\n  <div [ngClass]=\"prefix + '-radio-label'\">\n    <ng-content></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-radio-indicator'\">\n    <div [ngClass]=\"prefix + '-radio-indicator-ripple'\" materializeRipple [isRippleActive]=\"!disabled\" [rippleDuration]=\"200\"></div>\n  </div>\n\n  <input type=\"radio\" [attr.id]=\"id\" [checked]=\"isActive\" [disabled]=\"disabled\" [name]=\"name\" [required]=\"required\" [value]= \"value\" />\n</div>\n"
            }] }
];
/** @nocollapse */
RadioComponent.ctorParameters = () => [];
RadioComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RadioComponent.defaultProps;
    /** @type {?} */
    RadioComponent.prototype.onClickEmitter;
    /** @type {?} */
    RadioComponent.prototype.className;
    /** @type {?} */
    RadioComponent.prototype.disabled;
    /** @type {?} */
    RadioComponent.prototype.id;
    /** @type {?} */
    RadioComponent.prototype.name;
    /** @type {?} */
    RadioComponent.prototype.required;
    /** @type {?} */
    RadioComponent.prototype.value;
    /** @type {?} */
    RadioComponent.prototype.prefix;
    /** @type {?} */
    RadioComponent.prototype.isActive;
    /** @type {?} */
    RadioComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/radio-group/radio-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioGroupComponent {
    constructor() {
        this.canUncheck = RadioGroupComponent.defaultProps.canUncheck;
        this.className = RadioGroupComponent.defaultProps.className;
        this.disabled = RadioGroupComponent.defaultProps.disabled;
        this.name = RadioGroupComponent.defaultProps.name;
        this.required = RadioGroupComponent.defaultProps.required;
        this.value = RadioGroupComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.initRadios = this.initRadios.bind(this);
        this.registerRadios = this.registerRadios.bind(this);
        this.toggleRadios = this.toggleRadios.bind(this);
        this.onChangeEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.initRadios();
        this.radiosQueryList.changes.subscribe(this.initRadios);
    }
    /**
     * @return {?}
     */
    initRadios() {
        this.disableAllRadios(this.disabled);
        setTimeout(this.registerRadios, 0);
    }
    /**
     * @return {?}
     */
    registerRadios() {
        this.radiosQueryList.forEach((/**
         * @param {?} radio
         * @return {?}
         */
        radio => {
            radio.isActive = (radio.value === this.value);
            radio.onClickEmitter.subscribe(this.toggleRadios);
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toggleRadios(value) {
        this.setValueAllRadios(value);
        /** @type {?} */
        const currentRadio = this.radiosQueryList.find((/**
         * @param {?} radio
         * @return {?}
         */
        radio => radio.value === value));
        this.value = currentRadio && currentRadio.isActive
            ? currentRadio.value
            : '';
        this.onTouched();
        this.onChange(this.value);
        this.onChangeEmitter.emit(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValueAllRadios(value) {
        this.radiosQueryList.forEach((/**
         * @param {?} radio
         * @return {?}
         */
        radio => {
            if (radio.value !== value) {
                radio.isActive = false;
            }
            if (radio.value === value && !this.canUncheck) {
                radio.isActive = true;
            }
        }));
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    disableAllRadios(disabled) {
        this.radiosQueryList.forEach((/**
         * @param {?} radio
         * @return {?}
         */
        radio => {
            radio.disabled = disabled;
        }));
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.disableAllRadios(this.disabled);
        }), 0);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setValueAllRadios(this.value);
        }), 0);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
    }
    /**
     * @return {?}
     */
    onTouched() { }
}
RadioGroupComponent.defaultProps = {
    canUncheck: false,
    className: '',
    disabled: false,
    name: '',
    required: false,
    value: ''
};
RadioGroupComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RadioGroupComponent))
                    }],
                selector: `${config.components.prefix}-radio-group }`,
                template: "<div [ngClass]=\"[prefix + '-radio-group', className]\">\n  <ng-content select=\"materialize-radio\"></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
RadioGroupComponent.ctorParameters = () => [];
RadioGroupComponent.propDecorators = {
    radiosQueryList: [{ type: ContentChildren, args: [RadioComponent,] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    canUncheck: [{ type: Input }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RadioGroupComponent.defaultProps;
    /** @type {?} */
    RadioGroupComponent.prototype.radiosQueryList;
    /** @type {?} */
    RadioGroupComponent.prototype.onChangeEmitter;
    /** @type {?} */
    RadioGroupComponent.prototype.canUncheck;
    /** @type {?} */
    RadioGroupComponent.prototype.className;
    /** @type {?} */
    RadioGroupComponent.prototype.disabled;
    /** @type {?} */
    RadioGroupComponent.prototype.name;
    /** @type {?} */
    RadioGroupComponent.prototype.required;
    /** @type {?} */
    RadioGroupComponent.prototype.value;
    /** @type {?} */
    RadioGroupComponent.prototype.prefix;
    /** @type {?} */
    RadioGroupComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/radio-group/radio-group.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeRadioGroupModule {
}
MaterializeRadioGroupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    RadioComponent,
                    RadioGroupComponent
                ],
                exports: [
                    RadioComponent,
                    RadioGroupComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/radio-group/radio-group.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function RadioGroupModel() { }
if (false) {
    /** @type {?} */
    RadioGroupModel.prototype.canUncheck;
    /** @type {?} */
    RadioGroupModel.prototype.className;
    /** @type {?} */
    RadioGroupModel.prototype.disabled;
    /** @type {?} */
    RadioGroupModel.prototype.name;
    /** @type {?} */
    RadioGroupModel.prototype.required;
    /** @type {?} */
    RadioGroupModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/radio-group/radio/radio.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function RadioModel() { }
if (false) {
    /** @type {?} */
    RadioModel.prototype.className;
    /** @type {?} */
    RadioModel.prototype.disabled;
    /** @type {?} */
    RadioModel.prototype.id;
    /** @type {?} */
    RadioModel.prototype.name;
    /** @type {?} */
    RadioModel.prototype.required;
    /** @type {?} */
    RadioModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/scroll-spy/scroll-spy.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function ScrollSpyModel() { }
if (false) {
    /** @type {?} */
    ScrollSpyModel.prototype.className;
    /** @type {?} */
    ScrollSpyModel.prototype.itemId;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/scroll-spy/scroll-spy-item/scroll-spy-item.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function ScrollSpyItemModel() { }
if (false) {
    /** @type {?} */
    ScrollSpyItemModel.prototype.className;
    /** @type {?} */
    ScrollSpyItemModel.prototype.id;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/select/select-option/select-option.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectOptionComponent {
    constructor() {
        this.className = SelectOptionComponent.defaultProps.className;
        this.disabled = SelectOptionComponent.defaultProps.disabled;
        this.value = SelectOptionComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.transitionDuration = SelectOptionComponent.defaultProps.transitionDuration;
        this.isActive = false;
        this.onClickEmitter = new EventEmitter();
        this.emitClick = this.emitClick.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.content = this.optionTemplateRef.nativeElement
            ? this.optionTemplateRef.nativeElement.textContent
            : '';
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            setTimeout(this.emitClick, this.transitionDuration);
        }
    }
    /**
     * @return {?}
     */
    emitClick() {
        this.onClickEmitter.emit(this.value);
    }
}
SelectOptionComponent.defaultProps = {
    className: '',
    disabled: false,
    transitionDuration: 250,
    value: ''
};
SelectOptionComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-select-option }`,
                template: "<div [ngClass]=\"[prefix + '-select-option', className]\" materializeRipple (click)=\"onClick()\" [class.active]=\"isActive\"  [class.disabled]=\"disabled\" [rippleDuration]=\"transitionDuration\">\n  <div #optionTemplate>\n    <span>\n      <ng-content></ng-content>\n    </span>\n  </div>\n</div>\n\n"
            }] }
];
/** @nocollapse */
SelectOptionComponent.ctorParameters = () => [];
SelectOptionComponent.propDecorators = {
    optionTemplateRef: [{ type: ViewChild, args: ['optionTemplate', { static: true },] }],
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SelectOptionComponent.defaultProps;
    /** @type {?} */
    SelectOptionComponent.prototype.optionTemplateRef;
    /** @type {?} */
    SelectOptionComponent.prototype.onClickEmitter;
    /** @type {?} */
    SelectOptionComponent.prototype.className;
    /** @type {?} */
    SelectOptionComponent.prototype.disabled;
    /** @type {?} */
    SelectOptionComponent.prototype.value;
    /** @type {?} */
    SelectOptionComponent.prototype.prefix;
    /** @type {?} */
    SelectOptionComponent.prototype.content;
    /** @type {?} */
    SelectOptionComponent.prototype.isActive;
    /** @type {?} */
    SelectOptionComponent.prototype.transitionDuration;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/select/select.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = SelectComponent.defaultProps.className;
        this.disabled = SelectComponent.defaultProps.disabled;
        this.floatLabel = SelectComponent.defaultProps.floatLabel;
        this.id = SelectComponent.defaultProps.id;
        this.isNativeControl = SelectComponent.defaultProps.isNativeControl;
        this.name = SelectComponent.defaultProps.name;
        this.required = SelectComponent.defaultProps.required;
        this.value = SelectComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.isOpen = false;
        this.onChangeEmitter = new EventEmitter();
        this.addBackdropListener = this.addBackdropListener.bind(this);
        this.onChangeOption = this.onChangeOption.bind(this);
        this.registerOptions = this.registerOptions.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout(this.registerOptions, 0);
        this.options.changes.subscribe((/**
         * @param {?} changes
         * @return {?}
         */
        changes => {
            setTimeout(this.registerOptions, 0);
        }));
    }
    /**
     * @return {?}
     */
    registerOptions() {
        this.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            option.isActive = (option.value === this.value);
            option.onClickEmitter.subscribe(this.onChangeOption);
        }));
        this.updateControl(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateControl(value) {
        this.value = value;
        this.isOpen = false;
        this.activeSelectedOption(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChangeOption(value) {
        this.updateControl(value);
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    activeSelectedOption(value) {
        this.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            if (option.value === value) {
                option.isActive = true;
                this.activeSelectClass(option);
                this.cloneOption(option);
            }
            else {
                option.isActive = false;
            }
        }));
    }
    /**
     * @param {?} selectedOption
     * @return {?}
     */
    cloneOption(selectedOption) {
        if (!this.labelContainerRef) {
            return;
        }
        const { nativeElement: labelContainer } = this.labelContainerRef;
        const { optionTemplateRef, disabled } = selectedOption;
        if (labelContainer.firstChild) {
            this.renderer.removeChild(labelContainer, labelContainer.firstChild);
        }
        if (optionTemplateRef) {
            const { firstChild } = optionTemplateRef.nativeElement;
            /** @type {?} */
            const cloned = firstChild.cloneNode(true);
            if (disabled) {
                this.renderer.addClass(cloned, 'option-disabled');
            }
            this.renderer.appendChild(labelContainer, cloned);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChangeNativeOption(event) {
        const { selectedOptions } = event.target;
        const { value } = selectedOptions[0];
        this.value = value;
        this.activeSelectClass(selectedOptions[0]);
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.isFocused = true;
            this.isOpen = true;
            if (!this.isNativeControl) {
                setTimeout(this.addBackdropListener, 0);
            }
        }
    }
    /**
     * @return {?}
     */
    addBackdropListener() {
        this.backdropRef.nativeElement.addEventListener('click', (/**
         * @return {?}
         */
        () => {
            this.isOpen = false;
        }));
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.updateControl(this.value);
        }), 0);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
    /**
     * @param {?} selectedOption
     * @return {?}
     */
    activeSelectClass(selectedOption) {
        if (this.selectElementRef && selectedOption.disabled) {
            this.renderer.addClass(this.selectElementRef.nativeElement, 'option-disabled');
        }
        else if (this.selectElementRef && !selectedOption.disabled) {
            this.renderer.removeClass(this.selectElementRef.nativeElement, 'option-disabled');
        }
    }
}
SelectComponent.defaultProps = {
    className: '',
    disabled: false,
    floatLabel: '',
    id: null,
    isNativeControl: false,
    name: '',
    required: false,
    value: null
};
SelectComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SelectComponent))
                    }],
                selector: `${config.components.prefix}-select }`,
                template: "<div [ngClass]=\"[className, prefix + '-form-control-select-container']\" *ngIf=\"isNativeControl\">\n  <div [ngClass]=\"prefix + '-form-control-container'\"\n    [class.float-label]=\"floatLabel\"\n    [class.active]=\"value\"\n    [class.focused]=\"isFocused\"\n    [class.disabled]=\"disabled\"\n  >\n    <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n      <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n      <select #selectElement (blur)=\"onBlur()\" (click)=\"onClick()\" (focus)=\"onFocus()\" (input)=\"onChangeNativeOption($event)\"\n        [ngClass]=\"prefix + '-form-control'\"\n        [attr.id]=\"id\"\n        [disabled]=\"disabled\"\n        [name]=\"name\"\n        [required]=\"required\"\n        [value]=\"value\"\n      >\n        <option\n          [selected]=\"option.value === value\"\n          [value]=\"option.value\"\n          [disabled]=\"option.disabled\"\n          *ngFor=\"let option of options\">\n          {{ option.content }}\n        </option>\n      </select>\n    </div>\n\n    <materialize-icon [className]=\"prefix + '-form-control-select-icon'\" size=\"lg\">arrow_drop_down</materialize-icon>\n  </div>\n</div>\n\n\n<div (focus)=\"onFocus()\" (blur)=\"onBlur()\" *ngIf=\"!isNativeControl\"\n  [ngClass]=\"[className, prefix + '-form-control-select-container']\"\n  [class.open]=\"isOpen\"\n  [tabindex]=\"disabled ? '-1' : '0'\"\n>\n  <div #backdrop *ngIf=\"isOpen\" [ngClass]=\"prefix + '-form-control-select-backdrop'\"></div>\n\n  <div (click)=\"onClick()\"\n    [ngClass]=\"[prefix + '-form-control-container' , className]\"\n    [class.float-label]=\"floatLabel\"\n    [class.active]=\"value\"\n    [class.focused]=\"isFocused\"\n    [class.disabled]=\"disabled\"\n  >\n    <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n      <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n      <div [ngClass]=\"prefix + '-form-control'\" #labelContainer>&nbsp;</div>\n    </div>\n\n    <materialize-icon [className]=\"prefix + '-form-control-select-icon'\" size=\"lg\">arrow_drop_down</materialize-icon>\n  </div>\n\n  <div [className]=\"prefix + '-form-control-select-menu'\">\n    <ng-content select=\"materialize-select-option\"></ng-content>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
SelectComponent.ctorParameters = () => [
    { type: Renderer2 }
];
SelectComponent.propDecorators = {
    backdropRef: [{ type: ViewChild, args: ['backdrop', { static: false },] }],
    labelContainerRef: [{ type: ViewChild, args: ['labelContainer', { static: false },] }],
    selectElementRef: [{ type: ViewChild, args: ['selectElement', { static: false },] }],
    options: [{ type: ContentChildren, args: [SelectOptionComponent,] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    floatLabel: [{ type: Input }],
    id: [{ type: Input }],
    isNativeControl: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SelectComponent.defaultProps;
    /** @type {?} */
    SelectComponent.prototype.backdropRef;
    /** @type {?} */
    SelectComponent.prototype.labelContainerRef;
    /** @type {?} */
    SelectComponent.prototype.selectElementRef;
    /** @type {?} */
    SelectComponent.prototype.options;
    /** @type {?} */
    SelectComponent.prototype.onChangeEmitter;
    /** @type {?} */
    SelectComponent.prototype.className;
    /** @type {?} */
    SelectComponent.prototype.disabled;
    /** @type {?} */
    SelectComponent.prototype.floatLabel;
    /** @type {?} */
    SelectComponent.prototype.id;
    /** @type {?} */
    SelectComponent.prototype.isNativeControl;
    /** @type {?} */
    SelectComponent.prototype.name;
    /** @type {?} */
    SelectComponent.prototype.required;
    /** @type {?} */
    SelectComponent.prototype.value;
    /** @type {?} */
    SelectComponent.prototype.prefix;
    /** @type {?} */
    SelectComponent.prototype.isFocused;
    /** @type {?} */
    SelectComponent.prototype.isOpen;
    /** @type {?} */
    SelectComponent.prototype.valueLabel;
    /**
     * @type {?}
     * @private
     */
    SelectComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/select/select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeSelectModule {
}
MaterializeSelectModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SelectComponent,
                    SelectOptionComponent
                ],
                exports: [
                    SelectComponent,
                    SelectOptionComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeCommonModule,
                    MaterializeIconModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/select/select.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function SelectModel() { }
if (false) {
    /** @type {?} */
    SelectModel.prototype.className;
    /** @type {?} */
    SelectModel.prototype.disabled;
    /** @type {?} */
    SelectModel.prototype.floatLabel;
    /** @type {?} */
    SelectModel.prototype.id;
    /** @type {?} */
    SelectModel.prototype.isNativeControl;
    /** @type {?} */
    SelectModel.prototype.name;
    /** @type {?} */
    SelectModel.prototype.required;
    /** @type {?} */
    SelectModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/select/select-option/select-option.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function SelectOptionModel() { }
if (false) {
    /** @type {?} */
    SelectOptionModel.prototype.className;
    /** @type {?} */
    SelectOptionModel.prototype.disabled;
    /** @type {?} */
    SelectOptionModel.prototype.transitionDuration;
    /** @type {?} */
    SelectOptionModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/utils/get-supported-events.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/** @type {?} */
const MOUSE_EVENTS = {
    down: 'mousedown',
    move: 'mousemove',
    resize: 'resize',
    up: 'mouseup'
};
/** @type {?} */
const TOUCH_EVENTS = {
    down: 'touchstart',
    move: 'touchmove',
    resize: 'resize',
    up: 'touchend'
};
/**
 * @return {?}
 */
function supportTouchEvents() {
    return 'ontouchstart' in window;
}
/** @type {?} */
const supportedEvents = (/**
 * @return {?}
 */
() => {
    /** @type {?} */
    const events = supportTouchEvents()
        ? TOUCH_EVENTS
        : MOUSE_EVENTS;
    return events;
});

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider-option/slider-option.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SliderOptionComponent {
    constructor() {
        this.className = SliderOptionComponent.defaultProps.className;
        this.value = SliderOptionComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isActive = false;
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.onClickEmitter.emit(this.value);
    }
}
SliderOptionComponent.defaultProps = {
    className: '',
    value: null
};
SliderOptionComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-slider-option }`,
                template: "<div [ngClass]=\"[prefix + '-slider-option-container', className]\"\n  [class.active]=\"isActive\"\n\n  (click)=\"onClick()\"\n  #template>\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
SliderOptionComponent.ctorParameters = () => [];
SliderOptionComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['template', { static: true },] }],
    className: [{ type: Input }],
    value: [{ type: Input }],
    onClickEmitter: [{ type: Output, args: ['onClick',] }]
};
if (false) {
    /** @type {?} */
    SliderOptionComponent.defaultProps;
    /** @type {?} */
    SliderOptionComponent.prototype.templateRef;
    /** @type {?} */
    SliderOptionComponent.prototype.className;
    /** @type {?} */
    SliderOptionComponent.prototype.value;
    /** @type {?} */
    SliderOptionComponent.prototype.onClickEmitter;
    /** @type {?} */
    SliderOptionComponent.prototype.prefix;
    /** @type {?} */
    SliderOptionComponent.prototype.isActive;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SliderComponent {
    /**
     * @param {?} renderer
     */
    constructor(renderer) {
        this.renderer = renderer;
        this.className = SliderComponent.defaultProps.className;
        this.disabled = SliderComponent.defaultProps.disabled;
        this.required = SliderComponent.defaultProps.required;
        this.showLabels = SliderComponent.defaultProps.showLabels;
        this.showTicks = SliderComponent.defaultProps.showTicks;
        this.value = SliderComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.supportedEvents = supportedEvents();
        this.onChangeEmitter = new EventEmitter();
        this.actionDown = this.actionDown.bind(this);
        this.actionMove = this.actionMove.bind(this);
        this.actionUp = this.actionUp.bind(this);
        this.onOptionClick = this.onOptionClick.bind(this);
        this.update = this.update.bind(this);
        window.addEventListener(this.supportedEvents.resize, this.update);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.sliderTrack.nativeElement.addEventListener(this.supportedEvents.down, this.actionDown);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.update();
        this.options.changes.subscribe(this.update);
    }
    /**
     * @return {?}
     */
    update() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.registerEventOptions();
            this.renderPositions();
            this.moveToValue(this.value, false);
        }), 0);
    }
    /**
     * @return {?}
     */
    registerEventOptions() {
        this.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        option => {
            option.onClickEmitter.subscribe(this.onOptionClick);
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onOptionClick(value) {
        this.value = value;
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
        this.moveToValue(this.value, true);
    }
    /**
     * @return {?}
     */
    renderPositions() {
        /** @type {?} */
        const pixelInterval = this.getPixelInterval();
        this.removeTicks();
        this.options.forEach((/**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
        (option, index) => {
            /** @type {?} */
            const leftSpace = pixelInterval * index;
            const { nativeElement } = option.templateRef;
            this.renderer.setStyle(nativeElement, 'left', `${leftSpace}px`);
            if (this.showTicks) {
                /** @type {?} */
                const tick = this.renderer.createElement('div');
                this.renderer.setStyle(tick, 'left', `${leftSpace}px`);
                this.renderer.addClass(tick, SliderComponent.tickClassName);
                this.renderer.appendChild(this.sliderTrackInterval.nativeElement, tick);
            }
        }));
    }
    /**
     * @return {?}
     */
    removeTicks() {
        const { nativeElement } = this.sliderTrackInterval;
        while (nativeElement.firstChild) {
            this.renderer.removeChild(nativeElement, nativeElement.firstChild);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    actionDown(event) {
        if (!this.disabled) {
            /** @type {?} */
            const x = this.getXCoordinate(event, this.supportedEvents.down);
            this.animate(x, true);
            window.addEventListener(this.supportedEvents.up, this.actionUp);
            window.addEventListener(this.supportedEvents.move, this.actionMove);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    actionMove(event) {
        /** @type {?} */
        const x = this.getXCoordinate(event, this.supportedEvents.move);
        this.value = this.getValueFromXCoordinate(x);
        this.animate(x, false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    actionUp(event) {
        window.removeEventListener(this.supportedEvents.up, this.actionUp);
        window.removeEventListener(this.supportedEvents.move, this.actionMove);
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', null);
        /** @type {?} */
        const x = this.getXCoordinate(event, this.supportedEvents.up);
        this.value = this.getValueFromXCoordinate(x);
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
        this.moveToValue(this.value, true);
    }
    /**
     * @param {?} value
     * @param {?} hasAnimation
     * @return {?}
     */
    moveToValue(value, hasAnimation) {
        /** @type {?} */
        const options = this.options.toArray();
        /** @type {?} */
        const index = options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        option => option.value === value));
        /** @type {?} */
        const validatedIndex = index >= 0
            ? index
            : 0;
        /** @type {?} */
        const pixelInterval = this.getPixelInterval();
        /** @type {?} */
        const nextXCoordinate = validatedIndex * pixelInterval;
        this.animate(nextXCoordinate, hasAnimation);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    activeOption(value) {
        this.options.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.isActive = (item.value === value);
        }));
    }
    /**
     * @param {?} x
     * @return {?}
     */
    getValueFromXCoordinate(x) {
        /** @type {?} */
        const index = this.getIndexFromXCoordinate(x);
        /** @type {?} */
        const options = this.options.toArray();
        /** @type {?} */
        const value = options[index].value;
        return value;
    }
    /**
     * @param {?} x
     * @return {?}
     */
    getIndexFromXCoordinate(x) {
        /** @type {?} */
        const pixelInterval = this.getPixelInterval();
        if (pixelInterval) {
            /** @type {?} */
            const index = Math.round(x / pixelInterval);
            if (index >= 0 && index <= this.options.length) {
                return index;
            }
        }
        return 0;
    }
    /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    getXCoordinateByEventType(event, eventType) {
        if (supportTouchEvents()) {
            if (eventType === this.supportedEvents.up) {
                return event.changedTouches[0].clientX;
            }
            return event.touches[0].clientX;
        }
        return event.clientX;
    }
    /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    getXCoordinate(event, eventType) {
        /** @type {?} */
        const rect = this.sliderTrack.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const xCoordinateEvent = this.getXCoordinateByEventType(event, eventType);
        /** @type {?} */
        const x = xCoordinateEvent - rect.left;
        if (x < 0) {
            return 0;
        }
        if (x > this.sliderTrack.nativeElement.offsetWidth) {
            return this.sliderTrack.nativeElement.offsetWidth;
        }
        return x;
    }
    /**
     * @return {?}
     */
    getPixelInterval() {
        /** @type {?} */
        const maxOptionsSize = this.options.length - 1;
        if (maxOptionsSize > 0) {
            return this.sliderTrack.nativeElement.offsetWidth / maxOptionsSize;
        }
        return 0;
    }
    /**
     * @param {?} x
     * @param {?} hasAnimation
     * @return {?}
     */
    animate(x, hasAnimation) {
        this.activeOption(this.value);
        /** @type {?} */
        const transitionDuration = hasAnimation
            ? null
            : '0ms';
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', transitionDuration);
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'left', `${x}px`);
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.value = value;
            this.moveToValue(value, false);
        }), 0);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
SliderComponent.tickClassName = config.components.prefix + '-slider-step';
SliderComponent.defaultProps = {
    className: '',
    disabled: false,
    required: false,
    showLabels: true,
    showTicks: false,
    value: null
};
SliderComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SliderComponent))
                    }],
                selector: `${config.components.prefix}-slider }`,
                template: "<div [ngClass]=\"[prefix + '-slider', className]\" [class.focused]=\"isFocused\" [class.disabled]=\"disabled\">\n\n  <div [ngClass]=\"prefix + '-slider-track-container'\" #sliderTrack [tabindex]=\"disabled ? '-1' : '0'\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n    <div #sliderTrackInterval></div>\n\n    <div [ngClass]=\"prefix + '-slider-track'\" #sliderTrackBackground></div>\n\n    <div [ngClass]=\"prefix + '-slider-indicator-container'\" #sliderIndicatorContainer>\n      <ng-content select=\"materialize-slider-indicator\"></ng-content>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-slider-labels-container'\" *ngIf=\"showLabels\">\n    <ng-content select=\"materialize-slider-option\"></ng-content>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
SliderComponent.ctorParameters = () => [
    { type: Renderer2 }
];
SliderComponent.propDecorators = {
    options: [{ type: ContentChildren, args: [SliderOptionComponent,] }],
    sliderIndicatorContainer: [{ type: ViewChild, args: ['sliderIndicatorContainer', { static: true },] }],
    sliderTrack: [{ type: ViewChild, args: ['sliderTrack', { static: true },] }],
    sliderTrackBackground: [{ type: ViewChild, args: ['sliderTrackBackground', { static: true },] }],
    sliderTrackInterval: [{ type: ViewChild, args: ['sliderTrackInterval', { static: true },] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    required: [{ type: Input }],
    showLabels: [{ type: Input }],
    showTicks: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SliderComponent.tickClassName;
    /** @type {?} */
    SliderComponent.defaultProps;
    /** @type {?} */
    SliderComponent.prototype.options;
    /** @type {?} */
    SliderComponent.prototype.sliderIndicatorContainer;
    /** @type {?} */
    SliderComponent.prototype.sliderTrack;
    /** @type {?} */
    SliderComponent.prototype.sliderTrackBackground;
    /** @type {?} */
    SliderComponent.prototype.sliderTrackInterval;
    /** @type {?} */
    SliderComponent.prototype.onChangeEmitter;
    /** @type {?} */
    SliderComponent.prototype.className;
    /** @type {?} */
    SliderComponent.prototype.disabled;
    /** @type {?} */
    SliderComponent.prototype.required;
    /** @type {?} */
    SliderComponent.prototype.showLabels;
    /** @type {?} */
    SliderComponent.prototype.showTicks;
    /** @type {?} */
    SliderComponent.prototype.value;
    /** @type {?} */
    SliderComponent.prototype.prefix;
    /** @type {?} */
    SliderComponent.prototype.isFocused;
    /** @type {?} */
    SliderComponent.prototype.supportedEvents;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider-indicator/slider-indicator.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SliderIndicatorComponent {
}
SliderIndicatorComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-slider-indicator }`,
                template: "<ng-content></ng-content>\n"
            }] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeSliderModule {
}
MaterializeSliderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SliderComponent,
                    SliderIndicatorComponent,
                    SliderOptionComponent
                ],
                exports: [
                    SliderComponent,
                    SliderIndicatorComponent,
                    SliderOptionComponent
                ],
                imports: [
                    CommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function SliderModel() { }
if (false) {
    /** @type {?} */
    SliderModel.prototype.className;
    /** @type {?} */
    SliderModel.prototype.disabled;
    /** @type {?} */
    SliderModel.prototype.required;
    /** @type {?} */
    SliderModel.prototype.showLabels;
    /** @type {?} */
    SliderModel.prototype.showTicks;
    /** @type {?} */
    SliderModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider-option/slider-option.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function SliderOptionModel() { }
if (false) {
    /** @type {?} */
    SliderOptionModel.prototype.className;
    /** @type {?} */
    SliderOptionModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/step/step.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StepComponent {
    constructor() {
        this.prefix = config.components.prefix;
        this.isCompleted = false;
    }
}
StepComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-step }`,
                template: "<ng-template #indicatorTemplate>\n  <div [ngClass]=\"prefix + '-step-indicator'\">\n    <materialize-icon [className]=\"prefix + '-step-indicator-icon'\" *ngIf=\"isCompleted\">done</materialize-icon>\n    <ng-content select=\"materialize-step-indicator\" *ngIf=\"!isCompleted\"></ng-content>\n  </div>\n</ng-template>\n<ng-template #labelTemplate>\n  <ng-content select=\"materialize-step-label\"></ng-content>\n</ng-template>\n"
            }] }
];
/** @nocollapse */
StepComponent.ctorParameters = () => [];
StepComponent.propDecorators = {
    labelTemplate: [{ type: ViewChild, args: ['labelTemplate', { static: false },] }],
    indicatorTemplate: [{ type: ViewChild, args: ['indicatorTemplate', { static: false },] }]
};
if (false) {
    /** @type {?} */
    StepComponent.prototype.labelTemplate;
    /** @type {?} */
    StepComponent.prototype.indicatorTemplate;
    /** @type {?} */
    StepComponent.prototype.prefix;
    /** @type {?} */
    StepComponent.prototype.isCompleted;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/step/step-indicator/step-indicator.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StepIndicatorComponent {
    constructor() {
        this.prefix = config.components.prefix;
    }
}
StepIndicatorComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-step-indicator`,
                template: "<ng-content></ng-content>\n"
            }] }
];
if (false) {
    /** @type {?} */
    StepIndicatorComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/step/step-label/step-label.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StepLabelComponent {
    constructor() {
        this.prefix = config.components.prefix;
    }
}
StepLabelComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-step-label`,
                template: "<div [className]=\"prefix + '-step-label'\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
if (false) {
    /** @type {?} */
    StepLabelComponent.prototype.prefix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/stepper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StepperComponent {
    constructor() {
        this.className = StepperComponent.defaultProps.className;
        this.activeIndex = StepperComponent.defaultProps.activeIndex;
        this.showTicks = StepperComponent.defaultProps.showTicks;
        this.prefix = config.components.prefix;
        this.isContentReady = true;
        this.validateContent = this.validateContent.bind(this);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.validateContent();
        this.steps.changes.subscribe(this.validateContent);
    }
    /**
     * @return {?}
     */
    validateContent() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isContentReady = false;
            this.validateSteps();
        }), 0);
    }
    /**
     * @return {?}
     */
    validateSteps() {
        this.steps.forEach((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        (step, index) => {
            step.isCompleted = (index < this.activeIndex && this.showTicks);
        }));
    }
}
StepperComponent.defaultProps = {
    activeIndex: 0,
    className: '',
    showTicks: true
};
StepperComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-stepper }`,
                template: "<div [ngClass]=\"[prefix + '-stepper', className]\">\n  <ng-container *ngFor=\"let step of steps; index as i\">\n    <div [ngClass]=\"prefix + '-step-divider'\" *ngIf=\"i > 0\" [class.completed]=\"i <= activeIndex\"></div>\n\n    <div\n      [ngClass]=\"prefix + '-step'\"\n      [class.active]=\"i === activeIndex\"\n      [class.completed]=\"i < activeIndex\"\n      *ngIf=\"!isContentReady\"\n    >\n      <ng-template [ngTemplateOutlet]=\"step.indicatorTemplate\"></ng-template>\n      <ng-template [ngTemplateOutlet]=\"step.labelTemplate\"></ng-template>\n    </div>\n  </ng-container>\n</div>\n"
            }] }
];
/** @nocollapse */
StepperComponent.ctorParameters = () => [];
StepperComponent.propDecorators = {
    className: [{ type: Input }],
    activeIndex: [{ type: Input }],
    showTicks: [{ type: Input }],
    steps: [{ type: ContentChildren, args: [StepComponent,] }]
};
if (false) {
    /** @type {?} */
    StepperComponent.defaultProps;
    /** @type {?} */
    StepperComponent.prototype.className;
    /** @type {?} */
    StepperComponent.prototype.activeIndex;
    /** @type {?} */
    StepperComponent.prototype.showTicks;
    /** @type {?} */
    StepperComponent.prototype.steps;
    /** @type {?} */
    StepperComponent.prototype.prefix;
    /** @type {?} */
    StepperComponent.prototype.isContentReady;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/stepper.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeStepperModule {
}
MaterializeStepperModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    StepComponent,
                    StepIndicatorComponent,
                    StepLabelComponent,
                    StepperComponent
                ],
                exports: [
                    StepComponent,
                    StepIndicatorComponent,
                    StepLabelComponent,
                    StepperComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeIconModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/stepper.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function StepperModel() { }
if (false) {
    /** @type {?} */
    StepperModel.prototype.activeIndex;
    /** @type {?} */
    StepperModel.prototype.className;
    /** @type {?} */
    StepperModel.prototype.showTicks;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/switch/switch.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SwitchComponent {
    constructor() {
        this.className = SwitchComponent.defaultProps.className;
        this.disabled = SwitchComponent.defaultProps.disabled;
        this.id = SwitchComponent.defaultProps.id;
        this.name = SwitchComponent.defaultProps.name;
        this.required = SwitchComponent.defaultProps.required;
        this.value = SwitchComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onChangeEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    toggleValue() {
        if (!this.disabled) {
            this.isFocused = false;
            this.value = !this.value;
            this.onChange(this.value);
            this.onChangeEmitter.emit(this.value);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
SwitchComponent.defaultProps = {
    className: '',
    disabled: false,
    id: null,
    name: '',
    required: false,
    value: false
};
SwitchComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SwitchComponent))
                    }],
                selector: `${config.components.prefix}-switch }`,
                template: "<div [ngClass]=\"[prefix + '-switch', className]\"\n\n  (click)=\"toggleValue()\"\n  (focus)=\"onFocus()\"\n  (blur)=\"onBlur()\"\n\n  [class.active]=\"value\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n>\n  <div [ngClass]=\"prefix + '-switch-label'\">\n    <ng-content></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-switch-track'\">\n    <div [ngClass]=\"prefix + '-switch-indicator'\">\n      <div [ngClass]=\"prefix + '-switch-indicator-ripple'\" materializeRipple [isRippleActive]=\"!disabled\" [rippleDuration]=\"200\"></div>\n    </div>\n  </div>\n\n  <input type=\"checkbox\" [disabled]=\"disabled\" [attr.id]=\"id\" [name]=\"name\" [required]=\"required\" [value]=\"value\" />\n</div>\n"
            }] }
];
/** @nocollapse */
SwitchComponent.ctorParameters = () => [];
SwitchComponent.propDecorators = {
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }]
};
if (false) {
    /** @type {?} */
    SwitchComponent.defaultProps;
    /** @type {?} */
    SwitchComponent.prototype.className;
    /** @type {?} */
    SwitchComponent.prototype.disabled;
    /** @type {?} */
    SwitchComponent.prototype.id;
    /** @type {?} */
    SwitchComponent.prototype.name;
    /** @type {?} */
    SwitchComponent.prototype.required;
    /** @type {?} */
    SwitchComponent.prototype.value;
    /** @type {?} */
    SwitchComponent.prototype.onChangeEmitter;
    /** @type {?} */
    SwitchComponent.prototype.prefix;
    /** @type {?} */
    SwitchComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/switch/switch.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeSwitchModule {
}
MaterializeSwitchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SwitchComponent],
                exports: [SwitchComponent],
                imports: [
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/switch/switch.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function SwitchModel() { }
if (false) {
    /** @type {?} */
    SwitchModel.prototype.className;
    /** @type {?} */
    SwitchModel.prototype.disabled;
    /** @type {?} */
    SwitchModel.prototype.id;
    /** @type {?} */
    SwitchModel.prototype.name;
    /** @type {?} */
    SwitchModel.prototype.required;
    /** @type {?} */
    SwitchModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/tab-group/tab/tab.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TabComponent {
    constructor() {
        this.className = TabComponent.defaultProps.className;
        this.disabled = TabComponent.defaultProps.disabled;
        this.link = TabComponent.defaultProps.link;
        this.title = TabComponent.defaultProps.title;
        this.isActive = false;
    }
}
TabComponent.defaultProps = {
    className: '',
    disabled: false,
    link: '',
    title: ''
};
TabComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-tab }`,
                template: "<div [hidden]=\"!isActive\" [ngClass]=\"className\">\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
TabComponent.ctorParameters = () => [];
TabComponent.propDecorators = {
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    link: [{ type: Input }],
    title: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TabComponent.defaultProps;
    /** @type {?} */
    TabComponent.prototype.className;
    /** @type {?} */
    TabComponent.prototype.disabled;
    /** @type {?} */
    TabComponent.prototype.link;
    /** @type {?} */
    TabComponent.prototype.title;
    /** @type {?} */
    TabComponent.prototype.isActive;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/tab-group/tab-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TabGroupComponent {
    /**
     * @param {?} router
     * @param {?} renderer
     */
    constructor(router, renderer) {
        this.router = router;
        this.renderer = renderer;
        this.className = TabGroupComponent.defaultProps.className;
        this.selectedIndex = TabGroupComponent.defaultProps.selectedIndex;
        this.transitionDuration = TabGroupComponent.defaultProps.transitionDuration;
        this.prefix = config.components.prefix;
        this.onTabSelectEmitter = new EventEmitter();
        this.supportedEvents = supportedEvents();
        this.update = this.update.bind(this);
        window.addEventListener(this.supportedEvents.resize, this.update);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(this.update, 250);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.selectedIndex && !changes.selectedIndex.isFirstChange()) {
            this.moveIndicator(changes.selectedIndex.currentValue, true);
        }
    }
    /**
     * @return {?}
     */
    update() {
        this.moveIndicator(this.selectedIndex, false);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    selectTab(index) {
        /** @type {?} */
        const tabs = this.tabs.toArray();
        /** @type {?} */
        const selectedTab = tabs[index];
        if (!selectedTab.disabled) {
            this.selectedIndex = index;
            this.onTabSelectEmitter.emit(index);
            this.moveIndicator(this.selectedIndex, true);
            if (selectedTab.link) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.router.navigate([selectedTab.link]);
                }), this.transitionDuration);
            }
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    activateIndex(index) {
        this.tabs.forEach((/**
         * @param {?} tab
         * @param {?} i
         * @return {?}
         */
        (tab, i) => {
            tab.isActive = i === index;
        }));
    }
    /**
     * @param {?} index
     * @param {?} hasAnimation
     * @return {?}
     */
    moveIndicator(index, hasAnimation) {
        this.activateIndex(index);
        /** @type {?} */
        const child = this.headerRef.nativeElement.children[index];
        /** @type {?} */
        const transitionDuration = hasAnimation
            ? `${this.transitionDuration}ms`
            : null;
        this.renderer.setStyle(this.indicatorRef.nativeElement, 'transitionDuration', transitionDuration);
        this.renderer.setStyle(this.indicatorRef.nativeElement, 'width', `${child.offsetWidth}px`);
        this.renderer.setStyle(this.indicatorRef.nativeElement, 'transform', `translateX(${child.offsetLeft}px)`);
    }
}
TabGroupComponent.defaultProps = {
    className: '',
    selectedIndex: 0,
    transitionDuration: 450
};
TabGroupComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-tab-group }`,
                template: "<div [ngClass]=\"className\">\n  <ul [ngClass]=\"prefix + '-tab-group'\" #header>\n\n    <li (click)=\"selectTab(i)\"\n      *ngFor=\"let tab of tabs; let i = index\"\n\n      [ngClass]=\"prefix + '-tab-group-item'\"\n      [class.active]=\"i === selectedIndex\"\n      [class.disabled]=\"tab.disabled\"\n      [isRippleActive]=\"!tab.disabled\"\n\n      materializeRipple\n    >\n      {{ tab.title }}\n    </li>\n\n    <div [ngClass]=\"prefix + '-tab-group-indicator-container'\" #indicator>\n      <div [ngClass]=\"prefix + '-tab-group-indicator'\"></div>\n    </div>\n  </ul>\n  \n  <div>\n    <ng-content select=\"materialize-tab\"></ng-content>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
TabGroupComponent.ctorParameters = () => [
    { type: Router },
    { type: Renderer2 }
];
TabGroupComponent.propDecorators = {
    tabs: [{ type: ContentChildren, args: [TabComponent,] }],
    indicatorRef: [{ type: ViewChild, args: ['indicator', { static: true },] }],
    headerRef: [{ type: ViewChild, args: ['header', { static: true },] }],
    onTabSelectEmitter: [{ type: Output, args: ['onSelectTab',] }],
    className: [{ type: Input }],
    selectedIndex: [{ type: Input }],
    transitionDuration: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TabGroupComponent.defaultProps;
    /** @type {?} */
    TabGroupComponent.prototype.tabs;
    /** @type {?} */
    TabGroupComponent.prototype.indicatorRef;
    /** @type {?} */
    TabGroupComponent.prototype.headerRef;
    /** @type {?} */
    TabGroupComponent.prototype.onTabSelectEmitter;
    /** @type {?} */
    TabGroupComponent.prototype.className;
    /** @type {?} */
    TabGroupComponent.prototype.selectedIndex;
    /** @type {?} */
    TabGroupComponent.prototype.transitionDuration;
    /** @type {?} */
    TabGroupComponent.prototype.prefix;
    /** @type {?} */
    TabGroupComponent.prototype.supportedEvents;
    /**
     * @type {?}
     * @private
     */
    TabGroupComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    TabGroupComponent.prototype.renderer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/tab-group/tab-group.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeTabGroupModule {
}
MaterializeTabGroupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    TabComponent,
                    TabGroupComponent
                ],
                exports: [
                    TabComponent,
                    TabGroupComponent
                ],
                imports: [
                    CommonModule,
                    MaterializeCommonModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/tab-group/tab-group.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function TabGroupModel() { }
if (false) {
    /** @type {?} */
    TabGroupModel.prototype.className;
    /** @type {?} */
    TabGroupModel.prototype.selectedIndex;
    /** @type {?} */
    TabGroupModel.prototype.transitionDuration;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/tab-group/tab/tab.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function TabModel() { }
if (false) {
    /** @type {?} */
    TabModel.prototype.className;
    /** @type {?} */
    TabModel.prototype.disabled;
    /** @type {?} */
    TabModel.prototype.link;
    /** @type {?} */
    TabModel.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/textarea/textarea.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextAreaComponent {
    constructor() {
        this.className = TextAreaComponent.defaultProps.className;
        this.disabled = TextAreaComponent.defaultProps.disabled;
        this.floatLabel = TextAreaComponent.defaultProps.floatLabel;
        this.hasCounter = TextAreaComponent.defaultProps.hasCounter;
        this.id = TextAreaComponent.defaultProps.id;
        this.maxLength = TextAreaComponent.defaultProps.maxLength;
        this.minLength = TextAreaComponent.defaultProps.minLength;
        this.name = TextAreaComponent.defaultProps.name;
        this.placeholder = TextAreaComponent.defaultProps.placeholder;
        this.required = TextAreaComponent.defaultProps.required;
        this.rows = TextAreaComponent.defaultProps.rows;
        this.value = TextAreaComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onBlurEmitter = new EventEmitter();
        this.onChangeEmitter = new EventEmitter();
        this.onFocusEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onBlurEmitter.emit();
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
            this.onFocusEmitter.emit();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onChange(event) {
        const { value } = event.target;
        this.value = value;
        this.onChangeEmitter.emit(event);
        this.onTextAreaChange(value);
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onTextAreaChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onTextAreaChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
TextAreaComponent.defaultProps = {
    className: '',
    disabled: false,
    floatLabel: '',
    hasCounter: false,
    id: null,
    maxLength: 500,
    minLength: 0,
    name: '',
    placeholder: '',
    required: false,
    rows: 1,
    value: ''
};
TextAreaComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => TextAreaComponent))
                    }],
                selector: `${config.components.prefix}-textarea }`,
                template: "<div (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n  [ngClass]=\"[prefix + '-form-control-container', className]\"\n  [class.float-label]=\"floatLabel\"\n  [class.active]=\"value || placeholder\"\n  [class.focused]=\"isFocused\"\n  [class.disabled]=\"disabled\"\n>\n  <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n    <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n    <textarea (input)=\"onChange($event)\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n      [ngClass]=\"prefix + '-form-control'\"\n      [disabled]=\"disabled\"\n      [attr.id]=\"id\"\n      [maxLength]=\"maxLength\"\n      [minLength]=\"minLength\"\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [rows]=\"rows\"\n      [value]=\"value\">\n    </textarea>\n  </div>\n</div>\n\n<materialize-form-message type=\"info\" *ngIf=\"hasCounter\">{{ value.length }} / {{ maxLength }}</materialize-form-message>\n"
            }] }
];
/** @nocollapse */
TextAreaComponent.ctorParameters = () => [];
TextAreaComponent.propDecorators = {
    onFocusEmitter: [{ type: Output, args: ['onFocus',] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    floatLabel: [{ type: Input }],
    hasCounter: [{ type: Input }],
    id: [{ type: Input }],
    maxLength: [{ type: Input }],
    minLength: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    rows: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TextAreaComponent.defaultProps;
    /** @type {?} */
    TextAreaComponent.prototype.onFocusEmitter;
    /** @type {?} */
    TextAreaComponent.prototype.onChangeEmitter;
    /** @type {?} */
    TextAreaComponent.prototype.onBlurEmitter;
    /** @type {?} */
    TextAreaComponent.prototype.className;
    /** @type {?} */
    TextAreaComponent.prototype.disabled;
    /** @type {?} */
    TextAreaComponent.prototype.floatLabel;
    /** @type {?} */
    TextAreaComponent.prototype.hasCounter;
    /** @type {?} */
    TextAreaComponent.prototype.id;
    /** @type {?} */
    TextAreaComponent.prototype.maxLength;
    /** @type {?} */
    TextAreaComponent.prototype.minLength;
    /** @type {?} */
    TextAreaComponent.prototype.name;
    /** @type {?} */
    TextAreaComponent.prototype.placeholder;
    /** @type {?} */
    TextAreaComponent.prototype.required;
    /** @type {?} */
    TextAreaComponent.prototype.rows;
    /** @type {?} */
    TextAreaComponent.prototype.value;
    /** @type {?} */
    TextAreaComponent.prototype.prefix;
    /** @type {?} */
    TextAreaComponent.prototype.isFocused;
}

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/textarea/textarea.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MaterializeTextAreaModule {
}
MaterializeTextAreaModule.decorators = [
    { type: NgModule, args: [{
                declarations: [TextAreaComponent],
                exports: [TextAreaComponent],
                imports: [
                    CommonModule,
                    MaterializeCommonModule,
                    MaterializeFormMessageModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/textarea/textarea.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
/**
 * @record
 */
function TextAreaModel() { }
if (false) {
    /** @type {?} */
    TextAreaModel.prototype.className;
    /** @type {?} */
    TextAreaModel.prototype.disabled;
    /** @type {?} */
    TextAreaModel.prototype.floatLabel;
    /** @type {?} */
    TextAreaModel.prototype.hasCounter;
    /** @type {?} */
    TextAreaModel.prototype.id;
    /** @type {?} */
    TextAreaModel.prototype.maxLength;
    /** @type {?} */
    TextAreaModel.prototype.minLength;
    /** @type {?} */
    TextAreaModel.prototype.name;
    /** @type {?} */
    TextAreaModel.prototype.placeholder;
    /** @type {?} */
    TextAreaModel.prototype.required;
    /** @type {?} */
    TextAreaModel.prototype.rows;
    /** @type {?} */
    TextAreaModel.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: materialize-angular.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AccordionComponent, BUTTON_LEVELS, BUTTON_TYPES, ButtonComponent, ButtonToggleComponent, ButtonToggleGroupComponent, CalendarComponent, CardComponent, CheckboxComponent, CollapsibleComponent, CollapsibleContentComponent, CollapsibleTitleComponent, DRAWER_POSITIONS, DRAWER_TYPES, DatePickerComponent, DrawerComponent, DrawerContainerComponent, DrawerContentComponent, DrawerModel, FORM_MESSAGE_LEVELS, FormMessageComponent, GlossaryComponent, GlossaryItemComponent, HTMLVisualizerComponent, ICON_SIZES, INPUT_TYPE, IconComponent, InputComponent, LabelComponent, MaterializeAccordionModule, MaterializeButtonModule, MaterializeButtonToggleGroupModule, MaterializeCalendarModule, MaterializeCardModule, MaterializeCheckboxModule, MaterializeCollapsibleModule, MaterializeCommonModule, MaterializeDatePickerModule, MaterializeDrawerModule, MaterializeFormMessageModule, MaterializeGlossaryModule, MaterializeHTMLVisualizerModule, MaterializeIconModule, MaterializeInputModule, MaterializeLabelModule, MaterializeModalModule, MaterializeNavbarModule, MaterializeRadioGroupModule, MaterializeScrollSpyModule, MaterializeSelectModule, MaterializeSliderModule, MaterializeStepperModule, MaterializeSwitchModule, MaterializeTabGroupModule, MaterializeTextAreaModule, ModalComponent, NavbarComponent, PrefixDirective, RadioComponent, RadioGroupComponent, RippleDirective, ScrollSpyComponent, ScrollSpyItemComponent, SelectComponent, SelectOptionComponent, SliderComponent, SliderIndicatorComponent, SliderOptionComponent, StepComponent, StepIndicatorComponent, StepLabelComponent, StepperComponent, SuffixDirective, SwitchComponent, TabComponent, TabGroupComponent, TextAreaComponent, config as ɵa };
//# sourceMappingURL=materialize-angular.js.map
