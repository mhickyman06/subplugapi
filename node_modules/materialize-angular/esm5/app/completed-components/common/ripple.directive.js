/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/common/ripple.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import { config } from '../../config';
/**
 * @record
 */
function Coordinate() { }
if (false) {
    /** @type {?} */
    Coordinate.prototype.x;
    /** @type {?} */
    Coordinate.prototype.y;
}
var RippleDirective = /** @class */ (function () {
    function RippleDirective(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.rippleDuration = 500;
        this.isRippleActive = true;
        this.isRippleCenter = false;
        this.prefix = config.components.prefix;
        this.createRipple = this.createRipple.bind(this);
        this.element = this.elementRef.nativeElement;
        this.renderer.addClass(this.element, this.prefix + "-ripple-element");
    }
    /**
     * @return {?}
     */
    RippleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.isRippleActive) {
            this.renderer.addClass(this.element, 'disabled');
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RippleDirective.prototype.createRipple = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isRippleActive) {
            return;
        }
        /** @type {?} */
        var coordinates = this.isRippleCenter
            ? this.getCoordinatesByCenter()
            : this.getCoordinatesByEvent(event);
        /** @type {?} */
        var radio = this.getRippleRadio(coordinates);
        this.renderRipple(radio, coordinates);
    };
    /**
     * @param {?} radio
     * @param {?} coordinate
     * @return {?}
     */
    RippleDirective.prototype.renderRipple = /**
     * @param {?} radio
     * @param {?} coordinate
     * @return {?}
     */
    function (radio, coordinate) {
        /** @type {?} */
        var ripple = this.renderer.createElement('div');
        /** @type {?} */
        var centerY = coordinate.y - radio;
        /** @type {?} */
        var centerX = coordinate.x - radio;
        this.renderer.addClass(ripple, 'ripple');
        this.renderer.setStyle(ripple, 'height', radio * 2 + "px");
        this.renderer.setStyle(ripple, 'width', radio * 2 + "px");
        this.renderer.setStyle(ripple, 'top', centerY + "px");
        this.renderer.setStyle(ripple, 'left', centerX + "px");
        this.renderer.insertBefore(this.element, ripple, this.element.firstChild);
        this.scaleRipple(ripple);
    };
    /**
     * @return {?}
     */
    RippleDirective.prototype.getCoordinatesByCenter = /**
     * @return {?}
     */
    function () {
        var _a = this.element, offsetHeight = _a.offsetHeight, offsetWidth = _a.offsetWidth;
        /** @type {?} */
        var y = offsetHeight / 2;
        /** @type {?} */
        var x = offsetWidth / 2;
        return { x: x, y: y };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RippleDirective.prototype.getCoordinatesByEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var offset = this.getOffset(this.element);
        /** @type {?} */
        var y = event.pageY - offset.top;
        /** @type {?} */
        var x = event.pageX - offset.left;
        return { x: x, y: y };
    };
    /**
     * @param {?} coordinate
     * @return {?}
     */
    RippleDirective.prototype.getRippleRadio = /**
     * @param {?} coordinate
     * @return {?}
     */
    function (coordinate) {
        /** @type {?} */
        var height = Math.max(this.element.offsetHeight - coordinate.y, coordinate.y);
        /** @type {?} */
        var width = Math.max(this.element.offsetWidth - coordinate.x, coordinate.x);
        /** @type {?} */
        var radio = Math.hypot(height, width);
        return radio;
    };
    /**
     * @param {?} ripple
     * @return {?}
     */
    RippleDirective.prototype.scaleRipple = /**
     * @param {?} ripple
     * @return {?}
     */
    function (ripple) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            ripple.style.transitionDuration = _this.rippleDuration + "ms";
            ripple.style.transform = 'scale(1)';
            _this.hideRipple(ripple);
        }), 0);
    };
    /**
     * @param {?} ripple
     * @return {?}
     */
    RippleDirective.prototype.hideRipple = /**
     * @param {?} ripple
     * @return {?}
     */
    function (ripple) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.renderer.setStyle(ripple, 'transitionDuration', _this.rippleDuration + "ms");
            _this.renderer.setStyle(ripple, 'opacity', '0');
            _this.removeRipple(ripple);
        }), this.rippleDuration);
    };
    /**
     * @param {?} ripple
     * @return {?}
     */
    RippleDirective.prototype.removeRipple = /**
     * @param {?} ripple
     * @return {?}
     */
    function (ripple) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.renderer.removeChild(_this.element, ripple);
        }), this.rippleDuration);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    RippleDirective.prototype.getOffset = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var rect = element.getBoundingClientRect();
        /** @type {?} */
        var top = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        /** @type {?} */
        var left = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
        /** @type {?} */
        var offset = {
            left: rect.left + left,
            top: rect.top + top
        };
        return offset;
    };
    RippleDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[" + config.components.prefix + "Ripple]"
                },] }
    ];
    /** @nocollapse */
    RippleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    RippleDirective.propDecorators = {
        rippleDuration: [{ type: Input }],
        isRippleActive: [{ type: Input }],
        isRippleCenter: [{ type: Input }],
        createRipple: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    return RippleDirective;
}());
export { RippleDirective };
if (false) {
    /** @type {?} */
    RippleDirective.prototype.rippleDuration;
    /** @type {?} */
    RippleDirective.prototype.isRippleActive;
    /** @type {?} */
    RippleDirective.prototype.isRippleCenter;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,