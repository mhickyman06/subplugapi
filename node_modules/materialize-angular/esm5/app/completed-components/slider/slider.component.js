/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, Output, QueryList, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { supportedEvents, supportTouchEvents } from '../../utils/get-supported-events.util';
import { config } from '../../config';
import { SliderOptionComponent } from './slider-option/slider-option.component';
var SliderComponent = /** @class */ (function () {
    function SliderComponent(renderer) {
        this.renderer = renderer;
        this.className = SliderComponent.defaultProps.className;
        this.disabled = SliderComponent.defaultProps.disabled;
        this.required = SliderComponent.defaultProps.required;
        this.showLabels = SliderComponent.defaultProps.showLabels;
        this.showTicks = SliderComponent.defaultProps.showTicks;
        this.value = SliderComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.supportedEvents = supportedEvents();
        this.onChangeEmitter = new EventEmitter();
        this.actionDown = this.actionDown.bind(this);
        this.actionMove = this.actionMove.bind(this);
        this.actionUp = this.actionUp.bind(this);
        this.onOptionClick = this.onOptionClick.bind(this);
        this.update = this.update.bind(this);
        window.addEventListener(this.supportedEvents.resize, this.update);
    }
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.sliderTrack.nativeElement.addEventListener(this.supportedEvents.down, this.actionDown);
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.update();
        this.options.changes.subscribe(this.update);
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.registerEventOptions();
            _this.renderPositions();
            _this.moveToValue(_this.value, false);
        }), 0);
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.registerEventOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.options.forEach((/**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            option.onClickEmitter.subscribe(_this.onOptionClick);
        }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SliderComponent.prototype.onOptionClick = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
        this.moveToValue(this.value, true);
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.renderPositions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var pixelInterval = this.getPixelInterval();
        this.removeTicks();
        this.options.forEach((/**
         * @param {?} option
         * @param {?} index
         * @return {?}
         */
        function (option, index) {
            /** @type {?} */
            var leftSpace = pixelInterval * index;
            var nativeElement = option.templateRef.nativeElement;
            _this.renderer.setStyle(nativeElement, 'left', leftSpace + "px");
            if (_this.showTicks) {
                /** @type {?} */
                var tick = _this.renderer.createElement('div');
                _this.renderer.setStyle(tick, 'left', leftSpace + "px");
                _this.renderer.addClass(tick, SliderComponent.tickClassName);
                _this.renderer.appendChild(_this.sliderTrackInterval.nativeElement, tick);
            }
        }));
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.removeTicks = /**
     * @return {?}
     */
    function () {
        var nativeElement = this.sliderTrackInterval.nativeElement;
        while (nativeElement.firstChild) {
            this.renderer.removeChild(nativeElement, nativeElement.firstChild);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.actionDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            /** @type {?} */
            var x = this.getXCoordinate(event, this.supportedEvents.down);
            this.animate(x, true);
            window.addEventListener(this.supportedEvents.up, this.actionUp);
            window.addEventListener(this.supportedEvents.move, this.actionMove);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.actionMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var x = this.getXCoordinate(event, this.supportedEvents.move);
        this.value = this.getValueFromXCoordinate(x);
        this.animate(x, false);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.actionUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        window.removeEventListener(this.supportedEvents.up, this.actionUp);
        window.removeEventListener(this.supportedEvents.move, this.actionMove);
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', null);
        /** @type {?} */
        var x = this.getXCoordinate(event, this.supportedEvents.up);
        this.value = this.getValueFromXCoordinate(x);
        this.onChangeEmitter.emit(this.value);
        this.onChange(this.value);
        this.moveToValue(this.value, true);
    };
    /**
     * @param {?} value
     * @param {?} hasAnimation
     * @return {?}
     */
    SliderComponent.prototype.moveToValue = /**
     * @param {?} value
     * @param {?} hasAnimation
     * @return {?}
     */
    function (value, hasAnimation) {
        /** @type {?} */
        var options = this.options.toArray();
        /** @type {?} */
        var index = options.findIndex((/**
         * @param {?} option
         * @return {?}
         */
        function (option) { return option.value === value; }));
        /** @type {?} */
        var validatedIndex = index >= 0
            ? index
            : 0;
        /** @type {?} */
        var pixelInterval = this.getPixelInterval();
        /** @type {?} */
        var nextXCoordinate = validatedIndex * pixelInterval;
        this.animate(nextXCoordinate, hasAnimation);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SliderComponent.prototype.activeOption = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.options.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.isActive = (item.value === value);
        }));
    };
    /**
     * @param {?} x
     * @return {?}
     */
    SliderComponent.prototype.getValueFromXCoordinate = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        /** @type {?} */
        var index = this.getIndexFromXCoordinate(x);
        /** @type {?} */
        var options = this.options.toArray();
        /** @type {?} */
        var value = options[index].value;
        return value;
    };
    /**
     * @param {?} x
     * @return {?}
     */
    SliderComponent.prototype.getIndexFromXCoordinate = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        /** @type {?} */
        var pixelInterval = this.getPixelInterval();
        if (pixelInterval) {
            /** @type {?} */
            var index = Math.round(x / pixelInterval);
            if (index >= 0 && index <= this.options.length) {
                return index;
            }
        }
        return 0;
    };
    /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    SliderComponent.prototype.getXCoordinateByEventType = /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    function (event, eventType) {
        if (supportTouchEvents()) {
            if (eventType === this.supportedEvents.up) {
                return event.changedTouches[0].clientX;
            }
            return event.touches[0].clientX;
        }
        return event.clientX;
    };
    /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    SliderComponent.prototype.getXCoordinate = /**
     * @param {?} event
     * @param {?} eventType
     * @return {?}
     */
    function (event, eventType) {
        /** @type {?} */
        var rect = this.sliderTrack.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var xCoordinateEvent = this.getXCoordinateByEventType(event, eventType);
        /** @type {?} */
        var x = xCoordinateEvent - rect.left;
        if (x < 0) {
            return 0;
        }
        if (x > this.sliderTrack.nativeElement.offsetWidth) {
            return this.sliderTrack.nativeElement.offsetWidth;
        }
        return x;
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.getPixelInterval = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var maxOptionsSize = this.options.length - 1;
        if (maxOptionsSize > 0) {
            return this.sliderTrack.nativeElement.offsetWidth / maxOptionsSize;
        }
        return 0;
    };
    /**
     * @param {?} x
     * @param {?} hasAnimation
     * @return {?}
     */
    SliderComponent.prototype.animate = /**
     * @param {?} x
     * @param {?} hasAnimation
     * @return {?}
     */
    function (x, hasAnimation) {
        this.activeOption(this.value);
        /** @type {?} */
        var transitionDuration = hasAnimation
            ? null
            : '0ms';
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', transitionDuration);
        this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'left', x + "px");
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.isFocused = false;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SliderComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SliderComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.value = value;
            _this.moveToValue(value, false);
        }), 0);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SliderComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SliderComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SliderComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { };
    /**
     * @return {?}
     */
    SliderComponent.prototype.onTouched = /**
     * @return {?}
     */
    function () { };
    SliderComponent.tickClassName = config.components.prefix + '-slider-step';
    SliderComponent.defaultProps = {
        className: '',
        disabled: false,
        required: false,
        showLabels: true,
        showTicks: false,
        value: null
    };
    SliderComponent.decorators = [
        { type: Component, args: [{
                    providers: [{
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return SliderComponent; }))
                        }],
                    selector: config.components.prefix + "-slider }",
                    template: "<div [ngClass]=\"[prefix + '-slider', className]\" [class.focused]=\"isFocused\" [class.disabled]=\"disabled\">\n\n  <div [ngClass]=\"prefix + '-slider-track-container'\" #sliderTrack [tabindex]=\"disabled ? '-1' : '0'\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n    <div #sliderTrackInterval></div>\n\n    <div [ngClass]=\"prefix + '-slider-track'\" #sliderTrackBackground></div>\n\n    <div [ngClass]=\"prefix + '-slider-indicator-container'\" #sliderIndicatorContainer>\n      <ng-content select=\"materialize-slider-indicator\"></ng-content>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-slider-labels-container'\" *ngIf=\"showLabels\">\n    <ng-content select=\"materialize-slider-option\"></ng-content>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    SliderComponent.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    SliderComponent.propDecorators = {
        options: [{ type: ContentChildren, args: [SliderOptionComponent,] }],
        sliderIndicatorContainer: [{ type: ViewChild, args: ['sliderIndicatorContainer', { static: true },] }],
        sliderTrack: [{ type: ViewChild, args: ['sliderTrack', { static: true },] }],
        sliderTrackBackground: [{ type: ViewChild, args: ['sliderTrackBackground', { static: true },] }],
        sliderTrackInterval: [{ type: ViewChild, args: ['sliderTrackInterval', { static: true },] }],
        onChangeEmitter: [{ type: Output, args: ['onChange',] }],
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        required: [{ type: Input }],
        showLabels: [{ type: Input }],
        showTicks: [{ type: Input }],
        value: [{ type: Input }]
    };
    return SliderComponent;
}());
export { SliderComponent };
if (false) {
    /** @type {?} */
    SliderComponent.tickClassName;
    /** @type {?} */
    SliderComponent.defaultProps;
    /** @type {?} */
    SliderComponent.prototype.options;
    /** @type {?} */
    SliderComponent.prototype.sliderIndicatorContainer;
    /** @type {?} */
    SliderComponent.prototype.sliderTrack;
    /** @type {?} */
    SliderComponent.prototype.sliderTrackBackground;
    /** @type {?} */
    SliderComponent.prototype.sliderTrackInterval;
    /** @type {?} */
    SliderComponent.prototype.onChangeEmitter;
    /** @type {?} */
    SliderComponent.prototype.className;
    /** @type {?} */
    SliderComponent.prototype.disabled;
    /** @type {?} */
    SliderComponent.prototype.required;
    /** @type {?} */
    SliderComponent.prototype.showLabels;
    /** @type {?} */
    SliderComponent.prototype.showTicks;
    /** @type {?} */
    SliderComponent.prototype.value;
    /** @type {?} */
    SliderComponent.prototype.prefix;
    /** @type {?} */
    SliderComponent.prototype.isFocused;
    /** @type {?} */
    SliderComponent.prototype.supportedEvents;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,