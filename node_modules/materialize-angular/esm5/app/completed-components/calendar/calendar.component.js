/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/calendar/calendar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { config } from '../../config';
import { days } from '../../fixtures/calendar-week-days';
import { months } from '../../fixtures/calendar-months';
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent() {
        this.className = CalendarComponent.defaultProps.className;
        this.date = CalendarComponent.defaultProps.date;
        this.displayOtherMonthDays = CalendarComponent.defaultProps.displayOtherMonthDays;
        this.prefix = config.components.prefix;
        this.selectYearAnimationDuration = 150;
        this.scrollToActiveYear = this.scrollToActiveYear.bind(this);
        this.onSelectDayEmitter = new EventEmitter();
        this.dayLabels = this.getDayLabels(days);
        this.monthLabels = this.getMonthLabels(months);
    }
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dateExists = (typeof this.date !== 'undefined' && this.date !== null);
        /** @type {?} */
        var openDate = dateExists ? this.date : new Date();
        /** @type {?} */
        var isToday = this.isTodayDate(openDate);
        /** @type {?} */
        var month = openDate.getMonth();
        /** @type {?} */
        var year = openDate.getFullYear();
        this.weeks = this.fillWeeks(month, year);
        this.years = this.fillYears(year);
        this.selectedDate = this.createDateModel(openDate, false, isToday, dateExists);
    };
    /**
     * @param {?} dayLabels
     * @return {?}
     */
    CalendarComponent.prototype.getDayLabels = /**
     * @param {?} dayLabels
     * @return {?}
     */
    function (dayLabels) {
        return [
            dayLabels.sunday,
            dayLabels.monday,
            dayLabels.tuesday,
            dayLabels.wednesday,
            dayLabels.thursday,
            dayLabels.friday,
            dayLabels.saturday
        ];
    };
    /**
     * @param {?} monthLabels
     * @return {?}
     */
    CalendarComponent.prototype.getMonthLabels = /**
     * @param {?} monthLabels
     * @return {?}
     */
    function (monthLabels) {
        return [
            monthLabels.january,
            monthLabels.february,
            monthLabels.march,
            monthLabels.april,
            monthLabels.may,
            monthLabels.june,
            monthLabels.july,
            monthLabels.august,
            monthLabels.september,
            monthLabels.october,
            monthLabels.november,
            monthLabels.december
        ];
    };
    /**
     * @param {?} date
     * @param {?} isOutOfMonth
     * @param {?} isToday
     * @param {?} showSelected
     * @return {?}
     */
    CalendarComponent.prototype.createDateModel = /**
     * @param {?} date
     * @param {?} isOutOfMonth
     * @param {?} isToday
     * @param {?} showSelected
     * @return {?}
     */
    function (date, isOutOfMonth, isToday, showSelected) {
        /** @type {?} */
        var weekDay = date.getDay();
        /** @type {?} */
        var month = date.getMonth();
        /** @type {?} */
        var dateModel = {
            ISODate: this.generateISODate(date),
            date: date,
            dayLabel: this.dayLabels[weekDay],
            isOutOfMonth: isOutOfMonth,
            isToday: isToday,
            monthLabel: this.monthLabels[month],
            showSelected: showSelected
        };
        return dateModel;
    };
    /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    CalendarComponent.prototype.createDateObject = /**
     * @param {?} day
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (day, month, year) {
        /** @type {?} */
        var date = new Date();
        date.setDate(day);
        date.setMonth(month);
        date.setFullYear(year);
        return date;
    };
    /**
     * @param {?} currentYear
     * @return {?}
     */
    CalendarComponent.prototype.fillYears = /**
     * @param {?} currentYear
     * @return {?}
     */
    function (currentYear) {
        /** @type {?} */
        var firstYear = currentYear - 100;
        /** @type {?} */
        var lastYear = currentYear + 100;
        /** @type {?} */
        var years = [];
        for (var i = firstYear; i <= lastYear; i++) {
            years.push(i);
        }
        return years;
    };
    /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    CalendarComponent.prototype.fillWeeks = /**
     * @param {?} month
     * @param {?} year
     * @return {?}
     */
    function (month, year) {
        this.selectedMonth = {
            label: this.monthLabels[month],
            number: month,
            year: year
        };
        /** @type {?} */
        var finalMonthDay = this.createDateObject(0, month, year);
        /** @type {?} */
        var weeks = [];
        /** @type {?} */
        var initMonthDate = new Date(year, month, 1);
        /** @type {?} */
        var day = 0 - initMonthDate.getDay();
        /** @type {?} */
        var daysInWeek = [];
        while (initMonthDate.getDay() !== 0 || finalMonthDay >= initMonthDate) {
            ++day;
            initMonthDate = new Date(year, month, day);
            daysInWeek.push(this.createDayDate(initMonthDate, day, finalMonthDay));
            if (daysInWeek.length === 7) {
                weeks.push(daysInWeek);
                daysInWeek = [];
            }
        }
        return weeks;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.isTodayDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var ISOCurrentDate = this.generateISODate(new Date());
        /** @type {?} */
        var ISODate = this.generateISODate(date);
        /** @type {?} */
        var isToday = (ISODate === ISOCurrentDate);
        return isToday;
    };
    /**
     * @param {?} date
     * @param {?} dayNumber
     * @param {?} finalMonthDay
     * @return {?}
     */
    CalendarComponent.prototype.createDayDate = /**
     * @param {?} date
     * @param {?} dayNumber
     * @param {?} finalMonthDay
     * @return {?}
     */
    function (date, dayNumber, finalMonthDay) {
        /** @type {?} */
        var isToday = this.isTodayDate(date);
        /** @type {?} */
        var isOutOfMonth = (dayNumber <= 0 || date > finalMonthDay);
        return this.createDateModel(date, isOutOfMonth, isToday, true);
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.showPrevMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var month = this.selectedMonth.number;
        /** @type {?} */
        var year = this.selectedMonth.year;
        /** @type {?} */
        var prevMonth = month >= 1
            ? month - 1
            : 11;
        /** @type {?} */
        var prevYear = month < 1
            ? year - 1
            : year;
        this.weeks = this.fillWeeks(prevMonth, prevYear);
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.showNextMonth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var month = this.selectedMonth.number;
        /** @type {?} */
        var year = this.selectedMonth.year;
        /** @type {?} */
        var nextMonth = month < 11
            ? month + 1
            : 0;
        /** @type {?} */
        var nextYear = month >= 11
            ? year + 1
            : year;
        this.weeks = this.fillWeeks(nextMonth, nextYear);
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.generateISODate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var day = date.getDate();
        /** @type {?} */
        var month = date.getMonth() + 1;
        /** @type {?} */
        var year = date.getFullYear();
        /** @type {?} */
        var dayString = day > 9
            ? day
            : "0" + day;
        /** @type {?} */
        var monthString = month > 9
            ? month
            : "0" + month;
        return year + "-" + monthString + "-" + dayString;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.onSelectDay = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date.isOutOfMonth) {
            return;
        }
        this.selectedDate = date;
        this.onSelectDayEmitter.emit(this.selectedDate);
    };
    /**
     * @param {?} year
     * @return {?}
     */
    CalendarComponent.prototype.onSelectYear = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var day = _this.selectedDate.date.getDate();
            /** @type {?} */
            var month = _this.selectedDate.date.getMonth();
            _this.date = _this.createDateObject(day, month, year);
            _this.showYears = false;
            _this.selectedDate = _this.createDateModel(_this.date, false, true, true);
            _this.weeks = _this.fillWeeks(month, year);
        }), this.selectYearAnimationDuration);
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.displayYears = /**
     * @return {?}
     */
    function () {
        this.showYears = true;
        setTimeout(this.scrollToActiveYear, 0);
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.scrollToActiveYear = /**
     * @return {?}
     */
    function () {
        var nativeElement = this.yearsContainerRef.nativeElement;
        /** @type {?} */
        var activeYear = nativeElement.querySelector('.selected');
        if (activeYear) {
            /** @type {?} */
            var top_1 = this.getScrollCenter(nativeElement, activeYear);
            nativeElement.scrollTop = top_1;
        }
    };
    /**
     * @param {?} container
     * @param {?} internalElement
     * @return {?}
     */
    CalendarComponent.prototype.getScrollCenter = /**
     * @param {?} container
     * @param {?} internalElement
     * @return {?}
     */
    function (container, internalElement) {
        /** @type {?} */
        var yearTop = internalElement.offsetTop;
        /** @type {?} */
        var yearMiddleHeight = internalElement.offsetHeight / 2;
        /** @type {?} */
        var containerTop = container.offsetTop;
        /** @type {?} */
        var containerMiddleHeight = container.offsetHeight / 2;
        /** @type {?} */
        var elementRelativeTop = (yearTop - containerTop) - (containerMiddleHeight - yearMiddleHeight);
        if (elementRelativeTop < 0) {
            return 0;
        }
        return elementRelativeTop;
    };
    CalendarComponent.defaultProps = {
        className: '',
        date: new Date(),
        displayOtherMonthDays: true
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-calendar }",
                    template: "<div [ngClass]=\"[prefix + '-calendar', className]\">\n  <div [ngClass]=\"prefix + '-calendar-header'\">\n    <div [ngClass]=\"prefix + '-calendar-year'\">\n      <materialize-button (onClick)=\"displayYears()\">{{ selectedMonth.year }}</materialize-button>\n    </div>\n    <div [ngClass]=\"prefix + '-calendar-date'\">\n      <materialize-button (onClick)=\"showYears = false\">\n        {{ selectedDate.dayLabel.shortName }}, {{ selectedDate.monthLabel.shortName }} {{ selectedDate.date.getDate() }}\n      </materialize-button>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-calendar-body'\">\n    <ng-container *ngIf=\"!showYears\">\n      <div [ngClass]=\"prefix + '-calendar-controls'\">\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showPrevMonth()\">\n          <materialize-icon>chevron_left</materialize-icon>\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-month'\">\n          {{ selectedMonth.label.shortName }} {{ selectedMonth.year }}\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showNextMonth()\">\n          <materialize-icon>chevron_right</materialize-icon>\n        </div>\n      </div>\n      \n      <table [ngClass]=\"prefix + '-calendar-table'\">\n        <thead>\n          <tr>\n            <td [ngClass]=\"prefix + '-calendar-day-name'\" *ngFor=\"let day of dayLabels\">{{ day.shortestName }}</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let week of weeks\">\n            <td *ngFor=\"let day of week\">\n              <div [ngClass]=\"prefix + '-calendar-day'\"\n                (click)=\"onSelectDay(day)\"\n                *ngIf=\"!day.isOutOfMonth || displayOtherMonthDays\"\n  \n                [class.current]=\"day.isToday\"\n                [class.selected]=\"selectedDate.showSelected && selectedDate.ISODate === day.ISODate\"\n                [class.disabled]=\"day.isOutOfMonth\"\n  \n                materializeRipple\n                [rippleDuration]=\"800\"\n              >\n                {{ day.date.getDate() }}\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n    \n    <div [ngClass]=\"prefix + '-calendar-years'\"  #yearsContainer>\n      <ng-container *ngIf=\"showYears\">\n        <div [ngClass]=\"prefix + '-calendar-year-option'\"\n          *ngFor=\"let year of years\"\n\n          (click)=\"onSelectYear(year)\"\n          [class.selected]=\"year === selectedMonth.year\"\n\n          materializeRipple\n          [rippleDuration]=\"selectYearAnimationDuration\"\n        >\n          {{ year }}\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return []; };
    CalendarComponent.propDecorators = {
        yearsContainerRef: [{ type: ViewChild, args: ['yearsContainer', { static: false },] }],
        onSelectDayEmitter: [{ type: Output, args: ['onSelectDay',] }],
        className: [{ type: Input }],
        date: [{ type: Input }],
        displayOtherMonthDays: [{ type: Input }]
    };
    return CalendarComponent;
}());
export { CalendarComponent };
if (false) {
    /** @type {?} */
    CalendarComponent.defaultProps;
    /** @type {?} */
    CalendarComponent.prototype.yearsContainerRef;
    /** @type {?} */
    CalendarComponent.prototype.onSelectDayEmitter;
    /** @type {?} */
    CalendarComponent.prototype.className;
    /** @type {?} */
    CalendarComponent.prototype.date;
    /** @type {?} */
    CalendarComponent.prototype.displayOtherMonthDays;
    /** @type {?} */
    CalendarComponent.prototype.prefix;
    /** @type {?} */
    CalendarComponent.prototype.dayLabels;
    /** @type {?} */
    CalendarComponent.prototype.monthLabels;
    /** @type {?} */
    CalendarComponent.prototype.selectedDate;
    /** @type {?} */
    CalendarComponent.prototype.selectedMonth;
    /** @type {?} */
    CalendarComponent.prototype.showYears;
    /** @type {?} */
    CalendarComponent.prototype.weeks;
    /** @type {?} */
    CalendarComponent.prototype.years;
    /** @type {?} */
    CalendarComponent.prototype.selectYearAnimationDuration;
}
//# sourceMappingURL=data:application/json;base64,