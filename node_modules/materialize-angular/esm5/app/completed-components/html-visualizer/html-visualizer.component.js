/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/html-visualizer/html-visualizer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { config } from '../../config';
var HTMLVisualizerComponent = /** @class */ (function () {
    function HTMLVisualizerComponent(sanitizer) {
        this.sanitizer = sanitizer;
        this.className = HTMLVisualizerComponent.defaultProps.className;
        this.html = HTMLVisualizerComponent.defaultProps.html;
        this.prefix = config.components.prefix;
    }
    /**
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.htmlContent = this.render(this.html);
    };
    /**
     * @param {?} html
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.render = /**
     * @param {?} html
     * @return {?}
     */
    function (html) {
        /** @type {?} */
        var tags = this.splitByTags(html);
        /** @type {?} */
        var lines = [];
        /** @type {?} */
        var depth = 0;
        for (var i = 0; i < tags.length; i++) {
            /** @type {?} */
            var currentTag = tags[i];
            /** @type {?} */
            var nextTag = tags[i + 1];
            /** @type {?} */
            var lastTag = tags[i + 2];
            /** @type {?} */
            var result = this.createLineLogic(currentTag, nextTag, lastTag, depth, i);
            depth = result.depth;
            i = result.cycle;
            lines.push(result.line);
        }
        return lines.join('<br />');
    };
    /**
     * @param {?} content
     * @param {?} className
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.createNode = /**
     * @param {?} content
     * @param {?} className
     * @return {?}
     */
    function (content, className) {
        /** @type {?} */
        var escapedContent = content.replace(/&/g, '&amp;');
        escapedContent = escapedContent.trim();
        escapedContent = escapedContent.replace(/\[\[/g, '&#123&#123;');
        escapedContent = escapedContent.replace(/\]\]/g, '&#125&#125;');
        escapedContent = escapedContent.replace(/</g, '&lt;');
        escapedContent = escapedContent.replace(/>/g, '&gt;');
        escapedContent = escapedContent.replace(/(\S+)="([^']*?)"/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            /** @type {?} */
            var value = match.match(/"([^']*?)"/g);
            /** @type {?} */
            var attribute = match.match(/(\S+)=/g);
            /** @type {?} */
            var attributeValidated = (attribute && attribute[0]) || '';
            /** @type {?} */
            var valueValidated = (value && value[0]) || '';
            /** @type {?} */
            var attributeTag = "<span class=\"" + HTMLVisualizerComponent.ATTRIBUTE_CLASS + "\">" + attributeValidated + "</span>";
            /** @type {?} */
            var valueTag = "<span class=\"" + HTMLVisualizerComponent.VALUE_CLASS + "\">" + valueValidated + "</span>";
            return attributeTag + valueTag;
        }));
        escapedContent = escapedContent.replace(/(&lt;\/|&lt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            return "<span class=\"" + HTMLVisualizerComponent.SYMBOL_CLASS + "\">&lt;" + (match.includes('/') ? '/' : '') + "</span>";
        }));
        escapedContent = escapedContent.replace(/(\/&gt;|&gt;)/g, (/**
         * @param {?} match
         * @return {?}
         */
        function (match) {
            return "<span class=\"" + HTMLVisualizerComponent.SYMBOL_CLASS + "\">" + (match.includes('/') ? '/' : '') + "&gt;</span>";
        }));
        return "<span class=\"" + className + "\">" + escapedContent + "</span>";
    };
    /**
     * @param {?} depth
     * @param {?} content
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.indentNode = /**
     * @param {?} depth
     * @param {?} content
     * @return {?}
     */
    function (depth, content) {
        /** @type {?} */
        var indentationBase = '&emsp;&emsp;';
        /** @type {?} */
        var indentation = indentationBase.repeat(depth);
        return "" + indentation + content;
    };
    /**
     * @param {?} xml
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.splitByTags = /**
     * @param {?} xml
     * @return {?}
     */
    function (xml) {
        /** @type {?} */
        var tags = xml.split(/(<\/?[^>]+>)/g);
        /** @type {?} */
        var cleanedTags = tags.filter((/**
         * @param {?} line
         * @return {?}
         */
        function (line) { return line.trim() !== ''; }));
        return cleanedTags;
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        return (/<[^>!]+>/).test(contentNode);
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isOpeningTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        if (this.isTag(contentNode) && !this.isClosingTag(contentNode) && !this.isSelfClosingTag(contentNode)) {
            return true;
        }
        return false;
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isClosingTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        return (/<\/+[^>]+>/).test(contentNode);
    };
    /**
     * @param {?} contentNode
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.isSelfClosingTag = /**
     * @param {?} contentNode
     * @return {?}
     */
    function (contentNode) {
        return (/<[^>]+\/>/).test(contentNode);
    };
    /**
     * @param {?} firstTag
     * @param {?} middleTag
     * @param {?} lastTag
     * @param {?} depth
     * @param {?} cycle
     * @return {?}
     */
    HTMLVisualizerComponent.prototype.createLineLogic = /**
     * @param {?} firstTag
     * @param {?} middleTag
     * @param {?} lastTag
     * @param {?} depth
     * @param {?} cycle
     * @return {?}
     */
    function (firstTag, middleTag, lastTag, depth, cycle) {
        if (this.isOpeningTag(firstTag) && this.isClosingTag(middleTag)) {
            /** @type {?} */
            var openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            var closeNode = this.createNode(middleTag, 'tag');
            return {
                cycle: cycle + 1,
                depth: depth,
                line: this.indentNode(depth, "" + openNode + closeNode)
            };
        }
        if (this.isOpeningTag(firstTag) && !this.isTag(middleTag)) {
            /** @type {?} */
            var openNode = this.createNode(firstTag, 'tag');
            /** @type {?} */
            var contentNode = this.createNode(middleTag, 'string');
            /** @type {?} */
            var closeNode = this.createNode(lastTag, 'tag');
            return {
                cycle: cycle + 2,
                depth: depth,
                line: this.indentNode(depth, "" + openNode + contentNode + closeNode)
            };
        }
        if (this.isSelfClosingTag(firstTag)) {
            /** @type {?} */
            var selfClosingNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth,
                line: this.indentNode(depth, selfClosingNode)
            };
        }
        if (this.isClosingTag(firstTag)) {
            /** @type {?} */
            var closeNode = this.createNode(firstTag, 'tag');
            return {
                cycle: cycle,
                depth: depth - 1,
                line: this.indentNode(depth - 1, closeNode)
            };
        }
        return {
            cycle: cycle,
            depth: depth + 1,
            line: this.indentNode(depth, this.createNode(firstTag, 'text'))
        };
    };
    HTMLVisualizerComponent.ATTRIBUTE_CLASS = config.components.prefix + "-html-visualizer-attribute";
    HTMLVisualizerComponent.VALUE_CLASS = config.components.prefix + "-html-visualizer-value";
    HTMLVisualizerComponent.SYMBOL_CLASS = config.components.prefix + "-html-visualizer-symbol";
    HTMLVisualizerComponent.defaultProps = {
        className: '',
        html: ''
    };
    HTMLVisualizerComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-html-visualizer",
                    template: "<div [ngClass]=\"prefix + '-html-visualizer'\">\n  <div [ngClass]=\"prefix + '-html-visualizer-content'\" [innerHTML]=\"htmlContent\" ngNonBindable></div>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    HTMLVisualizerComponent.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    HTMLVisualizerComponent.propDecorators = {
        className: [{ type: Input }],
        html: [{ type: Input }]
    };
    return HTMLVisualizerComponent;
}());
export { HTMLVisualizerComponent };
if (false) {
    /** @type {?} */
    HTMLVisualizerComponent.ATTRIBUTE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.VALUE_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.SYMBOL_CLASS;
    /** @type {?} */
    HTMLVisualizerComponent.defaultProps;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.className;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.html;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.htmlContent;
    /** @type {?} */
    HTMLVisualizerComponent.prototype.prefix;
    /**
     * @type {?}
     * @private
     */
    HTMLVisualizerComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,