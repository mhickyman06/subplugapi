/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/stepper.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, Input, QueryList } from '@angular/core';
import { config } from '../../config';
import { StepComponent } from './step/step.component';
var StepperComponent = /** @class */ (function () {
    function StepperComponent() {
        this.className = StepperComponent.defaultProps.className;
        this.activeIndex = StepperComponent.defaultProps.activeIndex;
        this.showTicks = StepperComponent.defaultProps.showTicks;
        this.prefix = config.components.prefix;
        this.isContentReady = true;
        this.validateContent = this.validateContent.bind(this);
    }
    /**
     * @return {?}
     */
    StepperComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.validateContent();
        this.steps.changes.subscribe(this.validateContent);
    };
    /**
     * @return {?}
     */
    StepperComponent.prototype.validateContent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.isContentReady = false;
            _this.validateSteps();
        }), 0);
    };
    /**
     * @return {?}
     */
    StepperComponent.prototype.validateSteps = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.steps.forEach((/**
         * @param {?} step
         * @param {?} index
         * @return {?}
         */
        function (step, index) {
            step.isCompleted = (index < _this.activeIndex && _this.showTicks);
        }));
    };
    StepperComponent.defaultProps = {
        activeIndex: 0,
        className: '',
        showTicks: true
    };
    StepperComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-stepper }",
                    template: "<div [ngClass]=\"[prefix + '-stepper', className]\">\n  <ng-container *ngFor=\"let step of steps; index as i\">\n    <div [ngClass]=\"prefix + '-step-divider'\" *ngIf=\"i > 0\" [class.completed]=\"i <= activeIndex\"></div>\n\n    <div\n      [ngClass]=\"prefix + '-step'\"\n      [class.active]=\"i === activeIndex\"\n      [class.completed]=\"i < activeIndex\"\n      *ngIf=\"!isContentReady\"\n    >\n      <ng-template [ngTemplateOutlet]=\"step.indicatorTemplate\"></ng-template>\n      <ng-template [ngTemplateOutlet]=\"step.labelTemplate\"></ng-template>\n    </div>\n  </ng-container>\n</div>\n"
                }] }
    ];
    /** @nocollapse */
    StepperComponent.ctorParameters = function () { return []; };
    StepperComponent.propDecorators = {
        className: [{ type: Input }],
        activeIndex: [{ type: Input }],
        showTicks: [{ type: Input }],
        steps: [{ type: ContentChildren, args: [StepComponent,] }]
    };
    return StepperComponent;
}());
export { StepperComponent };
if (false) {
    /** @type {?} */
    StepperComponent.defaultProps;
    /** @type {?} */
    StepperComponent.prototype.className;
    /** @type {?} */
    StepperComponent.prototype.activeIndex;
    /** @type {?} */
    StepperComponent.prototype.showTicks;
    /** @type {?} */
    StepperComponent.prototype.steps;
    /** @type {?} */
    StepperComponent.prototype.prefix;
    /** @type {?} */
    StepperComponent.prototype.isContentReady;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL3N0ZXBwZXIvc3RlcHBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0YsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHdEQ7SUFvQkU7UUFUUyxjQUFTLEdBQVcsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUM1RCxnQkFBVyxHQUFXLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDaEUsY0FBUyxHQUFZLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFJL0QsV0FBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ2xDLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBRzNCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQzs7OztJQUVELDZDQUFrQjs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDckQsQ0FBQzs7OztJQUVELDBDQUFlOzs7SUFBZjtRQUFBLGlCQUtDO1FBSkMsVUFBVTs7O1FBQUM7WUFDVCxLQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztZQUM1QixLQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7OztJQUVELHdDQUFhOzs7SUFBYjtRQUFBLGlCQUlDO1FBSEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPOzs7OztRQUFDLFVBQUMsSUFBSSxFQUFFLEtBQUs7WUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsV0FBVyxJQUFJLEtBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRSxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7SUFwQ2UsNkJBQVksR0FBaUI7UUFDM0MsV0FBVyxFQUFFLENBQUM7UUFDZCxTQUFTLEVBQUUsRUFBRTtRQUNiLFNBQVMsRUFBRSxJQUFJO0tBQ2hCLENBQUM7O2dCQVRILFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLGVBQWE7b0JBQ25ELG9tQkFBdUM7aUJBQ3hDOzs7Ozs0QkFRRSxLQUFLOzhCQUNMLEtBQUs7NEJBQ0wsS0FBSzt3QkFFTCxlQUFlLFNBQUMsYUFBYTs7SUEyQmhDLHVCQUFDO0NBQUEsQUExQ0QsSUEwQ0M7U0F0Q1ksZ0JBQWdCOzs7SUFDM0IsOEJBSUU7O0lBRUYscUNBQXFFOztJQUNyRSx1Q0FBeUU7O0lBQ3pFLHFDQUFzRTs7SUFFdEUsaUNBQWdFOztJQUVoRSxrQ0FBeUM7O0lBQ3pDLDBDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgU3RlcENvbXBvbmVudCB9IGZyb20gJy4vc3RlcC9zdGVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdGVwcGVyTW9kZWwgfSBmcm9tICcuL3N0ZXBwZXIubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1zdGVwcGVyIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RlcHBlci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU3RlcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIFN0ZXBwZXJNb2RlbCwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0UHJvcHM6IFN0ZXBwZXJNb2RlbCA9IHtcbiAgICBhY3RpdmVJbmRleDogMCxcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIHNob3dUaWNrczogdHJ1ZVxuICB9O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gU3RlcHBlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xhc3NOYW1lO1xuICBASW5wdXQoKSBhY3RpdmVJbmRleDogbnVtYmVyID0gU3RlcHBlckNvbXBvbmVudC5kZWZhdWx0UHJvcHMuYWN0aXZlSW5kZXg7XG4gIEBJbnB1dCgpIHNob3dUaWNrczogYm9vbGVhbiA9IFN0ZXBwZXJDb21wb25lbnQuZGVmYXVsdFByb3BzLnNob3dUaWNrcztcblxuICBAQ29udGVudENoaWxkcmVuKFN0ZXBDb21wb25lbnQpIHN0ZXBzOiBRdWVyeUxpc3Q8U3RlcENvbXBvbmVudD47XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcbiAgcHVibGljIGlzQ29udGVudFJlYWR5ID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnZhbGlkYXRlQ29udGVudCA9IHRoaXMudmFsaWRhdGVDb250ZW50LmJpbmQodGhpcyk7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy52YWxpZGF0ZUNvbnRlbnQoKTtcblxuICAgIHRoaXMuc3RlcHMuY2hhbmdlcy5zdWJzY3JpYmUodGhpcy52YWxpZGF0ZUNvbnRlbnQpO1xuICB9XG5cbiAgdmFsaWRhdGVDb250ZW50KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5pc0NvbnRlbnRSZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy52YWxpZGF0ZVN0ZXBzKCk7XG4gICAgfSwgMCk7XG4gIH1cblxuICB2YWxpZGF0ZVN0ZXBzKCkge1xuICAgIHRoaXMuc3RlcHMuZm9yRWFjaCgoc3RlcCwgaW5kZXgpID0+IHtcbiAgICAgIHN0ZXAuaXNDb21wbGV0ZWQgPSAoaW5kZXggPCB0aGlzLmFjdGl2ZUluZGV4ICYmIHRoaXMuc2hvd1RpY2tzKTtcbiAgICB9KTtcbiAgfVxufVxuIl19