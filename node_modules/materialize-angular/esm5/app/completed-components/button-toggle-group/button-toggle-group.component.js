/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button-toggle-group/button-toggle-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, EventEmitter, forwardRef, Input, Output, QueryList } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { ButtonToggleComponent } from './button-toggle/button-toggle.component';
import { config } from '../../config';
var ButtonToggleGroupComponent = /** @class */ (function () {
    function ButtonToggleGroupComponent() {
        this.canUncheck = ButtonToggleGroupComponent.defaultProps.canUncheck;
        this.className = ButtonToggleGroupComponent.defaultProps.className;
        this.disabled = ButtonToggleGroupComponent.defaultProps.disabled;
        this.value = ButtonToggleGroupComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onChangeEmitter = new EventEmitter();
        this.initButtons = this.initButtons.bind(this);
        this.registerButtons = this.registerButtons.bind(this);
        this.toggleButton = this.toggleButton.bind(this);
    }
    /**
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.initButtons();
        this.buttonsQueryList.changes.subscribe(this.initButtons);
    };
    /**
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.initButtons = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            this.disableButtons(this.disabled);
        }
        setTimeout(this.registerButtons, 0);
    };
    /**
     * @param {?} disabled
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.disableButtons = /**
     * @param {?} disabled
     * @return {?}
     */
    function (disabled) {
        this.buttonsQueryList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.disabled = disabled;
        }));
    };
    /**
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.registerButtons = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.buttonsQueryList.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) {
            button.isActive = (_this.value.lastIndexOf(button.value) >= 0);
            button.onClickEmitter.subscribe(_this.toggleButton);
        }));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.toggleButton = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.setValueAllButtons(value);
        /** @type {?} */
        var currentButton = this.buttonsQueryList.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.value === value; }));
        this.value = currentButton && currentButton.isActive
            ? currentButton.value
            : '';
        this.onTouched();
        this.onChange(this.value);
        this.onChangeEmitter.emit(this.value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.setValueAllButtons = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.buttonsQueryList.forEach((/**
         * @param {?} button
         * @return {?}
         */
        function (button) {
            if (button.value !== value) {
                button.isActive = false;
            }
            if (button.value === value && !_this.canUncheck) {
                button.isActive = true;
            }
        }));
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.disableButtons(this.disabled);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) { };
    /**
     * @return {?}
     */
    ButtonToggleGroupComponent.prototype.onTouched = /**
     * @return {?}
     */
    function () { };
    ButtonToggleGroupComponent.defaultProps = {
        canUncheck: false,
        className: '',
        disabled: false,
        value: ''
    };
    ButtonToggleGroupComponent.decorators = [
        { type: Component, args: [{
                    providers: [{
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return ButtonToggleGroupComponent; }))
                        }],
                    selector: config.components.prefix + "-button-toggle-group }",
                    template: "<div \n  [ngClass]=\"[prefix + '-button-toggle-group', className]\"\n  [class.disabled]=\"disabled\"\n>\n  <ng-content select=\"materialize-button-toggle\"></ng-content>\n</div>\n  "
                }] }
    ];
    /** @nocollapse */
    ButtonToggleGroupComponent.ctorParameters = function () { return []; };
    ButtonToggleGroupComponent.propDecorators = {
        buttonsQueryList: [{ type: ContentChildren, args: [ButtonToggleComponent,] }],
        onChangeEmitter: [{ type: Output, args: ['onChange',] }],
        canUncheck: [{ type: Input }],
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        value: [{ type: Input }]
    };
    return ButtonToggleGroupComponent;
}());
export { ButtonToggleGroupComponent };
if (false) {
    /** @type {?} */
    ButtonToggleGroupComponent.defaultProps;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.buttonsQueryList;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.onChangeEmitter;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.canUncheck;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.className;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.disabled;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.value;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.prefix;
    /** @type {?} */
    ButtonToggleGroupComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,