/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button/button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { BUTTON_LEVELS, BUTTON_TYPES } from './button.model';
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { config } from '../../config';
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent() {
        this.className = ButtonComponent.defaultProps.className;
        this.disabled = ButtonComponent.defaultProps.disabled;
        this.level = ButtonComponent.defaultProps.level;
        this.rippleDuration = ButtonComponent.defaultProps.rippleDuration;
        this.type = ButtonComponent.defaultProps.type;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onBlurEmitter = new EventEmitter();
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ButtonComponent.prototype.onFocus = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.isFocused = true;
        }
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (!this.disabled) {
            this.isFocused = false;
            this.onClickEmitter.emit();
        }
    };
    /**
     * @return {?}
     */
    ButtonComponent.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        this.onBlurEmitter.emit();
        this.isFocused = false;
    };
    ButtonComponent.defaultProps = {
        className: '',
        disabled: false,
        level: BUTTON_LEVELS.ACCENT,
        rippleDuration: 250,
        type: BUTTON_TYPES.BUTTON
    };
    ButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: config.components.prefix + "-button }",
                    template: "<button [ngClass]=\"[prefix + '-button', level, className]\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (focus)=\"onFocus()\"\n\n  materializeRipple\n  [isRippleActive]=\"!disabled\"\n  [rippleDuration]=\"rippleDuration\"\n  \n  [class.focused]=\"isFocused\"\n  [disabled]=\"disabled\"\n  [type]=\"type\"\n  \n  #element>\n  <ng-content></ng-content>\n</button>\n"
                }] }
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return []; };
    ButtonComponent.propDecorators = {
        className: [{ type: Input }],
        disabled: [{ type: Input }],
        level: [{ type: Input }],
        rippleDuration: [{ type: Input }],
        type: [{ type: Input }],
        onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
        onClickEmitter: [{ type: Output, args: ['onClick',] }],
        element: [{ type: ViewChild, args: ['element', { static: true },] }]
    };
    return ButtonComponent;
}());
export { ButtonComponent };
if (false) {
    /** @type {?} */
    ButtonComponent.defaultProps;
    /** @type {?} */
    ButtonComponent.prototype.className;
    /** @type {?} */
    ButtonComponent.prototype.disabled;
    /** @type {?} */
    ButtonComponent.prototype.level;
    /** @type {?} */
    ButtonComponent.prototype.rippleDuration;
    /** @type {?} */
    ButtonComponent.prototype.type;
    /** @type {?} */
    ButtonComponent.prototype.onBlurEmitter;
    /** @type {?} */
    ButtonComponent.prototype.onClickEmitter;
    /** @type {?} */
    ButtonComponent.prototype.element;
    /** @type {?} */
    ButtonComponent.prototype.prefix;
    /** @type {?} */
    ButtonComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvYnV0dG9uL2J1dHRvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQWUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV0QztJQTJCRTtRQWRTLGNBQVMsR0FBVyxlQUFlLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUMzRCxhQUFRLEdBQVksZUFBZSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDMUQsVUFBSyxHQUFrQixlQUFlLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztRQUMxRCxtQkFBYyxHQUFXLGVBQWUsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDO1FBQ3JFLFNBQUksR0FBaUIsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFPekQsV0FBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBSXZDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBRXZCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELGlDQUFPOzs7SUFBUDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQzs7OztJQUVELGlDQUFPOzs7SUFBUDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDNUI7SUFDSCxDQUFDOzs7O0lBRUQsZ0NBQU07OztJQUFOO1FBQ0UsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUUxQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBOUNlLDRCQUFZLEdBQWdCO1FBQzFDLFNBQVMsRUFBRSxFQUFFO1FBQ2IsUUFBUSxFQUFFLEtBQUs7UUFDZixLQUFLLEVBQUUsYUFBYSxDQUFDLE1BQU07UUFDM0IsY0FBYyxFQUFFLEdBQUc7UUFDbkIsSUFBSSxFQUFFLFlBQVksQ0FBQyxNQUFNO0tBQzFCLENBQUM7O2dCQVhILFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLGNBQVk7b0JBQ2xELCtYQUFzQztpQkFDdkM7Ozs7OzRCQVVFLEtBQUs7MkJBQ0wsS0FBSzt3QkFDTCxLQUFLO2lDQUNMLEtBQUs7dUJBQ0wsS0FBSztnQ0FFTCxNQUFNLFNBQUMsUUFBUTtpQ0FDZixNQUFNLFNBQUMsU0FBUzswQkFFaEIsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7O0lBOEJ4QyxzQkFBQztDQUFBLEFBcERELElBb0RDO1NBaERZLGVBQWU7OztJQUMxQiw2QkFNRTs7SUFFRixvQ0FBb0U7O0lBQ3BFLG1DQUFtRTs7SUFDbkUsZ0NBQW1FOztJQUNuRSx5Q0FBOEU7O0lBQzlFLCtCQUFnRTs7SUFFaEUsd0NBQW9EOztJQUNwRCx5Q0FBc0Q7O0lBRXRELGtDQUE0RDs7SUFFNUQsaUNBQXlDOztJQUN6QyxvQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBCVVRUT05fTEVWRUxTLCBCVVRUT05fVFlQRVMsIEJ1dHRvbk1vZGVsIH0gZnJvbSAnLi9idXR0b24ubW9kZWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBgJHsgY29uZmlnLmNvbXBvbmVudHMucHJlZml4IH0tYnV0dG9uIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBCdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBCdXR0b25Nb2RlbCB7XG4gIHN0YXRpYyByZWFkb25seSBkZWZhdWx0UHJvcHM6IEJ1dHRvbk1vZGVsID0ge1xuICAgIGNsYXNzTmFtZTogJycsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGxldmVsOiBCVVRUT05fTEVWRUxTLkFDQ0VOVCxcbiAgICByaXBwbGVEdXJhdGlvbjogMjUwLFxuICAgIHR5cGU6IEJVVFRPTl9UWVBFUy5CVVRUT05cbiAgfTtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IEJ1dHRvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xhc3NOYW1lO1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbiA9IEJ1dHRvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMuZGlzYWJsZWQ7XG4gIEBJbnB1dCgpIGxldmVsOiBCVVRUT05fTEVWRUxTID0gQnV0dG9uQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5sZXZlbDtcbiAgQElucHV0KCkgcmlwcGxlRHVyYXRpb246IG51bWJlciA9IEJ1dHRvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMucmlwcGxlRHVyYXRpb247XG4gIEBJbnB1dCgpIHR5cGU6IEJVVFRPTl9UWVBFUyA9IEJ1dHRvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMudHlwZTtcblxuICBAT3V0cHV0KCdvbkJsdXInKSBvbkJsdXJFbWl0dGVyOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gIEBPdXRwdXQoJ29uQ2xpY2snKSBvbkNsaWNrRW1pdHRlcjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuXG4gIEBWaWV3Q2hpbGQoJ2VsZW1lbnQnLCB7IHN0YXRpYzogdHJ1ZSB9KSBlbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIHB1YmxpYyBwcmVmaXggPSBjb25maWcuY29tcG9uZW50cy5wcmVmaXg7XG4gIHB1YmxpYyBpc0ZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMub25CbHVyRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB0aGlzLm9uQ2xpY2tFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICB9XG5cbiAgb25Gb2N1cygpIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBvbkNsaWNrKCkge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMub25DbGlja0VtaXR0ZXIuZW1pdCgpO1xuICAgIH1cbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICB0aGlzLm9uQmx1ckVtaXR0ZXIuZW1pdCgpO1xuXG4gICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgfVxufVxuIl19