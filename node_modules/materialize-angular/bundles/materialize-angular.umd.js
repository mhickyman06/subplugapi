(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/router'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('materialize-angular', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/router', '@angular/platform-browser'], factory) :
    (global = global || self, factory(global['materialize-angular'] = {}, global.ng.core, global.ng.common, global.ng.forms, global.ng.router, global.ng.platformBrowser));
}(this, (function (exports, core, common, forms, router, platformBrowser) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: app/config/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /** @type {?} */
    var config = {
        components: {
            prefix: 'materialize'
        }
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/collapsible/collapsible.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CollapsibleComponent = /** @class */ (function () {
        function CollapsibleComponent(renderer) {
            this.renderer = renderer;
            this.className = CollapsibleComponent.defaultProps.className;
            this.disabled = CollapsibleComponent.defaultProps.disabled;
            this.isOpen = CollapsibleComponent.defaultProps.isOpen;
            this.showIndicator = CollapsibleComponent.defaultProps.showIndicator;
            this.prefix = config.components.prefix;
            this.onCloseEmitter = new core.EventEmitter();
            this.onOpenEmitter = new core.EventEmitter();
            this.onToggle = this.onToggle.bind(this);
            this.update = this.update.bind(this);
            window.addEventListener('resize', this.update);
        }
        /**
         * @return {?}
         */
        CollapsibleComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.isOpen) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.update();
                }), 300);
            }
        };
        /**
         * @return {?}
         */
        CollapsibleComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            this.update();
        };
        /**
         * @return {?}
         */
        CollapsibleComponent.prototype.onToggle = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                if (this.isOpen) {
                    this.close();
                    this.onCloseEmitter.emit();
                }
                else {
                    this.open();
                    this.onOpenEmitter.emit();
                }
            }
        };
        /**
         * @return {?}
         */
        CollapsibleComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            this.isOpen = true;
            this.update();
        };
        /**
         * @return {?}
         */
        CollapsibleComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            this.isOpen = false;
            this.update();
        };
        /**
         * @return {?}
         */
        CollapsibleComponent.prototype.update = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var contentContainer = this.containerRef.nativeElement;
            /** @type {?} */
            var maxHeight = this.isOpen
                ? contentContainer.scrollHeight
                : 0;
            this.renderer.setStyle(contentContainer, 'maxHeight', maxHeight + "px");
        };
        CollapsibleComponent.defaultProps = {
            className: '',
            disabled: false,
            isOpen: false,
            showIndicator: true
        };
        CollapsibleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-collapsible }",
                        template: "<div\n  [ngClass]=\"[prefix + '-collapsible', className]\"\n  [class.disabled]=\"disabled\"\n  [class.open]=\"isOpen\"\n>\n  <div (click)=\"onToggle()\"\n    [isRippleActive]=\"!disabled\"\n    [ngClass]=\"[prefix + '-collapsible-title', className]\"\n\n    materializeRipple\n  >\n    <ng-content select=\"materialize-collapsible-title\"></ng-content>\n\n    <materialize-icon *ngIf=\"showIndicator\" [className]=\"prefix + '-collapsible-title-icon'\">\n      expand_more\n    </materialize-icon>\n  </div>\n\n  <div [ngClass]=\"[prefix + '-collapsible-content-container', className]\" #container>\n    <div [ngClass]=\"prefix + '-collapsible-content'\">\n      <ng-content select=\"materialize-collapsible-content\"></ng-content>\n    </div>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        CollapsibleComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        CollapsibleComponent.propDecorators = {
            onCloseEmitter: [{ type: core.Output, args: ['onClose',] }],
            onOpenEmitter: [{ type: core.Output, args: ['onOpen',] }],
            containerRef: [{ type: core.ViewChild, args: ['container', { static: true },] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            isOpen: [{ type: core.Input }],
            showIndicator: [{ type: core.Input }]
        };
        return CollapsibleComponent;
    }());
    if (false) {
        /** @type {?} */
        CollapsibleComponent.defaultProps;
        /** @type {?} */
        CollapsibleComponent.prototype.onCloseEmitter;
        /** @type {?} */
        CollapsibleComponent.prototype.onOpenEmitter;
        /** @type {?} */
        CollapsibleComponent.prototype.containerRef;
        /** @type {?} */
        CollapsibleComponent.prototype.className;
        /** @type {?} */
        CollapsibleComponent.prototype.disabled;
        /** @type {?} */
        CollapsibleComponent.prototype.isOpen;
        /** @type {?} */
        CollapsibleComponent.prototype.showIndicator;
        /** @type {?} */
        CollapsibleComponent.prototype.prefix;
        /**
         * @type {?}
         * @private
         */
        CollapsibleComponent.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/accordion/accordion.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AccordionComponent = /** @class */ (function () {
        function AccordionComponent() {
            this.className = AccordionComponent.defaultProps.className;
            this.activeIndex = AccordionComponent.defaultProps.activeIndex;
            this.initCollapsibles = this.initCollapsibles.bind(this);
            this.registerCollapsibles = this.registerCollapsibles.bind(this);
            this.onToggleEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        AccordionComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.initCollapsibles();
            this.collapsiblesQueryList.changes.subscribe(this.initCollapsibles);
        };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.initCollapsibles = /**
         * @return {?}
         */
        function () {
            setTimeout(this.registerCollapsibles, 0);
        };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.registerCollapsibles = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.collapsiblesQueryList.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                item.onOpenEmitter.subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.toggleCollapsibles(index);
                }));
            }));
        };
        /**
         * @param {?} currentIndex
         * @return {?}
         */
        AccordionComponent.prototype.toggleCollapsibles = /**
         * @param {?} currentIndex
         * @return {?}
         */
        function (currentIndex) {
            this.activeIndex = currentIndex;
            this.onToggleEmitter.emit(this.activeIndex);
            this.collapsiblesQueryList.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                if (index === currentIndex) {
                    item.open();
                }
                else {
                    item.close();
                }
            }));
        };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.showNext = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var nextIndex = this.activeIndex === null || this.activeIndex >= this.collapsiblesQueryList.length
                ? null
                : this.activeIndex + 1;
            this.toggleCollapsibles(nextIndex);
        };
        /**
         * @return {?}
         */
        AccordionComponent.prototype.showPrev = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var prevIndex = this.activeIndex === null || this.activeIndex === 0
                ? null
                : this.activeIndex - 1;
            this.toggleCollapsibles(prevIndex);
        };
        AccordionComponent.defaultProps = {
            activeIndex: null,
            className: ''
        };
        AccordionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-accordion }",
                        template: "<div [ngClass]=\"className\">\n  <ng-content select=\"materialize-collapsible\"></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        AccordionComponent.ctorParameters = function () { return []; };
        AccordionComponent.propDecorators = {
            collapsiblesQueryList: [{ type: core.ContentChildren, args: [CollapsibleComponent,] }],
            onToggleEmitter: [{ type: core.Output, args: ['onToggle',] }],
            className: [{ type: core.Input }]
        };
        return AccordionComponent;
    }());
    if (false) {
        /** @type {?} */
        AccordionComponent.defaultProps;
        /** @type {?} */
        AccordionComponent.prototype.collapsiblesQueryList;
        /** @type {?} */
        AccordionComponent.prototype.onToggleEmitter;
        /** @type {?} */
        AccordionComponent.prototype.className;
        /** @type {?} */
        AccordionComponent.prototype.activeIndex;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/collapsible/collapsible-content/collapsible-content.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CollapsibleContentComponent = /** @class */ (function () {
        function CollapsibleContentComponent() {
        }
        CollapsibleContentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-collapsible-content }",
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        return CollapsibleContentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/collapsible/collapsible-title/collapsible-title.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CollapsibleTitleComponent = /** @class */ (function () {
        function CollapsibleTitleComponent() {
        }
        CollapsibleTitleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-collapsible-title }",
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        return CollapsibleTitleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/common/prefix.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PrefixDirective = /** @class */ (function () {
        function PrefixDirective() {
        }
        PrefixDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[materializePrefix]'
                    },] }
        ];
        return PrefixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/common/ripple.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function Coordinate() { }
    if (false) {
        /** @type {?} */
        Coordinate.prototype.x;
        /** @type {?} */
        Coordinate.prototype.y;
    }
    var RippleDirective = /** @class */ (function () {
        function RippleDirective(elementRef, renderer) {
            this.elementRef = elementRef;
            this.renderer = renderer;
            this.rippleDuration = 500;
            this.isRippleActive = true;
            this.isRippleCenter = false;
            this.prefix = config.components.prefix;
            this.createRipple = this.createRipple.bind(this);
            this.element = this.elementRef.nativeElement;
            this.renderer.addClass(this.element, this.prefix + "-ripple-element");
        }
        /**
         * @return {?}
         */
        RippleDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (!this.isRippleActive) {
                this.renderer.addClass(this.element, 'disabled');
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        RippleDirective.prototype.createRipple = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.isRippleActive) {
                return;
            }
            /** @type {?} */
            var coordinates = this.isRippleCenter
                ? this.getCoordinatesByCenter()
                : this.getCoordinatesByEvent(event);
            /** @type {?} */
            var radio = this.getRippleRadio(coordinates);
            this.renderRipple(radio, coordinates);
        };
        /**
         * @param {?} radio
         * @param {?} coordinate
         * @return {?}
         */
        RippleDirective.prototype.renderRipple = /**
         * @param {?} radio
         * @param {?} coordinate
         * @return {?}
         */
        function (radio, coordinate) {
            /** @type {?} */
            var ripple = this.renderer.createElement('div');
            /** @type {?} */
            var centerY = coordinate.y - radio;
            /** @type {?} */
            var centerX = coordinate.x - radio;
            this.renderer.addClass(ripple, 'ripple');
            this.renderer.setStyle(ripple, 'height', radio * 2 + "px");
            this.renderer.setStyle(ripple, 'width', radio * 2 + "px");
            this.renderer.setStyle(ripple, 'top', centerY + "px");
            this.renderer.setStyle(ripple, 'left', centerX + "px");
            this.renderer.insertBefore(this.element, ripple, this.element.firstChild);
            this.scaleRipple(ripple);
        };
        /**
         * @return {?}
         */
        RippleDirective.prototype.getCoordinatesByCenter = /**
         * @return {?}
         */
        function () {
            var _a = this.element, offsetHeight = _a.offsetHeight, offsetWidth = _a.offsetWidth;
            /** @type {?} */
            var y = offsetHeight / 2;
            /** @type {?} */
            var x = offsetWidth / 2;
            return { x: x, y: y };
        };
        /**
         * @param {?} event
         * @return {?}
         */
        RippleDirective.prototype.getCoordinatesByEvent = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var offset = this.getOffset(this.element);
            /** @type {?} */
            var y = event.pageY - offset.top;
            /** @type {?} */
            var x = event.pageX - offset.left;
            return { x: x, y: y };
        };
        /**
         * @param {?} coordinate
         * @return {?}
         */
        RippleDirective.prototype.getRippleRadio = /**
         * @param {?} coordinate
         * @return {?}
         */
        function (coordinate) {
            /** @type {?} */
            var height = Math.max(this.element.offsetHeight - coordinate.y, coordinate.y);
            /** @type {?} */
            var width = Math.max(this.element.offsetWidth - coordinate.x, coordinate.x);
            /** @type {?} */
            var radio = Math.hypot(height, width);
            return radio;
        };
        /**
         * @param {?} ripple
         * @return {?}
         */
        RippleDirective.prototype.scaleRipple = /**
         * @param {?} ripple
         * @return {?}
         */
        function (ripple) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                ripple.style.transitionDuration = _this.rippleDuration + "ms";
                ripple.style.transform = 'scale(1)';
                _this.hideRipple(ripple);
            }), 0);
        };
        /**
         * @param {?} ripple
         * @return {?}
         */
        RippleDirective.prototype.hideRipple = /**
         * @param {?} ripple
         * @return {?}
         */
        function (ripple) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.renderer.setStyle(ripple, 'transitionDuration', _this.rippleDuration + "ms");
                _this.renderer.setStyle(ripple, 'opacity', '0');
                _this.removeRipple(ripple);
            }), this.rippleDuration);
        };
        /**
         * @param {?} ripple
         * @return {?}
         */
        RippleDirective.prototype.removeRipple = /**
         * @param {?} ripple
         * @return {?}
         */
        function (ripple) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.renderer.removeChild(_this.element, ripple);
            }), this.rippleDuration);
        };
        /**
         * @param {?} element
         * @return {?}
         */
        RippleDirective.prototype.getOffset = /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            /** @type {?} */
            var rect = element.getBoundingClientRect();
            /** @type {?} */
            var top = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
            /** @type {?} */
            var left = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
            /** @type {?} */
            var offset = {
                left: rect.left + left,
                top: rect.top + top
            };
            return offset;
        };
        RippleDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[" + config.components.prefix + "Ripple]"
                    },] }
        ];
        /** @nocollapse */
        RippleDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.Renderer2 }
        ]; };
        RippleDirective.propDecorators = {
            rippleDuration: [{ type: core.Input }],
            isRippleActive: [{ type: core.Input }],
            isRippleCenter: [{ type: core.Input }],
            createRipple: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }]
        };
        return RippleDirective;
    }());
    if (false) {
        /** @type {?} */
        RippleDirective.prototype.rippleDuration;
        /** @type {?} */
        RippleDirective.prototype.isRippleActive;
        /** @type {?} */
        RippleDirective.prototype.isRippleCenter;
        /**
         * @type {?}
         * @private
         */
        RippleDirective.prototype.element;
        /**
         * @type {?}
         * @private
         */
        RippleDirective.prototype.prefix;
        /**
         * @type {?}
         * @private
         */
        RippleDirective.prototype.elementRef;
        /**
         * @type {?}
         * @private
         */
        RippleDirective.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/common/suffix.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SuffixDirective = /** @class */ (function () {
        function SuffixDirective() {
        }
        SuffixDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[materializeSuffix]'
                    },] }
        ];
        return SuffixDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/common/common.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeCommonModule = /** @class */ (function () {
        function MaterializeCommonModule() {
        }
        MaterializeCommonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            PrefixDirective,
                            RippleDirective,
                            SuffixDirective
                        ],
                        exports: [
                            PrefixDirective,
                            RippleDirective,
                            SuffixDirective
                        ],
                        imports: [common.CommonModule]
                    },] }
        ];
        return MaterializeCommonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/icon/icon.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function IconModel() { }
    if (false) {
        /** @type {?} */
        IconModel.prototype.className;
        /** @type {?} */
        IconModel.prototype.size;
    }
    /** @enum {string} */
    var ICON_SIZES = {
        NONE: "",
        XS: "xs",
        SM: "sm",
        MD: "md",
        LG: "lg",
        XL: "xl",
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/icon/icon.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IconComponent = /** @class */ (function () {
        function IconComponent() {
            this.className = IconComponent.defaultProps.className;
            this.size = IconComponent.defaultProps.size;
            this.prefix = config.components.prefix;
            this.onClickEmitter = new core.EventEmitter();
            this.onBlurEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        IconComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            this.onClickEmitter.emit();
        };
        /**
         * @return {?}
         */
        IconComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.onBlurEmitter.emit();
        };
        IconComponent.defaultProps = {
            className: '',
            size: ICON_SIZES.NONE
        };
        IconComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-icon }",
                        template: "<span class=\"icon\" [ngClass]=\"[prefix + '-icon', size, className]\" (click)=\"onClick()\" (blur)=\"onBlur()\">\n  <ng-content></ng-content>\n</span>\n"
                    }] }
        ];
        /** @nocollapse */
        IconComponent.ctorParameters = function () { return []; };
        IconComponent.propDecorators = {
            onClickEmitter: [{ type: core.Output, args: ['onClick',] }],
            onBlurEmitter: [{ type: core.Output, args: ['onBlur',] }],
            className: [{ type: core.Input }],
            size: [{ type: core.Input }]
        };
        return IconComponent;
    }());
    if (false) {
        /** @type {?} */
        IconComponent.defaultProps;
        /** @type {?} */
        IconComponent.prototype.onClickEmitter;
        /** @type {?} */
        IconComponent.prototype.onBlurEmitter;
        /** @type {?} */
        IconComponent.prototype.className;
        /** @type {?} */
        IconComponent.prototype.size;
        /** @type {?} */
        IconComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/icon/icon.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeIconModule = /** @class */ (function () {
        function MaterializeIconModule() {
        }
        MaterializeIconModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [IconComponent],
                        exports: [IconComponent],
                        imports: [common.CommonModule]
                    },] }
        ];
        return MaterializeIconModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/collapsible/collapsible.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeCollapsibleModule = /** @class */ (function () {
        function MaterializeCollapsibleModule() {
        }
        MaterializeCollapsibleModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            CollapsibleComponent,
                            CollapsibleContentComponent,
                            CollapsibleTitleComponent
                        ],
                        exports: [
                            CollapsibleComponent,
                            CollapsibleContentComponent,
                            CollapsibleTitleComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeIconModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeCollapsibleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/accordion/accordion.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeAccordionModule = /** @class */ (function () {
        function MaterializeAccordionModule() {
        }
        MaterializeAccordionModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [AccordionComponent],
                        exports: [AccordionComponent],
                        imports: [
                            MaterializeCollapsibleModule,
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeAccordionModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/accordion/accordion.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function AccordionModel() { }
    if (false) {
        /** @type {?} */
        AccordionModel.prototype.activeIndex;
        /** @type {?} */
        AccordionModel.prototype.className;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button/button.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function ButtonModel() { }
    if (false) {
        /** @type {?} */
        ButtonModel.prototype.className;
        /** @type {?} */
        ButtonModel.prototype.disabled;
        /** @type {?} */
        ButtonModel.prototype.level;
        /** @type {?} */
        ButtonModel.prototype.rippleDuration;
        /** @type {?} */
        ButtonModel.prototype.type;
    }
    /** @enum {string} */
    var BUTTON_LEVELS = {
        TEXT: "text",
        ACCENT: "accent",
        OUTLINE: "outline",
    };
    /** @enum {string} */
    var BUTTON_TYPES = {
        BUTTON: "button",
        SUBMIT: "submit",
        RESET: "reset",
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button/button.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ButtonComponent = /** @class */ (function () {
        function ButtonComponent() {
            this.className = ButtonComponent.defaultProps.className;
            this.disabled = ButtonComponent.defaultProps.disabled;
            this.level = ButtonComponent.defaultProps.level;
            this.rippleDuration = ButtonComponent.defaultProps.rippleDuration;
            this.type = ButtonComponent.defaultProps.type;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.onBlurEmitter = new core.EventEmitter();
            this.onClickEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ButtonComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
            }
        };
        /**
         * @return {?}
         */
        ButtonComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = false;
                this.onClickEmitter.emit();
            }
        };
        /**
         * @return {?}
         */
        ButtonComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.onBlurEmitter.emit();
            this.isFocused = false;
        };
        ButtonComponent.defaultProps = {
            className: '',
            disabled: false,
            level: BUTTON_LEVELS.ACCENT,
            rippleDuration: 250,
            type: BUTTON_TYPES.BUTTON
        };
        ButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-button }",
                        template: "<button [ngClass]=\"[prefix + '-button', level, className]\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (focus)=\"onFocus()\"\n\n  materializeRipple\n  [isRippleActive]=\"!disabled\"\n  [rippleDuration]=\"rippleDuration\"\n  \n  [class.focused]=\"isFocused\"\n  [disabled]=\"disabled\"\n  [type]=\"type\"\n  \n  #element>\n  <ng-content></ng-content>\n</button>\n"
                    }] }
        ];
        /** @nocollapse */
        ButtonComponent.ctorParameters = function () { return []; };
        ButtonComponent.propDecorators = {
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            level: [{ type: core.Input }],
            rippleDuration: [{ type: core.Input }],
            type: [{ type: core.Input }],
            onBlurEmitter: [{ type: core.Output, args: ['onBlur',] }],
            onClickEmitter: [{ type: core.Output, args: ['onClick',] }],
            element: [{ type: core.ViewChild, args: ['element', { static: true },] }]
        };
        return ButtonComponent;
    }());
    if (false) {
        /** @type {?} */
        ButtonComponent.defaultProps;
        /** @type {?} */
        ButtonComponent.prototype.className;
        /** @type {?} */
        ButtonComponent.prototype.disabled;
        /** @type {?} */
        ButtonComponent.prototype.level;
        /** @type {?} */
        ButtonComponent.prototype.rippleDuration;
        /** @type {?} */
        ButtonComponent.prototype.type;
        /** @type {?} */
        ButtonComponent.prototype.onBlurEmitter;
        /** @type {?} */
        ButtonComponent.prototype.onClickEmitter;
        /** @type {?} */
        ButtonComponent.prototype.element;
        /** @type {?} */
        ButtonComponent.prototype.prefix;
        /** @type {?} */
        ButtonComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button/button.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeButtonModule = /** @class */ (function () {
        function MaterializeButtonModule() {
        }
        MaterializeButtonModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ButtonComponent],
                        exports: [ButtonComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeButtonModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button-toggle-group/button-toggle/button-toggle.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ButtonToggleComponent = /** @class */ (function () {
        function ButtonToggleComponent() {
            this.className = ButtonToggleComponent.defaultProps.className;
            this.disabled = ButtonToggleComponent.defaultProps.disabled;
            this.name = ButtonToggleComponent.defaultProps.name;
            this.value = ButtonToggleComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.onClickEmitter = new core.EventEmitter();
            this.isActive = false;
            this.isFocused = false;
        }
        /**
         * @return {?}
         */
        ButtonToggleComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isActive = !this.isActive;
                this.isFocused = false;
                this.onClickEmitter.emit(this.value);
            }
        };
        /**
         * @return {?}
         */
        ButtonToggleComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.isFocused = false;
        };
        /**
         * @return {?}
         */
        ButtonToggleComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
            }
        };
        ButtonToggleComponent.defaultProps = {
            className: '',
            disabled: false,
            name: '',
            value: ''
        };
        ButtonToggleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-button-toggle }",
                        template: "<div (click)=\"onClick()\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n\n  [ngClass]=\"[prefix + '-button-toggle', className]\"\n  [class.active]=\"isActive\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n  [isRippleActive]=\"!disabled\"\n\n  materializeRipple  \n>\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ButtonToggleComponent.ctorParameters = function () { return []; };
        ButtonToggleComponent.propDecorators = {
            onClickEmitter: [{ type: core.Output, args: ['onClick',] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            name: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return ButtonToggleComponent;
    }());
    if (false) {
        /** @type {?} */
        ButtonToggleComponent.defaultProps;
        /** @type {?} */
        ButtonToggleComponent.prototype.onClickEmitter;
        /** @type {?} */
        ButtonToggleComponent.prototype.className;
        /** @type {?} */
        ButtonToggleComponent.prototype.disabled;
        /** @type {?} */
        ButtonToggleComponent.prototype.name;
        /** @type {?} */
        ButtonToggleComponent.prototype.value;
        /** @type {?} */
        ButtonToggleComponent.prototype.prefix;
        /** @type {?} */
        ButtonToggleComponent.prototype.isActive;
        /** @type {?} */
        ButtonToggleComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button-toggle-group/button-toggle-group.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ButtonToggleGroupComponent = /** @class */ (function () {
        function ButtonToggleGroupComponent() {
            this.canUncheck = ButtonToggleGroupComponent.defaultProps.canUncheck;
            this.className = ButtonToggleGroupComponent.defaultProps.className;
            this.disabled = ButtonToggleGroupComponent.defaultProps.disabled;
            this.value = ButtonToggleGroupComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.onChangeEmitter = new core.EventEmitter();
            this.initButtons = this.initButtons.bind(this);
            this.registerButtons = this.registerButtons.bind(this);
            this.toggleButton = this.toggleButton.bind(this);
        }
        /**
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.initButtons();
            this.buttonsQueryList.changes.subscribe(this.initButtons);
        };
        /**
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.initButtons = /**
         * @return {?}
         */
        function () {
            if (this.disabled) {
                this.disableButtons(this.disabled);
            }
            setTimeout(this.registerButtons, 0);
        };
        /**
         * @param {?} disabled
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.disableButtons = /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.buttonsQueryList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.disabled = disabled;
            }));
        };
        /**
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.registerButtons = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.buttonsQueryList.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) {
                button.isActive = (_this.value.lastIndexOf(button.value) >= 0);
                button.onClickEmitter.subscribe(_this.toggleButton);
            }));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.toggleButton = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setValueAllButtons(value);
            /** @type {?} */
            var currentButton = this.buttonsQueryList.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.value === value; }));
            this.value = currentButton && currentButton.isActive
                ? currentButton.value
                : '';
            this.onTouched();
            this.onChange(this.value);
            this.onChangeEmitter.emit(this.value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.setValueAllButtons = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.buttonsQueryList.forEach((/**
             * @param {?} button
             * @return {?}
             */
            function (button) {
                if (button.value !== value) {
                    button.isActive = false;
                }
                if (button.value === value && !_this.canUncheck) {
                    button.isActive = true;
                }
            }));
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
            this.disableButtons(this.disabled);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) { };
        /**
         * @return {?}
         */
        ButtonToggleGroupComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        ButtonToggleGroupComponent.defaultProps = {
            canUncheck: false,
            className: '',
            disabled: false,
            value: ''
        };
        ButtonToggleGroupComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ButtonToggleGroupComponent; }))
                            }],
                        selector: config.components.prefix + "-button-toggle-group }",
                        template: "<div \n  [ngClass]=\"[prefix + '-button-toggle-group', className]\"\n  [class.disabled]=\"disabled\"\n>\n  <ng-content select=\"materialize-button-toggle\"></ng-content>\n</div>\n  "
                    }] }
        ];
        /** @nocollapse */
        ButtonToggleGroupComponent.ctorParameters = function () { return []; };
        ButtonToggleGroupComponent.propDecorators = {
            buttonsQueryList: [{ type: core.ContentChildren, args: [ButtonToggleComponent,] }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }],
            canUncheck: [{ type: core.Input }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return ButtonToggleGroupComponent;
    }());
    if (false) {
        /** @type {?} */
        ButtonToggleGroupComponent.defaultProps;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.buttonsQueryList;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.onChangeEmitter;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.canUncheck;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.className;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.disabled;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.value;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.prefix;
        /** @type {?} */
        ButtonToggleGroupComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button-toggle-group/button-toggle-group.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeButtonToggleGroupModule = /** @class */ (function () {
        function MaterializeButtonToggleGroupModule() {
        }
        MaterializeButtonToggleGroupModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ButtonToggleComponent,
                            ButtonToggleGroupComponent
                        ],
                        exports: [
                            ButtonToggleComponent,
                            ButtonToggleGroupComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeButtonToggleGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button-toggle-group/button-toggle-group.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function ButtonToggleGroupModel() { }
    if (false) {
        /** @type {?} */
        ButtonToggleGroupModel.prototype.canUncheck;
        /** @type {?} */
        ButtonToggleGroupModel.prototype.className;
        /** @type {?} */
        ButtonToggleGroupModel.prototype.disabled;
        /** @type {?} */
        ButtonToggleGroupModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/button-toggle-group/button-toggle/button-toggle.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function ButtonToggleModel() { }
    if (false) {
        /** @type {?} */
        ButtonToggleModel.prototype.className;
        /** @type {?} */
        ButtonToggleModel.prototype.disabled;
        /** @type {?} */
        ButtonToggleModel.prototype.name;
        /** @type {?} */
        ButtonToggleModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/fixtures/calendar-week-days.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /** @type {?} */
    var days = {
        friday: {
            name: 'Friday',
            shortName: 'Fri',
            shortestName: 'Fr'
        },
        monday: {
            name: 'Monday',
            shortName: 'Mon',
            shortestName: 'Mo'
        },
        saturday: {
            name: 'Saturday',
            shortName: 'Sat',
            shortestName: 'Sa'
        },
        sunday: {
            name: 'Sunday',
            shortName: 'Sun',
            shortestName: 'Su'
        },
        thursday: {
            name: 'Thursday',
            shortName: 'Thu',
            shortestName: 'Th'
        },
        tuesday: {
            name: 'Tuesday',
            shortName: 'Tue',
            shortestName: 'Tu'
        },
        wednesday: {
            name: 'Wednesday',
            shortName: 'Wed',
            shortestName: 'We'
        }
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/fixtures/calendar-months.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /** @type {?} */
    var months = {
        april: {
            name: 'April',
            shortName: 'Apr',
            shortestName: 'Ap'
        },
        august: {
            name: 'August',
            shortName: 'Aug',
            shortestName: 'Au'
        },
        december: {
            name: 'December',
            shortName: 'Dec',
            shortestName: 'De'
        },
        february: {
            name: 'February',
            shortName: 'Feb',
            shortestName: 'Fe'
        },
        january: {
            name: 'January',
            shortName: 'Jan',
            shortestName: 'Ja'
        },
        july: {
            name: 'July',
            shortName: 'Jul',
            shortestName: 'Ju'
        },
        june: {
            name: 'June',
            shortName: 'Jun',
            shortestName: 'Ju'
        },
        march: {
            name: 'March',
            shortName: 'Mar',
            shortestName: 'Ma'
        },
        may: {
            name: 'May',
            shortName: 'May',
            shortestName: 'Ma'
        },
        november: {
            name: 'November',
            shortName: 'Nov',
            shortestName: 'No'
        },
        october: {
            name: 'October',
            shortName: 'Oct',
            shortestName: 'Oc'
        },
        september: {
            name: 'September',
            shortName: 'Sep',
            shortestName: 'Se'
        }
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/calendar/calendar.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CalendarComponent = /** @class */ (function () {
        function CalendarComponent() {
            this.className = CalendarComponent.defaultProps.className;
            this.date = CalendarComponent.defaultProps.date;
            this.displayOtherMonthDays = CalendarComponent.defaultProps.displayOtherMonthDays;
            this.prefix = config.components.prefix;
            this.selectYearAnimationDuration = 150;
            this.scrollToActiveYear = this.scrollToActiveYear.bind(this);
            this.onSelectDayEmitter = new core.EventEmitter();
            this.dayLabels = this.getDayLabels(days);
            this.monthLabels = this.getMonthLabels(months);
        }
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.init();
        };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            this.init();
        };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.init = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dateExists = (typeof this.date !== 'undefined' && this.date !== null);
            /** @type {?} */
            var openDate = dateExists ? this.date : new Date();
            /** @type {?} */
            var isToday = this.isTodayDate(openDate);
            /** @type {?} */
            var month = openDate.getMonth();
            /** @type {?} */
            var year = openDate.getFullYear();
            this.weeks = this.fillWeeks(month, year);
            this.years = this.fillYears(year);
            this.selectedDate = this.createDateModel(openDate, false, isToday, dateExists);
        };
        /**
         * @param {?} dayLabels
         * @return {?}
         */
        CalendarComponent.prototype.getDayLabels = /**
         * @param {?} dayLabels
         * @return {?}
         */
        function (dayLabels) {
            return [
                dayLabels.sunday,
                dayLabels.monday,
                dayLabels.tuesday,
                dayLabels.wednesday,
                dayLabels.thursday,
                dayLabels.friday,
                dayLabels.saturday
            ];
        };
        /**
         * @param {?} monthLabels
         * @return {?}
         */
        CalendarComponent.prototype.getMonthLabels = /**
         * @param {?} monthLabels
         * @return {?}
         */
        function (monthLabels) {
            return [
                monthLabels.january,
                monthLabels.february,
                monthLabels.march,
                monthLabels.april,
                monthLabels.may,
                monthLabels.june,
                monthLabels.july,
                monthLabels.august,
                monthLabels.september,
                monthLabels.october,
                monthLabels.november,
                monthLabels.december
            ];
        };
        /**
         * @param {?} date
         * @param {?} isOutOfMonth
         * @param {?} isToday
         * @param {?} showSelected
         * @return {?}
         */
        CalendarComponent.prototype.createDateModel = /**
         * @param {?} date
         * @param {?} isOutOfMonth
         * @param {?} isToday
         * @param {?} showSelected
         * @return {?}
         */
        function (date, isOutOfMonth, isToday, showSelected) {
            /** @type {?} */
            var weekDay = date.getDay();
            /** @type {?} */
            var month = date.getMonth();
            /** @type {?} */
            var dateModel = {
                ISODate: this.generateISODate(date),
                date: date,
                dayLabel: this.dayLabels[weekDay],
                isOutOfMonth: isOutOfMonth,
                isToday: isToday,
                monthLabel: this.monthLabels[month],
                showSelected: showSelected
            };
            return dateModel;
        };
        /**
         * @param {?} day
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        CalendarComponent.prototype.createDateObject = /**
         * @param {?} day
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        function (day, month, year) {
            /** @type {?} */
            var date = new Date();
            date.setDate(day);
            date.setMonth(month);
            date.setFullYear(year);
            return date;
        };
        /**
         * @param {?} currentYear
         * @return {?}
         */
        CalendarComponent.prototype.fillYears = /**
         * @param {?} currentYear
         * @return {?}
         */
        function (currentYear) {
            /** @type {?} */
            var firstYear = currentYear - 100;
            /** @type {?} */
            var lastYear = currentYear + 100;
            /** @type {?} */
            var years = [];
            for (var i = firstYear; i <= lastYear; i++) {
                years.push(i);
            }
            return years;
        };
        /**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        CalendarComponent.prototype.fillWeeks = /**
         * @param {?} month
         * @param {?} year
         * @return {?}
         */
        function (month, year) {
            this.selectedMonth = {
                label: this.monthLabels[month],
                number: month,
                year: year
            };
            /** @type {?} */
            var finalMonthDay = this.createDateObject(0, month, year);
            /** @type {?} */
            var weeks = [];
            /** @type {?} */
            var initMonthDate = new Date(year, month, 1);
            /** @type {?} */
            var day = 0 - initMonthDate.getDay();
            /** @type {?} */
            var daysInWeek = [];
            while (initMonthDate.getDay() !== 0 || finalMonthDay >= initMonthDate) {
                ++day;
                initMonthDate = new Date(year, month, day);
                daysInWeek.push(this.createDayDate(initMonthDate, day, finalMonthDay));
                if (daysInWeek.length === 7) {
                    weeks.push(daysInWeek);
                    daysInWeek = [];
                }
            }
            return weeks;
        };
        /**
         * @param {?} date
         * @return {?}
         */
        CalendarComponent.prototype.isTodayDate = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var ISOCurrentDate = this.generateISODate(new Date());
            /** @type {?} */
            var ISODate = this.generateISODate(date);
            /** @type {?} */
            var isToday = (ISODate === ISOCurrentDate);
            return isToday;
        };
        /**
         * @param {?} date
         * @param {?} dayNumber
         * @param {?} finalMonthDay
         * @return {?}
         */
        CalendarComponent.prototype.createDayDate = /**
         * @param {?} date
         * @param {?} dayNumber
         * @param {?} finalMonthDay
         * @return {?}
         */
        function (date, dayNumber, finalMonthDay) {
            /** @type {?} */
            var isToday = this.isTodayDate(date);
            /** @type {?} */
            var isOutOfMonth = (dayNumber <= 0 || date > finalMonthDay);
            return this.createDateModel(date, isOutOfMonth, isToday, true);
        };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.showPrevMonth = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var month = this.selectedMonth.number;
            /** @type {?} */
            var year = this.selectedMonth.year;
            /** @type {?} */
            var prevMonth = month >= 1
                ? month - 1
                : 11;
            /** @type {?} */
            var prevYear = month < 1
                ? year - 1
                : year;
            this.weeks = this.fillWeeks(prevMonth, prevYear);
        };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.showNextMonth = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var month = this.selectedMonth.number;
            /** @type {?} */
            var year = this.selectedMonth.year;
            /** @type {?} */
            var nextMonth = month < 11
                ? month + 1
                : 0;
            /** @type {?} */
            var nextYear = month >= 11
                ? year + 1
                : year;
            this.weeks = this.fillWeeks(nextMonth, nextYear);
        };
        /**
         * @param {?} date
         * @return {?}
         */
        CalendarComponent.prototype.generateISODate = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var day = date.getDate();
            /** @type {?} */
            var month = date.getMonth() + 1;
            /** @type {?} */
            var year = date.getFullYear();
            /** @type {?} */
            var dayString = day > 9
                ? day
                : "0" + day;
            /** @type {?} */
            var monthString = month > 9
                ? month
                : "0" + month;
            return year + "-" + monthString + "-" + dayString;
        };
        /**
         * @param {?} date
         * @return {?}
         */
        CalendarComponent.prototype.onSelectDay = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            if (date.isOutOfMonth) {
                return;
            }
            this.selectedDate = date;
            this.onSelectDayEmitter.emit(this.selectedDate);
        };
        /**
         * @param {?} year
         * @return {?}
         */
        CalendarComponent.prototype.onSelectYear = /**
         * @param {?} year
         * @return {?}
         */
        function (year) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var day = _this.selectedDate.date.getDate();
                /** @type {?} */
                var month = _this.selectedDate.date.getMonth();
                _this.date = _this.createDateObject(day, month, year);
                _this.showYears = false;
                _this.selectedDate = _this.createDateModel(_this.date, false, true, true);
                _this.weeks = _this.fillWeeks(month, year);
            }), this.selectYearAnimationDuration);
        };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.displayYears = /**
         * @return {?}
         */
        function () {
            this.showYears = true;
            setTimeout(this.scrollToActiveYear, 0);
        };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.scrollToActiveYear = /**
         * @return {?}
         */
        function () {
            var nativeElement = this.yearsContainerRef.nativeElement;
            /** @type {?} */
            var activeYear = nativeElement.querySelector('.selected');
            if (activeYear) {
                /** @type {?} */
                var top_1 = this.getScrollCenter(nativeElement, activeYear);
                nativeElement.scrollTop = top_1;
            }
        };
        /**
         * @param {?} container
         * @param {?} internalElement
         * @return {?}
         */
        CalendarComponent.prototype.getScrollCenter = /**
         * @param {?} container
         * @param {?} internalElement
         * @return {?}
         */
        function (container, internalElement) {
            /** @type {?} */
            var yearTop = internalElement.offsetTop;
            /** @type {?} */
            var yearMiddleHeight = internalElement.offsetHeight / 2;
            /** @type {?} */
            var containerTop = container.offsetTop;
            /** @type {?} */
            var containerMiddleHeight = container.offsetHeight / 2;
            /** @type {?} */
            var elementRelativeTop = (yearTop - containerTop) - (containerMiddleHeight - yearMiddleHeight);
            if (elementRelativeTop < 0) {
                return 0;
            }
            return elementRelativeTop;
        };
        CalendarComponent.defaultProps = {
            className: '',
            date: new Date(),
            displayOtherMonthDays: true
        };
        CalendarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-calendar }",
                        template: "<div [ngClass]=\"[prefix + '-calendar', className]\">\n  <div [ngClass]=\"prefix + '-calendar-header'\">\n    <div [ngClass]=\"prefix + '-calendar-year'\">\n      <materialize-button (onClick)=\"displayYears()\">{{ selectedMonth.year }}</materialize-button>\n    </div>\n    <div [ngClass]=\"prefix + '-calendar-date'\">\n      <materialize-button (onClick)=\"showYears = false\">\n        {{ selectedDate.dayLabel.shortName }}, {{ selectedDate.monthLabel.shortName }} {{ selectedDate.date.getDate() }}\n      </materialize-button>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-calendar-body'\">\n    <ng-container *ngIf=\"!showYears\">\n      <div [ngClass]=\"prefix + '-calendar-controls'\">\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showPrevMonth()\">\n          <materialize-icon>chevron_left</materialize-icon>\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-month'\">\n          {{ selectedMonth.label.shortName }} {{ selectedMonth.year }}\n        </div>\n        <div [ngClass]=\"prefix + '-calendar-control'\" materializeRipple (click)=\"showNextMonth()\">\n          <materialize-icon>chevron_right</materialize-icon>\n        </div>\n      </div>\n      \n      <table [ngClass]=\"prefix + '-calendar-table'\">\n        <thead>\n          <tr>\n            <td [ngClass]=\"prefix + '-calendar-day-name'\" *ngFor=\"let day of dayLabels\">{{ day.shortestName }}</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let week of weeks\">\n            <td *ngFor=\"let day of week\">\n              <div [ngClass]=\"prefix + '-calendar-day'\"\n                (click)=\"onSelectDay(day)\"\n                *ngIf=\"!day.isOutOfMonth || displayOtherMonthDays\"\n  \n                [class.current]=\"day.isToday\"\n                [class.selected]=\"selectedDate.showSelected && selectedDate.ISODate === day.ISODate\"\n                [class.disabled]=\"day.isOutOfMonth\"\n  \n                materializeRipple\n                [rippleDuration]=\"800\"\n              >\n                {{ day.date.getDate() }}\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </ng-container>\n    \n    <div [ngClass]=\"prefix + '-calendar-years'\"  #yearsContainer>\n      <ng-container *ngIf=\"showYears\">\n        <div [ngClass]=\"prefix + '-calendar-year-option'\"\n          *ngFor=\"let year of years\"\n\n          (click)=\"onSelectYear(year)\"\n          [class.selected]=\"year === selectedMonth.year\"\n\n          materializeRipple\n          [rippleDuration]=\"selectYearAnimationDuration\"\n        >\n          {{ year }}\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        CalendarComponent.ctorParameters = function () { return []; };
        CalendarComponent.propDecorators = {
            yearsContainerRef: [{ type: core.ViewChild, args: ['yearsContainer', { static: false },] }],
            onSelectDayEmitter: [{ type: core.Output, args: ['onSelectDay',] }],
            className: [{ type: core.Input }],
            date: [{ type: core.Input }],
            displayOtherMonthDays: [{ type: core.Input }]
        };
        return CalendarComponent;
    }());
    if (false) {
        /** @type {?} */
        CalendarComponent.defaultProps;
        /** @type {?} */
        CalendarComponent.prototype.yearsContainerRef;
        /** @type {?} */
        CalendarComponent.prototype.onSelectDayEmitter;
        /** @type {?} */
        CalendarComponent.prototype.className;
        /** @type {?} */
        CalendarComponent.prototype.date;
        /** @type {?} */
        CalendarComponent.prototype.displayOtherMonthDays;
        /** @type {?} */
        CalendarComponent.prototype.prefix;
        /** @type {?} */
        CalendarComponent.prototype.dayLabels;
        /** @type {?} */
        CalendarComponent.prototype.monthLabels;
        /** @type {?} */
        CalendarComponent.prototype.selectedDate;
        /** @type {?} */
        CalendarComponent.prototype.selectedMonth;
        /** @type {?} */
        CalendarComponent.prototype.showYears;
        /** @type {?} */
        CalendarComponent.prototype.weeks;
        /** @type {?} */
        CalendarComponent.prototype.years;
        /** @type {?} */
        CalendarComponent.prototype.selectYearAnimationDuration;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/calendar/calendar.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeCalendarModule = /** @class */ (function () {
        function MaterializeCalendarModule() {
        }
        MaterializeCalendarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [CalendarComponent],
                        exports: [CalendarComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeButtonModule,
                            MaterializeCommonModule,
                            MaterializeIconModule
                        ]
                    },] }
        ];
        return MaterializeCalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/calendar/calendar.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function CalendarModel() { }
    if (false) {
        /** @type {?} */
        CalendarModel.prototype.className;
        /** @type {?} */
        CalendarModel.prototype.date;
        /** @type {?} */
        CalendarModel.prototype.displayOtherMonthDays;
    }
    /**
     * @record
     */
    function DateModel() { }
    if (false) {
        /** @type {?} */
        DateModel.prototype.date;
        /** @type {?} */
        DateModel.prototype.dayLabel;
        /** @type {?} */
        DateModel.prototype.ISODate;
        /** @type {?} */
        DateModel.prototype.isToday;
        /** @type {?} */
        DateModel.prototype.isOutOfMonth;
        /** @type {?} */
        DateModel.prototype.monthLabel;
        /** @type {?} */
        DateModel.prototype.showSelected;
    }
    /**
     * @record
     */
    function MonthModel() { }
    if (false) {
        /** @type {?} */
        MonthModel.prototype.label;
        /** @type {?} */
        MonthModel.prototype.number;
        /** @type {?} */
        MonthModel.prototype.year;
    }
    /**
     * @record
     */
    function DateLabel() { }
    if (false) {
        /** @type {?} */
        DateLabel.prototype.name;
        /** @type {?} */
        DateLabel.prototype.shortName;
        /** @type {?} */
        DateLabel.prototype.shortestName;
    }
    /**
     * @record
     */
    function DayLabels() { }
    if (false) {
        /** @type {?} */
        DayLabels.prototype.sunday;
        /** @type {?} */
        DayLabels.prototype.monday;
        /** @type {?} */
        DayLabels.prototype.tuesday;
        /** @type {?} */
        DayLabels.prototype.wednesday;
        /** @type {?} */
        DayLabels.prototype.thursday;
        /** @type {?} */
        DayLabels.prototype.friday;
        /** @type {?} */
        DayLabels.prototype.saturday;
    }
    /**
     * @record
     */
    function MonthLabels() { }
    if (false) {
        /** @type {?} */
        MonthLabels.prototype.january;
        /** @type {?} */
        MonthLabels.prototype.february;
        /** @type {?} */
        MonthLabels.prototype.march;
        /** @type {?} */
        MonthLabels.prototype.april;
        /** @type {?} */
        MonthLabels.prototype.may;
        /** @type {?} */
        MonthLabels.prototype.june;
        /** @type {?} */
        MonthLabels.prototype.july;
        /** @type {?} */
        MonthLabels.prototype.august;
        /** @type {?} */
        MonthLabels.prototype.september;
        /** @type {?} */
        MonthLabels.prototype.october;
        /** @type {?} */
        MonthLabels.prototype.november;
        /** @type {?} */
        MonthLabels.prototype.december;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/card/card.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CardComponent = /** @class */ (function () {
        function CardComponent() {
            this.className = CardComponent.defaultProps.className;
            this.prefix = config.components.prefix;
        }
        CardComponent.defaultProps = { className: '' };
        CardComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-card }",
                        template: "<div [ngClass]=\"[prefix + '-card', className]\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        CardComponent.propDecorators = {
            className: [{ type: core.Input }]
        };
        return CardComponent;
    }());
    if (false) {
        /** @type {?} */
        CardComponent.defaultProps;
        /** @type {?} */
        CardComponent.prototype.className;
        /** @type {?} */
        CardComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/card/card.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeCardModule = /** @class */ (function () {
        function MaterializeCardModule() {
        }
        MaterializeCardModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [CardComponent],
                        exports: [CardComponent],
                        imports: [common.CommonModule]
                    },] }
        ];
        return MaterializeCardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/card/card.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function CardModel() { }
    if (false) {
        /** @type {?} */
        CardModel.prototype.className;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/checkbox/checkbox.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxComponent = /** @class */ (function () {
        function CheckboxComponent() {
            this.className = CheckboxComponent.defaultProps.className;
            this.disabled = CheckboxComponent.defaultProps.disabled;
            this.id = CheckboxComponent.defaultProps.id;
            this.indeterminate = CheckboxComponent.defaultProps.indeterminate;
            this.name = CheckboxComponent.defaultProps.name;
            this.required = CheckboxComponent.defaultProps.required;
            this.value = CheckboxComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.onChangeEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.toggleValue = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.value = !this.value;
                this.isFocused = false;
                this.onChange(this.value);
                this.onChangeEmitter.emit(this.value);
            }
        };
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
                this.onTouched();
            }
        };
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.isFocused = false;
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        CheckboxComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) { };
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        CheckboxComponent.defaultProps = {
            className: '',
            disabled: false,
            id: null,
            indeterminate: false,
            name: '',
            required: false,
            value: false
        };
        CheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return CheckboxComponent; }))
                            }],
                        selector: config.components.prefix + "-checkbox }",
                        template: "<div  (click)=\"toggleValue()\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"  \n\n  [ngClass]=\"[prefix + '-checkbox', className]\"\n  [class.active]=\"value\"\n  [class.focused]=\"isFocused\"\n  [class.indeterminate]=\"indeterminate && !value\"\n  [class.disabled]=\"disabled\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n>\n  <div [ngClass]=\"[prefix + '-checkbox-indicator']\">\n    <div [ngClass]=\"[prefix + '-checkbox-indicator-ripple']\" materializeRipple [isRippleActive]=\"!disabled\" [rippleDuration]=\"200\"></div>\n  </div>\n  <div [ngClass]=\"[prefix + '-checkbox-label']\">\n    <ng-content></ng-content>\n  </div>\n\n  <input type=\"checkbox\" [disabled]=\"disabled\" [attr.id]=\"id\" [name]=\"name\" [required]=\"required\" [checked]=\"value\" [indeterminate]=\"indeterminate\" [value]=\"value\" />\n</div>\n  "
                    }] }
        ];
        /** @nocollapse */
        CheckboxComponent.ctorParameters = function () { return []; };
        CheckboxComponent.propDecorators = {
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            id: [{ type: core.Input }],
            indeterminate: [{ type: core.Input }],
            name: [{ type: core.Input }],
            required: [{ type: core.Input }],
            value: [{ type: core.Input }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }]
        };
        return CheckboxComponent;
    }());
    if (false) {
        /** @type {?} */
        CheckboxComponent.defaultProps;
        /** @type {?} */
        CheckboxComponent.prototype.className;
        /** @type {?} */
        CheckboxComponent.prototype.disabled;
        /** @type {?} */
        CheckboxComponent.prototype.id;
        /** @type {?} */
        CheckboxComponent.prototype.indeterminate;
        /** @type {?} */
        CheckboxComponent.prototype.name;
        /** @type {?} */
        CheckboxComponent.prototype.required;
        /** @type {?} */
        CheckboxComponent.prototype.value;
        /** @type {?} */
        CheckboxComponent.prototype.onChangeEmitter;
        /** @type {?} */
        CheckboxComponent.prototype.prefix;
        /** @type {?} */
        CheckboxComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/checkbox/checkbox.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeCheckboxModule = /** @class */ (function () {
        function MaterializeCheckboxModule() {
        }
        MaterializeCheckboxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [CheckboxComponent],
                        exports: [CheckboxComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeCheckboxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/checkbox/checkbox.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function CheckboxModel() { }
    if (false) {
        /** @type {?} */
        CheckboxModel.prototype.className;
        /** @type {?} */
        CheckboxModel.prototype.disabled;
        /** @type {?} */
        CheckboxModel.prototype.id;
        /** @type {?} */
        CheckboxModel.prototype.indeterminate;
        /** @type {?} */
        CheckboxModel.prototype.name;
        /** @type {?} */
        CheckboxModel.prototype.required;
        /** @type {?} */
        CheckboxModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/collapsible/collapsible.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function CollapsibleModel() { }
    if (false) {
        /** @type {?} */
        CollapsibleModel.prototype.className;
        /** @type {?} */
        CollapsibleModel.prototype.disabled;
        /** @type {?} */
        CollapsibleModel.prototype.showIndicator;
        /** @type {?} */
        CollapsibleModel.prototype.isOpen;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/input/input.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function InputModel() { }
    if (false) {
        /** @type {?} */
        InputModel.prototype.autocomplete;
        /** @type {?} */
        InputModel.prototype.className;
        /** @type {?} */
        InputModel.prototype.disabled;
        /** @type {?} */
        InputModel.prototype.floatLabel;
        /** @type {?} */
        InputModel.prototype.id;
        /** @type {?} */
        InputModel.prototype.hasCounter;
        /** @type {?} */
        InputModel.prototype.name;
        /** @type {?} */
        InputModel.prototype.maxLength;
        /** @type {?} */
        InputModel.prototype.placeholder;
        /** @type {?} */
        InputModel.prototype.required;
        /** @type {?} */
        InputModel.prototype.type;
        /** @type {?} */
        InputModel.prototype.value;
    }
    /** @enum {string} */
    var INPUT_TYPE = {
        PASSWORD: "password",
        TEXT: "text",
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/datepicker/datepicker.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatePickerComponent = /** @class */ (function () {
        function DatePickerComponent() {
            this.className = DatePickerComponent.defaultProps.className;
            this.disabled = DatePickerComponent.defaultProps.disabled;
            this.displayOtherMonthDays = DatePickerComponent.defaultProps.displayOtherMonthDays;
            this.floatLabel = DatePickerComponent.defaultProps.floatLabel;
            this.format = DatePickerComponent.defaultProps.format;
            this.fullSize = DatePickerComponent.defaultProps.fullSize;
            this.id = DatePickerComponent.defaultProps.id;
            this.name = DatePickerComponent.defaultProps.name;
            this.placeholder = DatePickerComponent.defaultProps.placeholder;
            this.required = DatePickerComponent.defaultProps.required;
            this.inputValue = DatePickerComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isOpen = false;
            this.close = this.close.bind(this);
        }
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // this.date = this.buildDate(this.inputValue);
        };
        /**
         * @param {?} selectedDate
         * @return {?}
         */
        DatePickerComponent.prototype.onSelectDay = /**
         * @param {?} selectedDate
         * @return {?}
         */
        function (selectedDate) {
            this.isOpen = false;
            this.date = selectedDate.date;
            this.inputValue = this.formatDate(selectedDate.date);
            this.onChange(selectedDate.date);
        };
        /**
         * @param {?} date
         * @return {?}
         */
        DatePickerComponent.prototype.formatDate = /**
         * @param {?} date
         * @return {?}
         */
        function (date) {
            /** @type {?} */
            var day = date.getDate();
            /** @type {?} */
            var month = date.getMonth() + 1;
            /** @type {?} */
            var dayString = day < 10
                ? "0" + day
                : day.toString();
            /** @type {?} */
            var monthString = month < 10
                ? "0" + month
                : month.toString();
            /** @type {?} */
            var yearString = date.getFullYear().toString();
            /** @type {?} */
            var formatedDate = this.format
                .replace('dd', dayString)
                .replace('mm', monthString)
                .replace('yyyy', yearString);
            return formatedDate;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DatePickerComponent.prototype.buildDate = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var dayStartPosition = this.format.indexOf(DatePickerComponent.DAY_KEY);
            /** @type {?} */
            var monthStartPosition = this.format.indexOf(DatePickerComponent.MONTH_KEY);
            /** @type {?} */
            var yearStartPosition = this.format.indexOf(DatePickerComponent.YEAR_KEY);
            if (dayStartPosition >= 0 && monthStartPosition >= 0 && yearStartPosition >= 0) {
                /** @type {?} */
                var dayEndPosition = dayStartPosition + DatePickerComponent.DAY_KEY.length;
                /** @type {?} */
                var monthEndPosition = monthStartPosition + DatePickerComponent.MONTH_KEY.length;
                /** @type {?} */
                var yearEndPosition = yearStartPosition + DatePickerComponent.YEAR_KEY.length;
                /** @type {?} */
                var dayString = value.substring(dayStartPosition, dayEndPosition);
                /** @type {?} */
                var monthString = value.substring(monthStartPosition, monthEndPosition);
                /** @type {?} */
                var yearString = value.substring(yearStartPosition, yearEndPosition);
                if (dayString && monthString && yearString) {
                    /** @type {?} */
                    var day = Number(dayString);
                    /** @type {?} */
                    var month = Number(monthString) - 1;
                    /** @type {?} */
                    var year = Number(yearString);
                    return new Date(year, month, day);
                }
            }
            return new Date();
        };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.isOpen = true;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.backdropRef.nativeElement.addEventListener('click', _this.close);
            }), 0);
        };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            this.isOpen = false;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DatePickerComponent.prototype.onInputChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.date = this.buildDate(value);
            this.onChange(this.date);
        };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.onInputFocus = /**
         * @return {?}
         */
        function () {
            this.onTouched();
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        DatePickerComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DatePickerComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.date = value;
            this.inputValue = this.formatDate(value);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DatePickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        DatePickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        DatePickerComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
        };
        /**
         * @return {?}
         */
        DatePickerComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        DatePickerComponent.DAY_KEY = 'dd';
        DatePickerComponent.MONTH_KEY = 'mm';
        DatePickerComponent.YEAR_KEY = 'yyyy';
        DatePickerComponent.defaultProps = {
            autocomplete: 'none',
            className: '',
            date: new Date(),
            disabled: false,
            displayOtherMonthDays: true,
            floatLabel: '',
            format: 'dd-mm-yyyy',
            fullSize: false,
            hasCounter: false,
            id: null,
            maxLength: 500,
            name: '',
            placeholder: '',
            required: false,
            type: INPUT_TYPE.TEXT,
            value: ''
        };
        DatePickerComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return DatePickerComponent; }))
                            }],
                        selector: config.components.prefix + "-datepicker }",
                        template: "<div [ngClass]=\"[prefix + '-datepicker', className]\" [class.full-size]=\"fullSize\">\n  <div #backdrop *ngIf=\"isOpen\" [ngClass]=\"prefix + '-datepicker-backdrop'\"></div>\n\n  <materialize-input\n    [disabled]=\"disabled\"\n    [floatLabel]=\"floatLabel\"\n    [id]=\"id\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [value]=\"inputValue\"\n\n    (onChange)=\"onInputChange($event)\"\n    (onFocus)=\"onInputFocus()\"\n  >\n    <materialize-button (onClick)=\"open()\"\n      materializeSuffix\n      [className]=\"prefix + '-datepicker-button'\"\n      [disabled]=\"disabled\"\n    >\n      <materialize-icon [className]=\"prefix + '-datepicker-button'\">calendar_today</materialize-icon>\n    </materialize-button>\n  </materialize-input>\n\n  <materialize-calendar *ngIf=\"isOpen\"\n    [className]=\"prefix + '-datepicker-calendar'\"\n    [date]=\"date\"\n    (onSelectDay)=\"onSelectDay($event)\">\n  </materialize-calendar>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        DatePickerComponent.ctorParameters = function () { return []; };
        DatePickerComponent.propDecorators = {
            backdropRef: [{ type: core.ViewChild, args: ['backdrop', { static: false },] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            displayOtherMonthDays: [{ type: core.Input }],
            floatLabel: [{ type: core.Input }],
            format: [{ type: core.Input }],
            fullSize: [{ type: core.Input }],
            id: [{ type: core.Input }],
            name: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            required: [{ type: core.Input }],
            inputValue: [{ type: core.Input }]
        };
        return DatePickerComponent;
    }());
    if (false) {
        /** @type {?} */
        DatePickerComponent.DAY_KEY;
        /** @type {?} */
        DatePickerComponent.MONTH_KEY;
        /** @type {?} */
        DatePickerComponent.YEAR_KEY;
        /** @type {?} */
        DatePickerComponent.defaultProps;
        /** @type {?} */
        DatePickerComponent.prototype.backdropRef;
        /** @type {?} */
        DatePickerComponent.prototype.className;
        /** @type {?} */
        DatePickerComponent.prototype.disabled;
        /** @type {?} */
        DatePickerComponent.prototype.displayOtherMonthDays;
        /** @type {?} */
        DatePickerComponent.prototype.floatLabel;
        /** @type {?} */
        DatePickerComponent.prototype.format;
        /** @type {?} */
        DatePickerComponent.prototype.fullSize;
        /** @type {?} */
        DatePickerComponent.prototype.id;
        /** @type {?} */
        DatePickerComponent.prototype.name;
        /** @type {?} */
        DatePickerComponent.prototype.placeholder;
        /** @type {?} */
        DatePickerComponent.prototype.required;
        /** @type {?} */
        DatePickerComponent.prototype.inputValue;
        /** @type {?} */
        DatePickerComponent.prototype.prefix;
        /** @type {?} */
        DatePickerComponent.prototype.date;
        /** @type {?} */
        DatePickerComponent.prototype.isOpen;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/input/input.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputComponent = /** @class */ (function () {
        function InputComponent() {
            this.autocomplete = InputComponent.defaultProps.autocomplete;
            this.className = InputComponent.defaultProps.className;
            this.disabled = InputComponent.defaultProps.disabled;
            this.floatLabel = InputComponent.defaultProps.floatLabel;
            this.hasCounter = InputComponent.defaultProps.hasCounter;
            this.id = InputComponent.defaultProps.id;
            this.maxLength = InputComponent.defaultProps.maxLength;
            this.name = InputComponent.defaultProps.name;
            this.placeholder = InputComponent.defaultProps.placeholder;
            this.required = InputComponent.defaultProps.required;
            this.type = InputComponent.defaultProps.type;
            this.value = InputComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.onBlurEmitter = new core.EventEmitter();
            this.onChangeEmitter = new core.EventEmitter();
            this.onFocusEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        InputComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.onBlurEmitter.emit();
            this.isFocused = false;
        };
        /**
         * @return {?}
         */
        InputComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
                this.onFocusEmitter.emit();
                this.onTouched();
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        InputComponent.prototype.onChange = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var value = event.target.value;
            this.value = value;
            this.onChangeEmitter.emit(this.value);
            this.onInputChange(value);
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        InputComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        InputComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        InputComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onInputChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        InputComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        InputComponent.prototype.onInputChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) { };
        /**
         * @return {?}
         */
        InputComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        InputComponent.defaultProps = {
            autocomplete: 'none',
            className: '',
            disabled: false,
            floatLabel: '',
            hasCounter: false,
            id: null,
            maxLength: 500,
            name: '',
            placeholder: '',
            required: false,
            type: INPUT_TYPE.TEXT,
            value: ''
        };
        InputComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return InputComponent; }))
                            }],
                        selector: config.components.prefix + "-input }",
                        template: "<div\n  [ngClass]=\"[prefix + '-form-control-container', className]\"\n  [class.float-label]=\"floatLabel\"\n  [class.active]=\"value || placeholder\"\n  [class.focused]=\"isFocused\"\n  [class.disabled]=\"disabled\"\n>\n  <div [ngClass]=\"prefix + '-form-control-prefix'\">\n    <ng-content select=\"[materializePrefix]\"></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n    <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n    <input (input)=\"onChange($event)\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n      [ngClass]=\"prefix + '-form-control'\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [attr.id]=\"id\"\n      [maxLength]=\"maxLength\"\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [type]=\"type\"\n      [value]=\"value\"\n    />\n  </div>\n\n  <div [ngClass]=\"prefix + '-form-control-suffix'\">\n    <ng-content select=\"[materializeSuffix]\"></ng-content>\n  </div>\n</div>\n\n<materialize-form-message type=\"info\" *ngIf=\"hasCounter\">{{ value.length }} / {{ maxLength }}</materialize-form-message>\n"
                    }] }
        ];
        /** @nocollapse */
        InputComponent.ctorParameters = function () { return []; };
        InputComponent.propDecorators = {
            onFocusEmitter: [{ type: core.Output, args: ['onFocus',] }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }],
            onBlurEmitter: [{ type: core.Output, args: ['onBlur',] }],
            autocomplete: [{ type: core.Input }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            floatLabel: [{ type: core.Input }],
            hasCounter: [{ type: core.Input }],
            id: [{ type: core.Input }],
            maxLength: [{ type: core.Input }],
            name: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            required: [{ type: core.Input }],
            type: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return InputComponent;
    }());
    if (false) {
        /** @type {?} */
        InputComponent.defaultProps;
        /** @type {?} */
        InputComponent.prototype.onFocusEmitter;
        /** @type {?} */
        InputComponent.prototype.onChangeEmitter;
        /** @type {?} */
        InputComponent.prototype.onBlurEmitter;
        /** @type {?} */
        InputComponent.prototype.autocomplete;
        /** @type {?} */
        InputComponent.prototype.className;
        /** @type {?} */
        InputComponent.prototype.disabled;
        /** @type {?} */
        InputComponent.prototype.floatLabel;
        /** @type {?} */
        InputComponent.prototype.hasCounter;
        /** @type {?} */
        InputComponent.prototype.id;
        /** @type {?} */
        InputComponent.prototype.maxLength;
        /** @type {?} */
        InputComponent.prototype.name;
        /** @type {?} */
        InputComponent.prototype.placeholder;
        /** @type {?} */
        InputComponent.prototype.required;
        /** @type {?} */
        InputComponent.prototype.type;
        /** @type {?} */
        InputComponent.prototype.value;
        /** @type {?} */
        InputComponent.prototype.prefix;
        /** @type {?} */
        InputComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/form-message/form-message.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function FormMessageModel() { }
    if (false) {
        /** @type {?} */
        FormMessageModel.prototype.className;
        /** @type {?} */
        FormMessageModel.prototype.level;
    }
    /** @enum {string} */
    var FORM_MESSAGE_LEVELS = {
        ERROR: "error",
        INFO: "info",
        SUCCESS: "success",
        WARNING: "warning",
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/form-message/form-message.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormMessageComponent = /** @class */ (function () {
        function FormMessageComponent() {
            this.className = FormMessageComponent.defaultProps.className;
            this.level = FormMessageComponent.defaultProps.level;
            this.prefix = config.components.prefix;
        }
        FormMessageComponent.defaultProps = {
            className: '',
            level: FORM_MESSAGE_LEVELS.INFO
        };
        FormMessageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-form-message }",
                        template: "<div [ngClass]=\"[prefix + '-form-message', className, level]\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        FormMessageComponent.propDecorators = {
            className: [{ type: core.Input, args: ['className',] }],
            level: [{ type: core.Input, args: ['type',] }]
        };
        return FormMessageComponent;
    }());
    if (false) {
        /** @type {?} */
        FormMessageComponent.defaultProps;
        /** @type {?} */
        FormMessageComponent.prototype.className;
        /** @type {?} */
        FormMessageComponent.prototype.level;
        /** @type {?} */
        FormMessageComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/form-message/form-message.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeFormMessageModule = /** @class */ (function () {
        function MaterializeFormMessageModule() {
        }
        MaterializeFormMessageModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FormMessageComponent],
                        exports: [FormMessageComponent],
                        imports: [common.CommonModule]
                    },] }
        ];
        return MaterializeFormMessageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/input/input.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeInputModule = /** @class */ (function () {
        function MaterializeInputModule() {
        }
        MaterializeInputModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [InputComponent],
                        exports: [InputComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule,
                            MaterializeIconModule,
                            MaterializeFormMessageModule
                        ]
                    },] }
        ];
        return MaterializeInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/datepicker/datepicker.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeDatePickerModule = /** @class */ (function () {
        function MaterializeDatePickerModule() {
        }
        MaterializeDatePickerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [DatePickerComponent],
                        exports: [DatePickerComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeButtonModule,
                            MaterializeCalendarModule,
                            MaterializeIconModule,
                            MaterializeInputModule
                        ]
                    },] }
        ];
        return MaterializeDatePickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/datepicker/datepicker.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function DatePickerModel() { }
    if (false) {
        /** @type {?} */
        DatePickerModel.prototype.date;
        /** @type {?} */
        DatePickerModel.prototype.format;
        /** @type {?} */
        DatePickerModel.prototype.fullSize;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/drawer/drawer.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    var DrawerModel = /** @class */ (function () {
        function DrawerModel() {
        }
        return DrawerModel;
    }());
    if (false) {
        /** @type {?} */
        DrawerModel.prototype.className;
        /** @type {?} */
        DrawerModel.prototype.closeOnBackdrop;
        /** @type {?} */
        DrawerModel.prototype.hasBackdrop;
        /** @type {?} */
        DrawerModel.prototype.isOpen;
        /** @type {?} */
        DrawerModel.prototype.position;
        /** @type {?} */
        DrawerModel.prototype.transitionDuration;
        /** @type {?} */
        DrawerModel.prototype.type;
    }
    /** @enum {string} */
    var DRAWER_POSITIONS = {
        RIGHT: "right",
        LEFT: "left",
    };
    /** @enum {string} */
    var DRAWER_TYPES = {
        OVER: "over",
        PUSH: "push",
        STATIC: "static",
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/drawer/drawer.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DrawerComponent = /** @class */ (function () {
        function DrawerComponent(renderer) {
            this.renderer = renderer;
            this.className = DrawerComponent.defaultProps.className;
            this.closeOnBackdrop = DrawerComponent.defaultProps.closeOnBackdrop;
            this.hasBackdrop = DrawerComponent.defaultProps.hasBackdrop;
            this.isOpen = DrawerComponent.defaultProps.isOpen;
            this.position = DrawerComponent.defaultProps.position;
            this.transitionDuration = DrawerComponent.defaultProps.transitionDuration;
            this.type = DrawerComponent.defaultProps.type;
            this.prefix = config.components.prefix;
            this.close = this.close.bind(this);
            this.closeByBackdrop = this.closeByBackdrop.bind(this);
            this.open = this.open.bind(this);
            this.onOpenEmitter = new core.EventEmitter();
            this.onCloseEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        DrawerComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.renderer.setStyle(_this.drawerRef.nativeElement, 'transitionDuration', _this.transitionDuration + "ms");
                if (_this.closeOnBackdrop) {
                    _this.backdropRef.nativeElement.addEventListener('click', _this.closeByBackdrop);
                }
            }), 0);
        };
        /**
         * @return {?}
         */
        DrawerComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.type !== DRAWER_TYPES.STATIC) {
                this.renderer.setStyle(this.backdropRef.nativeElement, 'display', 'block');
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.isOpen = true;
                }), 0);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        DrawerComponent.prototype.closeByBackdrop = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.target === this.backdropRef.nativeElement) {
                this.close();
            }
        };
        /**
         * @return {?}
         */
        DrawerComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.isOpen = false;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.renderer.setStyle(_this.backdropRef.nativeElement, 'display', 'none');
                _this.onCloseEmitter.emit();
            }), this.transitionDuration);
        };
        DrawerComponent.defaultProps = {
            className: '',
            closeOnBackdrop: true,
            hasBackdrop: true,
            isOpen: false,
            position: DRAWER_POSITIONS.LEFT,
            transitionDuration: 250,
            type: DRAWER_TYPES.OVER
        };
        DrawerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-drawer }",
                        template: "<div #drawer\n  [ngClass]=\"[prefix + '-drawer', className, type, position]\"\n  [class.open]=\"isOpen\"\n  [class.backdrop]=\"hasBackdrop\"\n>\n  <div [ngClass]=\"prefix + '-drawer-backdrop'\" #backdrop></div>\n\n  <div [ngClass]=\"prefix + '-drawer-content'\">\n    <ng-content select=\"materialize-drawer-content\"></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-drawer-container'\">\n    <ng-content select=\"materialize-drawer-container\"></ng-content>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        DrawerComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        DrawerComponent.propDecorators = {
            backdropRef: [{ type: core.ViewChild, args: ['backdrop', { static: true },] }],
            drawerRef: [{ type: core.ViewChild, args: ['drawer', { static: true },] }],
            onOpenEmitter: [{ type: core.Output, args: ['onOpen',] }],
            onCloseEmitter: [{ type: core.Output, args: ['onClose',] }],
            className: [{ type: core.Input }],
            closeOnBackdrop: [{ type: core.Input }],
            hasBackdrop: [{ type: core.Input }],
            isOpen: [{ type: core.Input }],
            position: [{ type: core.Input }],
            transitionDuration: [{ type: core.Input }],
            type: [{ type: core.Input }]
        };
        return DrawerComponent;
    }());
    if (false) {
        /** @type {?} */
        DrawerComponent.defaultProps;
        /** @type {?} */
        DrawerComponent.prototype.backdropRef;
        /** @type {?} */
        DrawerComponent.prototype.drawerRef;
        /** @type {?} */
        DrawerComponent.prototype.onOpenEmitter;
        /** @type {?} */
        DrawerComponent.prototype.onCloseEmitter;
        /** @type {?} */
        DrawerComponent.prototype.className;
        /** @type {?} */
        DrawerComponent.prototype.closeOnBackdrop;
        /** @type {?} */
        DrawerComponent.prototype.hasBackdrop;
        /** @type {?} */
        DrawerComponent.prototype.isOpen;
        /** @type {?} */
        DrawerComponent.prototype.position;
        /** @type {?} */
        DrawerComponent.prototype.transitionDuration;
        /** @type {?} */
        DrawerComponent.prototype.type;
        /** @type {?} */
        DrawerComponent.prototype.prefix;
        /**
         * @type {?}
         * @private
         */
        DrawerComponent.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/drawer/drawer-container/drawer-container.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DrawerContainerComponent = /** @class */ (function () {
        function DrawerContainerComponent() {
        }
        DrawerContainerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-drawer-container }",
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        return DrawerContainerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/drawer/drawer-content/drawer-content.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DrawerContentComponent = /** @class */ (function () {
        function DrawerContentComponent() {
        }
        DrawerContentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-drawer-content }",
                        template: "<ng-content></ng-content>    \n"
                    }] }
        ];
        return DrawerContentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/drawer/drawer.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeDrawerModule = /** @class */ (function () {
        function MaterializeDrawerModule() {
        }
        MaterializeDrawerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DrawerComponent,
                            DrawerContainerComponent,
                            DrawerContentComponent
                        ],
                        exports: [
                            DrawerComponent,
                            DrawerContainerComponent,
                            DrawerContentComponent
                        ],
                        imports: [
                            common.CommonModule
                        ]
                    },] }
        ];
        return MaterializeDrawerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/utils/get-offset-top.util.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /** @type {?} */
    var getOffseTop = (/**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var offsetTop = 0;
        /** @type {?} */
        var nextElement = element;
        while (nextElement.offsetParent) {
            if (!isNaN(nextElement.offsetTop)) {
                offsetTop += nextElement.offsetTop;
            }
            nextElement = (/** @type {?} */ (nextElement.offsetParent));
        }
        return offsetTop;
    });

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/glossary/glossary-item/glossary-item.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlossaryItemComponent = /** @class */ (function () {
        function GlossaryItemComponent() {
            this.className = GlossaryItemComponent.defaultProps.className;
            this.referenceId = GlossaryItemComponent.defaultProps.referenceId;
            this.prefix = config.components.prefix;
            this.isActive = false;
            this.onClickEmitter = new core.EventEmitter();
        }
        /**
         * @param {?} event
         * @return {?}
         */
        GlossaryItemComponent.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.onClickEmitter.emit(this.referenceId);
        };
        GlossaryItemComponent.defaultProps = {
            className: '',
            referenceId: ''
        };
        GlossaryItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-glossary-item",
                        template: "<li\n  [ngClass]=\"[prefix + '-glossary-item', className]\"\n  [class.active]=\"isActive\"\n>\n  <ng-content></ng-content>\n</li>\n"
                    }] }
        ];
        /** @nocollapse */
        GlossaryItemComponent.ctorParameters = function () { return []; };
        GlossaryItemComponent.propDecorators = {
            onClickEmitter: [{ type: core.Output, args: ['onClick',] }],
            className: [{ type: core.Input }],
            referenceId: [{ type: core.Input }],
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return GlossaryItemComponent;
    }());
    if (false) {
        /** @type {?} */
        GlossaryItemComponent.defaultProps;
        /** @type {?} */
        GlossaryItemComponent.prototype.onClickEmitter;
        /** @type {?} */
        GlossaryItemComponent.prototype.className;
        /** @type {?} */
        GlossaryItemComponent.prototype.referenceId;
        /** @type {?} */
        GlossaryItemComponent.prototype.prefix;
        /** @type {?} */
        GlossaryItemComponent.prototype.isActive;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/glossary/glossary.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlossaryComponent = /** @class */ (function () {
        function GlossaryComponent(router) {
            this.router = router;
            this.className = GlossaryComponent.defaultProps.className;
            this.scrollSpy = GlossaryComponent.defaultProps.scrollSpy;
            this.topSpace = GlossaryComponent.defaultProps.topSpace;
            this.prefix = config.components.prefix;
            this.activeReferenceId = '';
            this.onClickItem = this.onClickItem.bind(this);
            this.registerOptions = this.registerOptions.bind(this);
            this.update = this.update.bind(this);
        }
        /**
         * @return {?}
         */
        GlossaryComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.registerOptions();
            setTimeout(this.update, 30);
            if (this.scrollSpy) {
                this.scrollSpy.onChangeEmitter.subscribe((/**
                 * @param {?} referenceId
                 * @return {?}
                 */
                function (referenceId) {
                    _this.activeReferenceId = referenceId;
                    _this.activeItemByReferenceId(referenceId);
                }));
            }
        };
        /**
         * @return {?}
         */
        GlossaryComponent.prototype.update = /**
         * @return {?}
         */
        function () {
            this.activeReferenceId = this.getActiveReferenceId();
            this.activeItemByReferenceId(this.activeReferenceId);
            this.scrollTo(this.activeReferenceId);
        };
        /**
         * @param {?} referenceId
         * @return {?}
         */
        GlossaryComponent.prototype.scrollTo = /**
         * @param {?} referenceId
         * @return {?}
         */
        function (referenceId) {
            /** @type {?} */
            var element = document.getElementById(referenceId);
            if (element) {
                /** @type {?} */
                var elementOffsetTop = getOffseTop(element);
                /** @type {?} */
                var scrollTop_1 = elementOffsetTop - this.topSpace;
                setTimeout((/**
                 * @return {?}
                 */
                function () { return window.scrollTo(0, scrollTop_1); }), 150);
            }
        };
        /**
         * @return {?}
         */
        GlossaryComponent.prototype.getActiveReferenceId = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var routerTree = this.router.parseUrl(this.router.url);
            if (routerTree && routerTree.fragment) {
                return routerTree.fragment;
            }
            return '';
        };
        /**
         * @return {?}
         */
        GlossaryComponent.prototype.registerOptions = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.onClickEmitter.subscribe(_this.onClickItem);
            }));
        };
        /**
         * @param {?} referenceId
         * @return {?}
         */
        GlossaryComponent.prototype.onClickItem = /**
         * @param {?} referenceId
         * @return {?}
         */
        function (referenceId) {
            this.activeReferenceId = referenceId;
            this.activeItemByReferenceId(referenceId);
            this.scrollTo(referenceId);
            /** @type {?} */
            var routerTree = this.router.parseUrl(this.router.url);
            var primary = routerTree.root.children.primary;
            /** @type {?} */
            var urlWithoutParams = primary
                ? primary.segments.map((/**
                 * @param {?} segment
                 * @return {?}
                 */
                function (segment) { return segment.path; }))
                : routerTree.root.segments.map((/**
                 * @param {?} segment
                 * @return {?}
                 */
                function (segment) { return segment.path; }));
            this.router.navigate(urlWithoutParams, { fragment: referenceId });
        };
        /**
         * @param {?} referenceId
         * @return {?}
         */
        GlossaryComponent.prototype.activeItemByReferenceId = /**
         * @param {?} referenceId
         * @return {?}
         */
        function (referenceId) {
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.isActive = item.referenceId === referenceId;
            }));
        };
        GlossaryComponent.defaultProps = {
            className: '',
            scrollSpy: null,
            topSpace: 0
        };
        GlossaryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-glossary",
                        template: "<ul [ngClass]=\"className\">\n  <ng-content></ng-content>\n</ul>\n"
                    }] }
        ];
        /** @nocollapse */
        GlossaryComponent.ctorParameters = function () { return [
            { type: router.Router }
        ]; };
        GlossaryComponent.propDecorators = {
            items: [{ type: core.ContentChildren, args: [GlossaryItemComponent,] }],
            className: [{ type: core.Input }],
            scrollSpy: [{ type: core.Input }],
            topSpace: [{ type: core.Input }]
        };
        return GlossaryComponent;
    }());
    if (false) {
        /** @type {?} */
        GlossaryComponent.defaultProps;
        /** @type {?} */
        GlossaryComponent.prototype.items;
        /** @type {?} */
        GlossaryComponent.prototype.className;
        /** @type {?} */
        GlossaryComponent.prototype.scrollSpy;
        /** @type {?} */
        GlossaryComponent.prototype.topSpace;
        /** @type {?} */
        GlossaryComponent.prototype.prefix;
        /** @type {?} */
        GlossaryComponent.prototype.activeReferenceId;
        /**
         * @type {?}
         * @private
         */
        GlossaryComponent.prototype.router;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/scroll-spy/scroll-spy-item/scroll-spy-item.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScrollSpyItemComponent = /** @class */ (function () {
        function ScrollSpyItemComponent(element) {
            this.element = element;
            this.className = ScrollSpyItemComponent.defaultProps.className;
            this.id = ScrollSpyItemComponent.defaultProps.id;
        }
        ScrollSpyItemComponent.defaultProps = {
            className: '',
            id: ''
        };
        ScrollSpyItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-scroll-spy-item",
                        template: "<div [attr.id]=\"id\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ScrollSpyItemComponent.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        ScrollSpyItemComponent.propDecorators = {
            className: [{ type: core.Input }],
            id: [{ type: core.Input }]
        };
        return ScrollSpyItemComponent;
    }());
    if (false) {
        /** @type {?} */
        ScrollSpyItemComponent.defaultProps;
        /** @type {?} */
        ScrollSpyItemComponent.prototype.className;
        /** @type {?} */
        ScrollSpyItemComponent.prototype.id;
        /** @type {?} */
        ScrollSpyItemComponent.prototype.element;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/utils/window-scroll-position.util.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /** @type {?} */
    var windowScrollPosition = (/**
     * @return {?}
     */
    function () {
        if (window.pageYOffset) {
            return window.pageYOffset;
        }
        return document.body.scrollTop;
    });

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/scroll-spy/scroll-spy.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ScrollSpyComponent = /** @class */ (function () {
        function ScrollSpyComponent() {
            this.className = ScrollSpyComponent.defaultProps.className;
            this.itemId = ScrollSpyComponent.defaultProps.itemId;
            this.onChangeEmitter = new core.EventEmitter();
            this.onScroll = this.onScroll.bind(this);
            this.validateScroll = this.validateScroll.bind(this);
            window.addEventListener('scroll', this.onScroll);
        }
        /**
         * @return {?}
         */
        ScrollSpyComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.onScroll();
        };
        /**
         * @return {?}
         */
        ScrollSpyComponent.prototype.onScroll = /**
         * @return {?}
         */
        function () {
            setTimeout(this.validateScroll, 100);
        };
        /**
         * @return {?}
         */
        ScrollSpyComponent.prototype.validateScroll = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var item = this.getCurrentItem();
            if (this.itemId !== item.id) {
                this.itemId = item.id;
                this.onChangeEmitter.emit(this.itemId);
            }
        };
        /**
         * @return {?}
         */
        ScrollSpyComponent.prototype.getCurrentItem = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var items = this.items.toArray();
            for (var i = 0; i < items.length; i++) {
                /** @type {?} */
                var elementOffsetTop = getOffseTop(items[i].element.nativeElement);
                if (elementOffsetTop > windowScrollPosition()) {
                    /** @type {?} */
                    var prevItem = items[i - 1]
                        ? items[i - 1]
                        : items[0];
                    return prevItem;
                }
            }
            return items[items.length - 1];
        };
        ScrollSpyComponent.defaultProps = {
            className: '',
            itemId: ''
        };
        ScrollSpyComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-scroll-spy",
                        template: "<div [ngClass]=\"className\">\n  <ng-content select=\"materialize-scroll-spy-item\"></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ScrollSpyComponent.ctorParameters = function () { return []; };
        ScrollSpyComponent.propDecorators = {
            items: [{ type: core.ContentChildren, args: [ScrollSpyItemComponent,] }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }],
            className: [{ type: core.Input }],
            itemId: [{ type: core.Input }]
        };
        return ScrollSpyComponent;
    }());
    if (false) {
        /** @type {?} */
        ScrollSpyComponent.defaultProps;
        /** @type {?} */
        ScrollSpyComponent.prototype.items;
        /** @type {?} */
        ScrollSpyComponent.prototype.onChangeEmitter;
        /** @type {?} */
        ScrollSpyComponent.prototype.className;
        /** @type {?} */
        ScrollSpyComponent.prototype.itemId;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/scroll-spy/scroll-spy.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeScrollSpyModule = /** @class */ (function () {
        function MaterializeScrollSpyModule() {
        }
        MaterializeScrollSpyModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ScrollSpyComponent,
                            ScrollSpyItemComponent
                        ],
                        exports: [
                            ScrollSpyComponent,
                            ScrollSpyItemComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeScrollSpyModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/glossary/glossary.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeGlossaryModule = /** @class */ (function () {
        function MaterializeGlossaryModule() {
        }
        MaterializeGlossaryModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            GlossaryComponent,
                            GlossaryItemComponent
                        ],
                        exports: [
                            GlossaryComponent,
                            GlossaryItemComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeScrollSpyModule
                        ]
                    },] }
        ];
        return MaterializeGlossaryModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/glossary/glossary-item/glossary-item.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function GlossaryItemModel() { }
    if (false) {
        /** @type {?} */
        GlossaryItemModel.prototype.className;
        /** @type {?} */
        GlossaryItemModel.prototype.referenceId;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/glossary/glossary.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function GlossaryModel() { }
    if (false) {
        /** @type {?} */
        GlossaryModel.prototype.className;
        /** @type {?} */
        GlossaryModel.prototype.scrollSpy;
        /** @type {?} */
        GlossaryModel.prototype.topSpace;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/html-visualizer/html-visualizer.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HTMLVisualizerComponent = /** @class */ (function () {
        function HTMLVisualizerComponent(sanitizer) {
            this.sanitizer = sanitizer;
            this.className = HTMLVisualizerComponent.defaultProps.className;
            this.html = HTMLVisualizerComponent.defaultProps.html;
            this.prefix = config.components.prefix;
        }
        /**
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.htmlContent = this.render(this.html);
        };
        /**
         * @param {?} html
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.render = /**
         * @param {?} html
         * @return {?}
         */
        function (html) {
            /** @type {?} */
            var tags = this.splitByTags(html);
            /** @type {?} */
            var lines = [];
            /** @type {?} */
            var depth = 0;
            for (var i = 0; i < tags.length; i++) {
                /** @type {?} */
                var currentTag = tags[i];
                /** @type {?} */
                var nextTag = tags[i + 1];
                /** @type {?} */
                var lastTag = tags[i + 2];
                /** @type {?} */
                var result = this.createLineLogic(currentTag, nextTag, lastTag, depth, i);
                depth = result.depth;
                i = result.cycle;
                lines.push(result.line);
            }
            return lines.join('<br />');
        };
        /**
         * @param {?} content
         * @param {?} className
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.createNode = /**
         * @param {?} content
         * @param {?} className
         * @return {?}
         */
        function (content, className) {
            /** @type {?} */
            var escapedContent = content.replace(/&/g, '&amp;');
            escapedContent = escapedContent.trim();
            escapedContent = escapedContent.replace(/\[\[/g, '&#123&#123;');
            escapedContent = escapedContent.replace(/\]\]/g, '&#125&#125;');
            escapedContent = escapedContent.replace(/</g, '&lt;');
            escapedContent = escapedContent.replace(/>/g, '&gt;');
            escapedContent = escapedContent.replace(/(\S+)="([^']*?)"/g, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) {
                /** @type {?} */
                var value = match.match(/"([^']*?)"/g);
                /** @type {?} */
                var attribute = match.match(/(\S+)=/g);
                /** @type {?} */
                var attributeValidated = (attribute && attribute[0]) || '';
                /** @type {?} */
                var valueValidated = (value && value[0]) || '';
                /** @type {?} */
                var attributeTag = "<span class=\"" + HTMLVisualizerComponent.ATTRIBUTE_CLASS + "\">" + attributeValidated + "</span>";
                /** @type {?} */
                var valueTag = "<span class=\"" + HTMLVisualizerComponent.VALUE_CLASS + "\">" + valueValidated + "</span>";
                return attributeTag + valueTag;
            }));
            escapedContent = escapedContent.replace(/(&lt;\/|&lt;)/g, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) {
                return "<span class=\"" + HTMLVisualizerComponent.SYMBOL_CLASS + "\">&lt;" + (match.includes('/') ? '/' : '') + "</span>";
            }));
            escapedContent = escapedContent.replace(/(\/&gt;|&gt;)/g, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) {
                return "<span class=\"" + HTMLVisualizerComponent.SYMBOL_CLASS + "\">" + (match.includes('/') ? '/' : '') + "&gt;</span>";
            }));
            return "<span class=\"" + className + "\">" + escapedContent + "</span>";
        };
        /**
         * @param {?} depth
         * @param {?} content
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.indentNode = /**
         * @param {?} depth
         * @param {?} content
         * @return {?}
         */
        function (depth, content) {
            /** @type {?} */
            var indentationBase = '&emsp;&emsp;';
            /** @type {?} */
            var indentation = indentationBase.repeat(depth);
            return "" + indentation + content;
        };
        /**
         * @param {?} xml
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.splitByTags = /**
         * @param {?} xml
         * @return {?}
         */
        function (xml) {
            /** @type {?} */
            var tags = xml.split(/(<\/?[^>]+>)/g);
            /** @type {?} */
            var cleanedTags = tags.filter((/**
             * @param {?} line
             * @return {?}
             */
            function (line) { return line.trim() !== ''; }));
            return cleanedTags;
        };
        /**
         * @param {?} contentNode
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.isTag = /**
         * @param {?} contentNode
         * @return {?}
         */
        function (contentNode) {
            return (/<[^>!]+>/).test(contentNode);
        };
        /**
         * @param {?} contentNode
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.isOpeningTag = /**
         * @param {?} contentNode
         * @return {?}
         */
        function (contentNode) {
            if (this.isTag(contentNode) && !this.isClosingTag(contentNode) && !this.isSelfClosingTag(contentNode)) {
                return true;
            }
            return false;
        };
        /**
         * @param {?} contentNode
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.isClosingTag = /**
         * @param {?} contentNode
         * @return {?}
         */
        function (contentNode) {
            return (/<\/+[^>]+>/).test(contentNode);
        };
        /**
         * @param {?} contentNode
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.isSelfClosingTag = /**
         * @param {?} contentNode
         * @return {?}
         */
        function (contentNode) {
            return (/<[^>]+\/>/).test(contentNode);
        };
        /**
         * @param {?} firstTag
         * @param {?} middleTag
         * @param {?} lastTag
         * @param {?} depth
         * @param {?} cycle
         * @return {?}
         */
        HTMLVisualizerComponent.prototype.createLineLogic = /**
         * @param {?} firstTag
         * @param {?} middleTag
         * @param {?} lastTag
         * @param {?} depth
         * @param {?} cycle
         * @return {?}
         */
        function (firstTag, middleTag, lastTag, depth, cycle) {
            if (this.isOpeningTag(firstTag) && this.isClosingTag(middleTag)) {
                /** @type {?} */
                var openNode = this.createNode(firstTag, 'tag');
                /** @type {?} */
                var closeNode = this.createNode(middleTag, 'tag');
                return {
                    cycle: cycle + 1,
                    depth: depth,
                    line: this.indentNode(depth, "" + openNode + closeNode)
                };
            }
            if (this.isOpeningTag(firstTag) && !this.isTag(middleTag)) {
                /** @type {?} */
                var openNode = this.createNode(firstTag, 'tag');
                /** @type {?} */
                var contentNode = this.createNode(middleTag, 'string');
                /** @type {?} */
                var closeNode = this.createNode(lastTag, 'tag');
                return {
                    cycle: cycle + 2,
                    depth: depth,
                    line: this.indentNode(depth, "" + openNode + contentNode + closeNode)
                };
            }
            if (this.isSelfClosingTag(firstTag)) {
                /** @type {?} */
                var selfClosingNode = this.createNode(firstTag, 'tag');
                return {
                    cycle: cycle,
                    depth: depth,
                    line: this.indentNode(depth, selfClosingNode)
                };
            }
            if (this.isClosingTag(firstTag)) {
                /** @type {?} */
                var closeNode = this.createNode(firstTag, 'tag');
                return {
                    cycle: cycle,
                    depth: depth - 1,
                    line: this.indentNode(depth - 1, closeNode)
                };
            }
            return {
                cycle: cycle,
                depth: depth + 1,
                line: this.indentNode(depth, this.createNode(firstTag, 'text'))
            };
        };
        HTMLVisualizerComponent.ATTRIBUTE_CLASS = config.components.prefix + "-html-visualizer-attribute";
        HTMLVisualizerComponent.VALUE_CLASS = config.components.prefix + "-html-visualizer-value";
        HTMLVisualizerComponent.SYMBOL_CLASS = config.components.prefix + "-html-visualizer-symbol";
        HTMLVisualizerComponent.defaultProps = {
            className: '',
            html: ''
        };
        HTMLVisualizerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-html-visualizer",
                        template: "<div [ngClass]=\"prefix + '-html-visualizer'\">\n  <div [ngClass]=\"prefix + '-html-visualizer-content'\" [innerHTML]=\"htmlContent\" ngNonBindable></div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        HTMLVisualizerComponent.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer }
        ]; };
        HTMLVisualizerComponent.propDecorators = {
            className: [{ type: core.Input }],
            html: [{ type: core.Input }]
        };
        return HTMLVisualizerComponent;
    }());
    if (false) {
        /** @type {?} */
        HTMLVisualizerComponent.ATTRIBUTE_CLASS;
        /** @type {?} */
        HTMLVisualizerComponent.VALUE_CLASS;
        /** @type {?} */
        HTMLVisualizerComponent.SYMBOL_CLASS;
        /** @type {?} */
        HTMLVisualizerComponent.defaultProps;
        /** @type {?} */
        HTMLVisualizerComponent.prototype.className;
        /** @type {?} */
        HTMLVisualizerComponent.prototype.html;
        /** @type {?} */
        HTMLVisualizerComponent.prototype.htmlContent;
        /** @type {?} */
        HTMLVisualizerComponent.prototype.prefix;
        /**
         * @type {?}
         * @private
         */
        HTMLVisualizerComponent.prototype.sanitizer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/html-visualizer/html-visualizer.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeHTMLVisualizerModule = /** @class */ (function () {
        function MaterializeHTMLVisualizerModule() {
        }
        MaterializeHTMLVisualizerModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [HTMLVisualizerComponent],
                        exports: [HTMLVisualizerComponent],
                        imports: [common.CommonModule]
                    },] }
        ];
        return MaterializeHTMLVisualizerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/html-visualizer/html-visualizer.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function HTMLVisualizerModel() { }
    if (false) {
        /** @type {?} */
        HTMLVisualizerModel.prototype.className;
        /** @type {?} */
        HTMLVisualizerModel.prototype.html;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/label/label.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LabelComponent = /** @class */ (function () {
        function LabelComponent() {
            this.className = LabelComponent.defaultProps.className;
            this.prefix = config.components.prefix;
        }
        LabelComponent.defaultProps = {
            className: ''
        };
        LabelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-label }",
                        template: "<label [ngClass]=\"[prefix + '-label', className]\">\n  <ng-content></ng-content>\n</label>\n"
                    }] }
        ];
        LabelComponent.propDecorators = {
            className: [{ type: core.Input }]
        };
        return LabelComponent;
    }());
    if (false) {
        /** @type {?} */
        LabelComponent.defaultProps;
        /** @type {?} */
        LabelComponent.prototype.className;
        /** @type {?} */
        LabelComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/label/label.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeLabelModule = /** @class */ (function () {
        function MaterializeLabelModule() {
        }
        MaterializeLabelModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [LabelComponent],
                        exports: [LabelComponent],
                        imports: [common.CommonModule]
                    },] }
        ];
        return MaterializeLabelModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/label/label.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function LabelModel() { }
    if (false) {
        /** @type {?} */
        LabelModel.prototype.className;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/modal/modal.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ModalComponent = /** @class */ (function () {
        function ModalComponent() {
            this.className = ModalComponent.defaultProps.className;
            this.dismissOnBackdrop = ModalComponent.defaultProps.dismissOnBackdrop;
            this.hasBackdrop = ModalComponent.defaultProps.hasBackdrop;
            this.hasCloseButton = ModalComponent.defaultProps.hasCloseButton;
            this.isOpen = ModalComponent.defaultProps.isOpen;
            this.transitionDuration = ModalComponent.defaultProps.transitionDuration;
            this.prefix = config.components.prefix;
            this.onOpenEmitter = new core.EventEmitter();
            this.onCloseEmitter = new core.EventEmitter();
            this.open = this.open.bind(this);
            this.close = this.close.bind(this);
            this.closeByBackdrop = this.closeByBackdrop.bind(this);
        }
        /**
         * @return {?}
         */
        ModalComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.hasBackdrop && this.dismissOnBackdrop) {
                this.backdropRef.nativeElement.addEventListener('click', this.closeByBackdrop);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        ModalComponent.prototype.closeByBackdrop = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var target = event.target;
            var nativeElement = this.backdropRef.nativeElement;
            if (target === nativeElement) {
                this.close();
            }
        };
        /**
         * @return {?}
         */
        ModalComponent.prototype.open = /**
         * @return {?}
         */
        function () {
            this.modalRef.nativeElement.style.transitionDuration = this.transitionDuration + "ms";
            this.isOpen = true;
            this.onOpenEmitter.emit();
        };
        /**
         * @return {?}
         */
        ModalComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            this.modalRef.nativeElement.style.transitionDuration = this.transitionDuration / 2 + "ms";
            this.isOpen = false;
            this.onCloseEmitter.emit();
        };
        ModalComponent.defaultProps = {
            className: '',
            dismissOnBackdrop: true,
            hasBackdrop: true,
            hasCloseButton: true,
            isOpen: false,
            transitionDuration: 400
        };
        ModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-modal }",
                        template: "<div [ngClass]=\"[prefix + '-modal', className]\" [class.active]=\"isOpen\" #modal>\n  <div [ngClass]=\"prefix + '-modal-backdrop'\" #backdrop *ngIf=\"hasBackdrop\"></div>\n  <div [ngClass]=\"prefix + '-modal-content'\">\n    <materialize-icon [className]=\"prefix + '-modal-icon-close'\" *ngIf=\"hasCloseButton\" (onClick)=\"close()\">close</materialize-icon>\n\n    <ng-content></ng-content>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        ModalComponent.ctorParameters = function () { return []; };
        ModalComponent.propDecorators = {
            modalRef: [{ type: core.ViewChild, args: ['modal', { static: true },] }],
            backdropRef: [{ type: core.ViewChild, args: ['backdrop', { static: false },] }],
            onOpenEmitter: [{ type: core.Output, args: ['onOpen',] }],
            onCloseEmitter: [{ type: core.Output, args: ['onClose',] }],
            className: [{ type: core.Input }],
            dismissOnBackdrop: [{ type: core.Input }],
            hasBackdrop: [{ type: core.Input }],
            hasCloseButton: [{ type: core.Input }],
            isOpen: [{ type: core.Input }],
            transitionDuration: [{ type: core.Input }]
        };
        return ModalComponent;
    }());
    if (false) {
        /** @type {?} */
        ModalComponent.defaultProps;
        /** @type {?} */
        ModalComponent.prototype.modalRef;
        /** @type {?} */
        ModalComponent.prototype.backdropRef;
        /** @type {?} */
        ModalComponent.prototype.onOpenEmitter;
        /** @type {?} */
        ModalComponent.prototype.onCloseEmitter;
        /** @type {?} */
        ModalComponent.prototype.className;
        /** @type {?} */
        ModalComponent.prototype.dismissOnBackdrop;
        /** @type {?} */
        ModalComponent.prototype.hasBackdrop;
        /** @type {?} */
        ModalComponent.prototype.hasCloseButton;
        /** @type {?} */
        ModalComponent.prototype.isOpen;
        /** @type {?} */
        ModalComponent.prototype.transitionDuration;
        /** @type {?} */
        ModalComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/modal/modal.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeModalModule = /** @class */ (function () {
        function MaterializeModalModule() {
        }
        MaterializeModalModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ModalComponent],
                        exports: [ModalComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeIconModule
                        ]
                    },] }
        ];
        return MaterializeModalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/modal/modal.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function ModalModel() { }
    if (false) {
        /** @type {?} */
        ModalModel.prototype.className;
        /** @type {?} */
        ModalModel.prototype.dismissOnBackdrop;
        /** @type {?} */
        ModalModel.prototype.hasBackdrop;
        /** @type {?} */
        ModalModel.prototype.hasCloseButton;
        /** @type {?} */
        ModalModel.prototype.isOpen;
        /** @type {?} */
        ModalModel.prototype.transitionDuration;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/navbar/navbar.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NavbarComponent = /** @class */ (function () {
        function NavbarComponent() {
            this.className = NavbarComponent.defaultProps.className;
            this.prefix = config.components.prefix;
        }
        NavbarComponent.defaultProps = {
            className: ''
        };
        NavbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-navbar }",
                        template: "<div [ngClass]=\"[prefix + '-navbar', className]\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        NavbarComponent.propDecorators = {
            className: [{ type: core.Input }]
        };
        return NavbarComponent;
    }());
    if (false) {
        /** @type {?} */
        NavbarComponent.defaultProps;
        /** @type {?} */
        NavbarComponent.prototype.className;
        /** @type {?} */
        NavbarComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/navbar/navbar.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeNavbarModule = /** @class */ (function () {
        function MaterializeNavbarModule() {
        }
        MaterializeNavbarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NavbarComponent],
                        exports: [NavbarComponent],
                        imports: [common.CommonModule]
                    },] }
        ];
        return MaterializeNavbarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/navbar/navbar.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function NavbarModel() { }
    if (false) {
        /** @type {?} */
        NavbarModel.prototype.className;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/radio-group/radio/radio.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioComponent = /** @class */ (function () {
        function RadioComponent() {
            this.className = RadioComponent.defaultProps.className;
            this.disabled = RadioComponent.defaultProps.disabled;
            this.id = RadioComponent.defaultProps.id;
            this.name = RadioComponent.defaultProps.name;
            this.required = RadioComponent.defaultProps.required;
            this.value = RadioComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isActive = false;
            this.isFocused = false;
            this.onClickEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        RadioComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isActive = !this.isActive;
                this.isFocused = false;
                this.onClickEmitter.emit(this.value);
            }
        };
        /**
         * @return {?}
         */
        RadioComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.isFocused = false;
        };
        /**
         * @return {?}
         */
        RadioComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
            }
        };
        RadioComponent.defaultProps = {
            className: '',
            disabled: false,
            id: null,
            name: '',
            required: false,
            value: ''
        };
        RadioComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-radio }",
                        template: "<div\n  [ngClass]=\"[prefix + '-radio', className]\"\n  [class.active]=\"isActive\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n\n  (click)=\"onClick()\"\n  (blur)=\"onBlur()\"\n  (focus)=\"onFocus()\"\n>\n  <div [ngClass]=\"prefix + '-radio-label'\">\n    <ng-content></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-radio-indicator'\">\n    <div [ngClass]=\"prefix + '-radio-indicator-ripple'\" materializeRipple [isRippleActive]=\"!disabled\" [rippleDuration]=\"200\"></div>\n  </div>\n\n  <input type=\"radio\" [attr.id]=\"id\" [checked]=\"isActive\" [disabled]=\"disabled\" [name]=\"name\" [required]=\"required\" [value]= \"value\" />\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        RadioComponent.ctorParameters = function () { return []; };
        RadioComponent.propDecorators = {
            onClickEmitter: [{ type: core.Output, args: ['onClick',] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            id: [{ type: core.Input }],
            name: [{ type: core.Input }],
            required: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return RadioComponent;
    }());
    if (false) {
        /** @type {?} */
        RadioComponent.defaultProps;
        /** @type {?} */
        RadioComponent.prototype.onClickEmitter;
        /** @type {?} */
        RadioComponent.prototype.className;
        /** @type {?} */
        RadioComponent.prototype.disabled;
        /** @type {?} */
        RadioComponent.prototype.id;
        /** @type {?} */
        RadioComponent.prototype.name;
        /** @type {?} */
        RadioComponent.prototype.required;
        /** @type {?} */
        RadioComponent.prototype.value;
        /** @type {?} */
        RadioComponent.prototype.prefix;
        /** @type {?} */
        RadioComponent.prototype.isActive;
        /** @type {?} */
        RadioComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/radio-group/radio-group.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioGroupComponent = /** @class */ (function () {
        function RadioGroupComponent() {
            this.canUncheck = RadioGroupComponent.defaultProps.canUncheck;
            this.className = RadioGroupComponent.defaultProps.className;
            this.disabled = RadioGroupComponent.defaultProps.disabled;
            this.name = RadioGroupComponent.defaultProps.name;
            this.required = RadioGroupComponent.defaultProps.required;
            this.value = RadioGroupComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.initRadios = this.initRadios.bind(this);
            this.registerRadios = this.registerRadios.bind(this);
            this.toggleRadios = this.toggleRadios.bind(this);
            this.onChangeEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        RadioGroupComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.initRadios();
            this.radiosQueryList.changes.subscribe(this.initRadios);
        };
        /**
         * @return {?}
         */
        RadioGroupComponent.prototype.initRadios = /**
         * @return {?}
         */
        function () {
            this.disableAllRadios(this.disabled);
            setTimeout(this.registerRadios, 0);
        };
        /**
         * @return {?}
         */
        RadioGroupComponent.prototype.registerRadios = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.radiosQueryList.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            function (radio) {
                radio.isActive = (radio.value === _this.value);
                radio.onClickEmitter.subscribe(_this.toggleRadios);
            }));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioGroupComponent.prototype.toggleRadios = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.setValueAllRadios(value);
            /** @type {?} */
            var currentRadio = this.radiosQueryList.find((/**
             * @param {?} radio
             * @return {?}
             */
            function (radio) { return radio.value === value; }));
            this.value = currentRadio && currentRadio.isActive
                ? currentRadio.value
                : '';
            this.onTouched();
            this.onChange(this.value);
            this.onChangeEmitter.emit(this.value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioGroupComponent.prototype.setValueAllRadios = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.radiosQueryList.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            function (radio) {
                if (radio.value !== value) {
                    radio.isActive = false;
                }
                if (radio.value === value && !_this.canUncheck) {
                    radio.isActive = true;
                }
            }));
        };
        /**
         * @param {?} disabled
         * @return {?}
         */
        RadioGroupComponent.prototype.disableAllRadios = /**
         * @param {?} disabled
         * @return {?}
         */
        function (disabled) {
            this.radiosQueryList.forEach((/**
             * @param {?} radio
             * @return {?}
             */
            function (radio) {
                radio.disabled = disabled;
            }));
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        RadioGroupComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            var _this = this;
            this.disabled = isDisabled;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.disableAllRadios(_this.disabled);
            }), 0);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.value = value;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.setValueAllRadios(_this.value);
            }), 0);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioGroupComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
        };
        /**
         * @return {?}
         */
        RadioGroupComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        RadioGroupComponent.defaultProps = {
            canUncheck: false,
            className: '',
            disabled: false,
            name: '',
            required: false,
            value: ''
        };
        RadioGroupComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return RadioGroupComponent; }))
                            }],
                        selector: config.components.prefix + "-radio-group }",
                        template: "<div [ngClass]=\"[prefix + '-radio-group', className]\">\n  <ng-content select=\"materialize-radio\"></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        RadioGroupComponent.ctorParameters = function () { return []; };
        RadioGroupComponent.propDecorators = {
            radiosQueryList: [{ type: core.ContentChildren, args: [RadioComponent,] }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }],
            canUncheck: [{ type: core.Input }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            name: [{ type: core.Input }],
            required: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return RadioGroupComponent;
    }());
    if (false) {
        /** @type {?} */
        RadioGroupComponent.defaultProps;
        /** @type {?} */
        RadioGroupComponent.prototype.radiosQueryList;
        /** @type {?} */
        RadioGroupComponent.prototype.onChangeEmitter;
        /** @type {?} */
        RadioGroupComponent.prototype.canUncheck;
        /** @type {?} */
        RadioGroupComponent.prototype.className;
        /** @type {?} */
        RadioGroupComponent.prototype.disabled;
        /** @type {?} */
        RadioGroupComponent.prototype.name;
        /** @type {?} */
        RadioGroupComponent.prototype.required;
        /** @type {?} */
        RadioGroupComponent.prototype.value;
        /** @type {?} */
        RadioGroupComponent.prototype.prefix;
        /** @type {?} */
        RadioGroupComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/radio-group/radio-group.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeRadioGroupModule = /** @class */ (function () {
        function MaterializeRadioGroupModule() {
        }
        MaterializeRadioGroupModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            RadioComponent,
                            RadioGroupComponent
                        ],
                        exports: [
                            RadioComponent,
                            RadioGroupComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeRadioGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/radio-group/radio-group.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function RadioGroupModel() { }
    if (false) {
        /** @type {?} */
        RadioGroupModel.prototype.canUncheck;
        /** @type {?} */
        RadioGroupModel.prototype.className;
        /** @type {?} */
        RadioGroupModel.prototype.disabled;
        /** @type {?} */
        RadioGroupModel.prototype.name;
        /** @type {?} */
        RadioGroupModel.prototype.required;
        /** @type {?} */
        RadioGroupModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/radio-group/radio/radio.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function RadioModel() { }
    if (false) {
        /** @type {?} */
        RadioModel.prototype.className;
        /** @type {?} */
        RadioModel.prototype.disabled;
        /** @type {?} */
        RadioModel.prototype.id;
        /** @type {?} */
        RadioModel.prototype.name;
        /** @type {?} */
        RadioModel.prototype.required;
        /** @type {?} */
        RadioModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/scroll-spy/scroll-spy.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function ScrollSpyModel() { }
    if (false) {
        /** @type {?} */
        ScrollSpyModel.prototype.className;
        /** @type {?} */
        ScrollSpyModel.prototype.itemId;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/scroll-spy/scroll-spy-item/scroll-spy-item.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function ScrollSpyItemModel() { }
    if (false) {
        /** @type {?} */
        ScrollSpyItemModel.prototype.className;
        /** @type {?} */
        ScrollSpyItemModel.prototype.id;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/select/select-option/select-option.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectOptionComponent = /** @class */ (function () {
        function SelectOptionComponent() {
            this.className = SelectOptionComponent.defaultProps.className;
            this.disabled = SelectOptionComponent.defaultProps.disabled;
            this.value = SelectOptionComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.transitionDuration = SelectOptionComponent.defaultProps.transitionDuration;
            this.isActive = false;
            this.onClickEmitter = new core.EventEmitter();
            this.emitClick = this.emitClick.bind(this);
        }
        /**
         * @return {?}
         */
        SelectOptionComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            this.content = this.optionTemplateRef.nativeElement
                ? this.optionTemplateRef.nativeElement.textContent
                : '';
        };
        /**
         * @return {?}
         */
        SelectOptionComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                setTimeout(this.emitClick, this.transitionDuration);
            }
        };
        /**
         * @return {?}
         */
        SelectOptionComponent.prototype.emitClick = /**
         * @return {?}
         */
        function () {
            this.onClickEmitter.emit(this.value);
        };
        SelectOptionComponent.defaultProps = {
            className: '',
            disabled: false,
            transitionDuration: 250,
            value: ''
        };
        SelectOptionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-select-option }",
                        template: "<div [ngClass]=\"[prefix + '-select-option', className]\" materializeRipple (click)=\"onClick()\" [class.active]=\"isActive\"  [class.disabled]=\"disabled\" [rippleDuration]=\"transitionDuration\">\n  <div #optionTemplate>\n    <span>\n      <ng-content></ng-content>\n    </span>\n  </div>\n</div>\n\n"
                    }] }
        ];
        /** @nocollapse */
        SelectOptionComponent.ctorParameters = function () { return []; };
        SelectOptionComponent.propDecorators = {
            optionTemplateRef: [{ type: core.ViewChild, args: ['optionTemplate', { static: true },] }],
            onClickEmitter: [{ type: core.Output, args: ['onClick',] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return SelectOptionComponent;
    }());
    if (false) {
        /** @type {?} */
        SelectOptionComponent.defaultProps;
        /** @type {?} */
        SelectOptionComponent.prototype.optionTemplateRef;
        /** @type {?} */
        SelectOptionComponent.prototype.onClickEmitter;
        /** @type {?} */
        SelectOptionComponent.prototype.className;
        /** @type {?} */
        SelectOptionComponent.prototype.disabled;
        /** @type {?} */
        SelectOptionComponent.prototype.value;
        /** @type {?} */
        SelectOptionComponent.prototype.prefix;
        /** @type {?} */
        SelectOptionComponent.prototype.content;
        /** @type {?} */
        SelectOptionComponent.prototype.isActive;
        /** @type {?} */
        SelectOptionComponent.prototype.transitionDuration;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/select/select.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectComponent = /** @class */ (function () {
        function SelectComponent(renderer) {
            this.renderer = renderer;
            this.className = SelectComponent.defaultProps.className;
            this.disabled = SelectComponent.defaultProps.disabled;
            this.floatLabel = SelectComponent.defaultProps.floatLabel;
            this.id = SelectComponent.defaultProps.id;
            this.isNativeControl = SelectComponent.defaultProps.isNativeControl;
            this.name = SelectComponent.defaultProps.name;
            this.required = SelectComponent.defaultProps.required;
            this.value = SelectComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.isOpen = false;
            this.onChangeEmitter = new core.EventEmitter();
            this.addBackdropListener = this.addBackdropListener.bind(this);
            this.onChangeOption = this.onChangeOption.bind(this);
            this.registerOptions = this.registerOptions.bind(this);
        }
        /**
         * @return {?}
         */
        SelectComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout(this.registerOptions, 0);
            this.options.changes.subscribe((/**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                setTimeout(_this.registerOptions, 0);
            }));
        };
        /**
         * @return {?}
         */
        SelectComponent.prototype.registerOptions = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                option.isActive = (option.value === _this.value);
                option.onClickEmitter.subscribe(_this.onChangeOption);
            }));
            this.updateControl(this.value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.updateControl = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
            this.isOpen = false;
            this.activeSelectedOption(this.value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.onChangeOption = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.updateControl(value);
            this.onChangeEmitter.emit(this.value);
            this.onChange(this.value);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.activeSelectedOption = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                if (option.value === value) {
                    option.isActive = true;
                    _this.activeSelectClass(option);
                    _this.cloneOption(option);
                }
                else {
                    option.isActive = false;
                }
            }));
        };
        /**
         * @param {?} selectedOption
         * @return {?}
         */
        SelectComponent.prototype.cloneOption = /**
         * @param {?} selectedOption
         * @return {?}
         */
        function (selectedOption) {
            if (!this.labelContainerRef) {
                return;
            }
            var labelContainer = this.labelContainerRef.nativeElement;
            var optionTemplateRef = selectedOption.optionTemplateRef, disabled = selectedOption.disabled;
            if (labelContainer.firstChild) {
                this.renderer.removeChild(labelContainer, labelContainer.firstChild);
            }
            if (optionTemplateRef) {
                var firstChild = optionTemplateRef.nativeElement.firstChild;
                /** @type {?} */
                var cloned = firstChild.cloneNode(true);
                if (disabled) {
                    this.renderer.addClass(cloned, 'option-disabled');
                }
                this.renderer.appendChild(labelContainer, cloned);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        SelectComponent.prototype.onChangeNativeOption = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var selectedOptions = event.target.selectedOptions;
            var value = selectedOptions[0].value;
            this.value = value;
            this.activeSelectClass(selectedOptions[0]);
            this.onChangeEmitter.emit(this.value);
            this.onChange(this.value);
        };
        /**
         * @return {?}
         */
        SelectComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.isFocused = false;
        };
        /**
         * @return {?}
         */
        SelectComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
                this.onTouched();
            }
        };
        /**
         * @return {?}
         */
        SelectComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
                this.isOpen = true;
                if (!this.isNativeControl) {
                    setTimeout(this.addBackdropListener, 0);
                }
            }
        };
        /**
         * @return {?}
         */
        SelectComponent.prototype.addBackdropListener = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.backdropRef.nativeElement.addEventListener('click', (/**
             * @return {?}
             */
            function () {
                _this.isOpen = false;
            }));
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        SelectComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this.value = value;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.updateControl(_this.value);
            }), 0);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SelectComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SelectComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) { };
        /**
         * @return {?}
         */
        SelectComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        /**
         * @param {?} selectedOption
         * @return {?}
         */
        SelectComponent.prototype.activeSelectClass = /**
         * @param {?} selectedOption
         * @return {?}
         */
        function (selectedOption) {
            if (this.selectElementRef && selectedOption.disabled) {
                this.renderer.addClass(this.selectElementRef.nativeElement, 'option-disabled');
            }
            else if (this.selectElementRef && !selectedOption.disabled) {
                this.renderer.removeClass(this.selectElementRef.nativeElement, 'option-disabled');
            }
        };
        SelectComponent.defaultProps = {
            className: '',
            disabled: false,
            floatLabel: '',
            id: null,
            isNativeControl: false,
            name: '',
            required: false,
            value: null
        };
        SelectComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return SelectComponent; }))
                            }],
                        selector: config.components.prefix + "-select }",
                        template: "<div [ngClass]=\"[className, prefix + '-form-control-select-container']\" *ngIf=\"isNativeControl\">\n  <div [ngClass]=\"prefix + '-form-control-container'\"\n    [class.float-label]=\"floatLabel\"\n    [class.active]=\"value\"\n    [class.focused]=\"isFocused\"\n    [class.disabled]=\"disabled\"\n  >\n    <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n      <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n      <select #selectElement (blur)=\"onBlur()\" (click)=\"onClick()\" (focus)=\"onFocus()\" (input)=\"onChangeNativeOption($event)\"\n        [ngClass]=\"prefix + '-form-control'\"\n        [attr.id]=\"id\"\n        [disabled]=\"disabled\"\n        [name]=\"name\"\n        [required]=\"required\"\n        [value]=\"value\"\n      >\n        <option\n          [selected]=\"option.value === value\"\n          [value]=\"option.value\"\n          [disabled]=\"option.disabled\"\n          *ngFor=\"let option of options\">\n          {{ option.content }}\n        </option>\n      </select>\n    </div>\n\n    <materialize-icon [className]=\"prefix + '-form-control-select-icon'\" size=\"lg\">arrow_drop_down</materialize-icon>\n  </div>\n</div>\n\n\n<div (focus)=\"onFocus()\" (blur)=\"onBlur()\" *ngIf=\"!isNativeControl\"\n  [ngClass]=\"[className, prefix + '-form-control-select-container']\"\n  [class.open]=\"isOpen\"\n  [tabindex]=\"disabled ? '-1' : '0'\"\n>\n  <div #backdrop *ngIf=\"isOpen\" [ngClass]=\"prefix + '-form-control-select-backdrop'\"></div>\n\n  <div (click)=\"onClick()\"\n    [ngClass]=\"[prefix + '-form-control-container' , className]\"\n    [class.float-label]=\"floatLabel\"\n    [class.active]=\"value\"\n    [class.focused]=\"isFocused\"\n    [class.disabled]=\"disabled\"\n  >\n    <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n      <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n      <div [ngClass]=\"prefix + '-form-control'\" #labelContainer>&nbsp;</div>\n    </div>\n\n    <materialize-icon [className]=\"prefix + '-form-control-select-icon'\" size=\"lg\">arrow_drop_down</materialize-icon>\n  </div>\n\n  <div [className]=\"prefix + '-form-control-select-menu'\">\n    <ng-content select=\"materialize-select-option\"></ng-content>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        SelectComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        SelectComponent.propDecorators = {
            backdropRef: [{ type: core.ViewChild, args: ['backdrop', { static: false },] }],
            labelContainerRef: [{ type: core.ViewChild, args: ['labelContainer', { static: false },] }],
            selectElementRef: [{ type: core.ViewChild, args: ['selectElement', { static: false },] }],
            options: [{ type: core.ContentChildren, args: [SelectOptionComponent,] }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            floatLabel: [{ type: core.Input }],
            id: [{ type: core.Input }],
            isNativeControl: [{ type: core.Input }],
            name: [{ type: core.Input }],
            required: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return SelectComponent;
    }());
    if (false) {
        /** @type {?} */
        SelectComponent.defaultProps;
        /** @type {?} */
        SelectComponent.prototype.backdropRef;
        /** @type {?} */
        SelectComponent.prototype.labelContainerRef;
        /** @type {?} */
        SelectComponent.prototype.selectElementRef;
        /** @type {?} */
        SelectComponent.prototype.options;
        /** @type {?} */
        SelectComponent.prototype.onChangeEmitter;
        /** @type {?} */
        SelectComponent.prototype.className;
        /** @type {?} */
        SelectComponent.prototype.disabled;
        /** @type {?} */
        SelectComponent.prototype.floatLabel;
        /** @type {?} */
        SelectComponent.prototype.id;
        /** @type {?} */
        SelectComponent.prototype.isNativeControl;
        /** @type {?} */
        SelectComponent.prototype.name;
        /** @type {?} */
        SelectComponent.prototype.required;
        /** @type {?} */
        SelectComponent.prototype.value;
        /** @type {?} */
        SelectComponent.prototype.prefix;
        /** @type {?} */
        SelectComponent.prototype.isFocused;
        /** @type {?} */
        SelectComponent.prototype.isOpen;
        /** @type {?} */
        SelectComponent.prototype.valueLabel;
        /**
         * @type {?}
         * @private
         */
        SelectComponent.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/select/select.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeSelectModule = /** @class */ (function () {
        function MaterializeSelectModule() {
        }
        MaterializeSelectModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SelectComponent,
                            SelectOptionComponent
                        ],
                        exports: [
                            SelectComponent,
                            SelectOptionComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule,
                            MaterializeIconModule
                        ]
                    },] }
        ];
        return MaterializeSelectModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/select/select.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function SelectModel() { }
    if (false) {
        /** @type {?} */
        SelectModel.prototype.className;
        /** @type {?} */
        SelectModel.prototype.disabled;
        /** @type {?} */
        SelectModel.prototype.floatLabel;
        /** @type {?} */
        SelectModel.prototype.id;
        /** @type {?} */
        SelectModel.prototype.isNativeControl;
        /** @type {?} */
        SelectModel.prototype.name;
        /** @type {?} */
        SelectModel.prototype.required;
        /** @type {?} */
        SelectModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/select/select-option/select-option.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function SelectOptionModel() { }
    if (false) {
        /** @type {?} */
        SelectOptionModel.prototype.className;
        /** @type {?} */
        SelectOptionModel.prototype.disabled;
        /** @type {?} */
        SelectOptionModel.prototype.transitionDuration;
        /** @type {?} */
        SelectOptionModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/utils/get-supported-events.util.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /** @type {?} */
    var MOUSE_EVENTS = {
        down: 'mousedown',
        move: 'mousemove',
        resize: 'resize',
        up: 'mouseup'
    };
    /** @type {?} */
    var TOUCH_EVENTS = {
        down: 'touchstart',
        move: 'touchmove',
        resize: 'resize',
        up: 'touchend'
    };
    /**
     * @return {?}
     */
    function supportTouchEvents() {
        return 'ontouchstart' in window;
    }
    /** @type {?} */
    var supportedEvents = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var events = supportTouchEvents()
            ? TOUCH_EVENTS
            : MOUSE_EVENTS;
        return events;
    });

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/slider/slider-option/slider-option.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SliderOptionComponent = /** @class */ (function () {
        function SliderOptionComponent() {
            this.className = SliderOptionComponent.defaultProps.className;
            this.value = SliderOptionComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isActive = false;
            this.onClickEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        SliderOptionComponent.prototype.onClick = /**
         * @return {?}
         */
        function () {
            this.onClickEmitter.emit(this.value);
        };
        SliderOptionComponent.defaultProps = {
            className: '',
            value: null
        };
        SliderOptionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-slider-option }",
                        template: "<div [ngClass]=\"[prefix + '-slider-option-container', className]\"\n  [class.active]=\"isActive\"\n\n  (click)=\"onClick()\"\n  #template>\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        SliderOptionComponent.ctorParameters = function () { return []; };
        SliderOptionComponent.propDecorators = {
            templateRef: [{ type: core.ViewChild, args: ['template', { static: true },] }],
            className: [{ type: core.Input }],
            value: [{ type: core.Input }],
            onClickEmitter: [{ type: core.Output, args: ['onClick',] }]
        };
        return SliderOptionComponent;
    }());
    if (false) {
        /** @type {?} */
        SliderOptionComponent.defaultProps;
        /** @type {?} */
        SliderOptionComponent.prototype.templateRef;
        /** @type {?} */
        SliderOptionComponent.prototype.className;
        /** @type {?} */
        SliderOptionComponent.prototype.value;
        /** @type {?} */
        SliderOptionComponent.prototype.onClickEmitter;
        /** @type {?} */
        SliderOptionComponent.prototype.prefix;
        /** @type {?} */
        SliderOptionComponent.prototype.isActive;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/slider/slider.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SliderComponent = /** @class */ (function () {
        function SliderComponent(renderer) {
            this.renderer = renderer;
            this.className = SliderComponent.defaultProps.className;
            this.disabled = SliderComponent.defaultProps.disabled;
            this.required = SliderComponent.defaultProps.required;
            this.showLabels = SliderComponent.defaultProps.showLabels;
            this.showTicks = SliderComponent.defaultProps.showTicks;
            this.value = SliderComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.supportedEvents = supportedEvents();
            this.onChangeEmitter = new core.EventEmitter();
            this.actionDown = this.actionDown.bind(this);
            this.actionMove = this.actionMove.bind(this);
            this.actionUp = this.actionUp.bind(this);
            this.onOptionClick = this.onOptionClick.bind(this);
            this.update = this.update.bind(this);
            window.addEventListener(this.supportedEvents.resize, this.update);
        }
        /**
         * @return {?}
         */
        SliderComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.sliderTrack.nativeElement.addEventListener(this.supportedEvents.down, this.actionDown);
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.update();
            this.options.changes.subscribe(this.update);
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.update = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.registerEventOptions();
                _this.renderPositions();
                _this.moveToValue(_this.value, false);
            }), 0);
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.registerEventOptions = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.options.forEach((/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                option.onClickEmitter.subscribe(_this.onOptionClick);
            }));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SliderComponent.prototype.onOptionClick = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
            this.onChangeEmitter.emit(this.value);
            this.onChange(this.value);
            this.moveToValue(this.value, true);
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.renderPositions = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var pixelInterval = this.getPixelInterval();
            this.removeTicks();
            this.options.forEach((/**
             * @param {?} option
             * @param {?} index
             * @return {?}
             */
            function (option, index) {
                /** @type {?} */
                var leftSpace = pixelInterval * index;
                var nativeElement = option.templateRef.nativeElement;
                _this.renderer.setStyle(nativeElement, 'left', leftSpace + "px");
                if (_this.showTicks) {
                    /** @type {?} */
                    var tick = _this.renderer.createElement('div');
                    _this.renderer.setStyle(tick, 'left', leftSpace + "px");
                    _this.renderer.addClass(tick, SliderComponent.tickClassName);
                    _this.renderer.appendChild(_this.sliderTrackInterval.nativeElement, tick);
                }
            }));
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.removeTicks = /**
         * @return {?}
         */
        function () {
            var nativeElement = this.sliderTrackInterval.nativeElement;
            while (nativeElement.firstChild) {
                this.renderer.removeChild(nativeElement, nativeElement.firstChild);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        SliderComponent.prototype.actionDown = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!this.disabled) {
                /** @type {?} */
                var x = this.getXCoordinate(event, this.supportedEvents.down);
                this.animate(x, true);
                window.addEventListener(this.supportedEvents.up, this.actionUp);
                window.addEventListener(this.supportedEvents.move, this.actionMove);
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        SliderComponent.prototype.actionMove = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var x = this.getXCoordinate(event, this.supportedEvents.move);
            this.value = this.getValueFromXCoordinate(x);
            this.animate(x, false);
        };
        /**
         * @param {?} event
         * @return {?}
         */
        SliderComponent.prototype.actionUp = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            window.removeEventListener(this.supportedEvents.up, this.actionUp);
            window.removeEventListener(this.supportedEvents.move, this.actionMove);
            this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', null);
            /** @type {?} */
            var x = this.getXCoordinate(event, this.supportedEvents.up);
            this.value = this.getValueFromXCoordinate(x);
            this.onChangeEmitter.emit(this.value);
            this.onChange(this.value);
            this.moveToValue(this.value, true);
        };
        /**
         * @param {?} value
         * @param {?} hasAnimation
         * @return {?}
         */
        SliderComponent.prototype.moveToValue = /**
         * @param {?} value
         * @param {?} hasAnimation
         * @return {?}
         */
        function (value, hasAnimation) {
            /** @type {?} */
            var options = this.options.toArray();
            /** @type {?} */
            var index = options.findIndex((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === value; }));
            /** @type {?} */
            var validatedIndex = index >= 0
                ? index
                : 0;
            /** @type {?} */
            var pixelInterval = this.getPixelInterval();
            /** @type {?} */
            var nextXCoordinate = validatedIndex * pixelInterval;
            this.animate(nextXCoordinate, hasAnimation);
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SliderComponent.prototype.activeOption = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.options.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.isActive = (item.value === value);
            }));
        };
        /**
         * @param {?} x
         * @return {?}
         */
        SliderComponent.prototype.getValueFromXCoordinate = /**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var index = this.getIndexFromXCoordinate(x);
            /** @type {?} */
            var options = this.options.toArray();
            /** @type {?} */
            var value = options[index].value;
            return value;
        };
        /**
         * @param {?} x
         * @return {?}
         */
        SliderComponent.prototype.getIndexFromXCoordinate = /**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var pixelInterval = this.getPixelInterval();
            if (pixelInterval) {
                /** @type {?} */
                var index = Math.round(x / pixelInterval);
                if (index >= 0 && index <= this.options.length) {
                    return index;
                }
            }
            return 0;
        };
        /**
         * @param {?} event
         * @param {?} eventType
         * @return {?}
         */
        SliderComponent.prototype.getXCoordinateByEventType = /**
         * @param {?} event
         * @param {?} eventType
         * @return {?}
         */
        function (event, eventType) {
            if (supportTouchEvents()) {
                if (eventType === this.supportedEvents.up) {
                    return event.changedTouches[0].clientX;
                }
                return event.touches[0].clientX;
            }
            return event.clientX;
        };
        /**
         * @param {?} event
         * @param {?} eventType
         * @return {?}
         */
        SliderComponent.prototype.getXCoordinate = /**
         * @param {?} event
         * @param {?} eventType
         * @return {?}
         */
        function (event, eventType) {
            /** @type {?} */
            var rect = this.sliderTrack.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var xCoordinateEvent = this.getXCoordinateByEventType(event, eventType);
            /** @type {?} */
            var x = xCoordinateEvent - rect.left;
            if (x < 0) {
                return 0;
            }
            if (x > this.sliderTrack.nativeElement.offsetWidth) {
                return this.sliderTrack.nativeElement.offsetWidth;
            }
            return x;
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.getPixelInterval = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var maxOptionsSize = this.options.length - 1;
            if (maxOptionsSize > 0) {
                return this.sliderTrack.nativeElement.offsetWidth / maxOptionsSize;
            }
            return 0;
        };
        /**
         * @param {?} x
         * @param {?} hasAnimation
         * @return {?}
         */
        SliderComponent.prototype.animate = /**
         * @param {?} x
         * @param {?} hasAnimation
         * @return {?}
         */
        function (x, hasAnimation) {
            this.activeOption(this.value);
            /** @type {?} */
            var transitionDuration = hasAnimation
                ? null
                : '0ms';
            this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'transitionDuration', transitionDuration);
            this.renderer.setStyle(this.sliderIndicatorContainer.nativeElement, 'left', x + "px");
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
                this.onTouched();
            }
        };
        /**
         * @return {?}
         */
        SliderComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.isFocused = false;
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        SliderComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SliderComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.value = value;
                _this.moveToValue(value, false);
            }), 0);
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SliderComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SliderComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SliderComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) { };
        /**
         * @return {?}
         */
        SliderComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        SliderComponent.tickClassName = config.components.prefix + '-slider-step';
        SliderComponent.defaultProps = {
            className: '',
            disabled: false,
            required: false,
            showLabels: true,
            showTicks: false,
            value: null
        };
        SliderComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return SliderComponent; }))
                            }],
                        selector: config.components.prefix + "-slider }",
                        template: "<div [ngClass]=\"[prefix + '-slider', className]\" [class.focused]=\"isFocused\" [class.disabled]=\"disabled\">\n\n  <div [ngClass]=\"prefix + '-slider-track-container'\" #sliderTrack [tabindex]=\"disabled ? '-1' : '0'\" (focus)=\"onFocus()\" (blur)=\"onBlur()\">\n    <div #sliderTrackInterval></div>\n\n    <div [ngClass]=\"prefix + '-slider-track'\" #sliderTrackBackground></div>\n\n    <div [ngClass]=\"prefix + '-slider-indicator-container'\" #sliderIndicatorContainer>\n      <ng-content select=\"materialize-slider-indicator\"></ng-content>\n    </div>\n  </div>\n\n  <div [ngClass]=\"prefix + '-slider-labels-container'\" *ngIf=\"showLabels\">\n    <ng-content select=\"materialize-slider-option\"></ng-content>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        SliderComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        SliderComponent.propDecorators = {
            options: [{ type: core.ContentChildren, args: [SliderOptionComponent,] }],
            sliderIndicatorContainer: [{ type: core.ViewChild, args: ['sliderIndicatorContainer', { static: true },] }],
            sliderTrack: [{ type: core.ViewChild, args: ['sliderTrack', { static: true },] }],
            sliderTrackBackground: [{ type: core.ViewChild, args: ['sliderTrackBackground', { static: true },] }],
            sliderTrackInterval: [{ type: core.ViewChild, args: ['sliderTrackInterval', { static: true },] }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            required: [{ type: core.Input }],
            showLabels: [{ type: core.Input }],
            showTicks: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return SliderComponent;
    }());
    if (false) {
        /** @type {?} */
        SliderComponent.tickClassName;
        /** @type {?} */
        SliderComponent.defaultProps;
        /** @type {?} */
        SliderComponent.prototype.options;
        /** @type {?} */
        SliderComponent.prototype.sliderIndicatorContainer;
        /** @type {?} */
        SliderComponent.prototype.sliderTrack;
        /** @type {?} */
        SliderComponent.prototype.sliderTrackBackground;
        /** @type {?} */
        SliderComponent.prototype.sliderTrackInterval;
        /** @type {?} */
        SliderComponent.prototype.onChangeEmitter;
        /** @type {?} */
        SliderComponent.prototype.className;
        /** @type {?} */
        SliderComponent.prototype.disabled;
        /** @type {?} */
        SliderComponent.prototype.required;
        /** @type {?} */
        SliderComponent.prototype.showLabels;
        /** @type {?} */
        SliderComponent.prototype.showTicks;
        /** @type {?} */
        SliderComponent.prototype.value;
        /** @type {?} */
        SliderComponent.prototype.prefix;
        /** @type {?} */
        SliderComponent.prototype.isFocused;
        /** @type {?} */
        SliderComponent.prototype.supportedEvents;
        /**
         * @type {?}
         * @private
         */
        SliderComponent.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/slider/slider-indicator/slider-indicator.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SliderIndicatorComponent = /** @class */ (function () {
        function SliderIndicatorComponent() {
        }
        SliderIndicatorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-slider-indicator }",
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        return SliderIndicatorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/slider/slider.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeSliderModule = /** @class */ (function () {
        function MaterializeSliderModule() {
        }
        MaterializeSliderModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SliderComponent,
                            SliderIndicatorComponent,
                            SliderOptionComponent
                        ],
                        exports: [
                            SliderComponent,
                            SliderIndicatorComponent,
                            SliderOptionComponent
                        ],
                        imports: [
                            common.CommonModule
                        ]
                    },] }
        ];
        return MaterializeSliderModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/slider/slider.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function SliderModel() { }
    if (false) {
        /** @type {?} */
        SliderModel.prototype.className;
        /** @type {?} */
        SliderModel.prototype.disabled;
        /** @type {?} */
        SliderModel.prototype.required;
        /** @type {?} */
        SliderModel.prototype.showLabels;
        /** @type {?} */
        SliderModel.prototype.showTicks;
        /** @type {?} */
        SliderModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/slider/slider-option/slider-option.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function SliderOptionModel() { }
    if (false) {
        /** @type {?} */
        SliderOptionModel.prototype.className;
        /** @type {?} */
        SliderOptionModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/stepper/step/step.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StepComponent = /** @class */ (function () {
        function StepComponent() {
            this.prefix = config.components.prefix;
            this.isCompleted = false;
        }
        StepComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-step }",
                        template: "<ng-template #indicatorTemplate>\n  <div [ngClass]=\"prefix + '-step-indicator'\">\n    <materialize-icon [className]=\"prefix + '-step-indicator-icon'\" *ngIf=\"isCompleted\">done</materialize-icon>\n    <ng-content select=\"materialize-step-indicator\" *ngIf=\"!isCompleted\"></ng-content>\n  </div>\n</ng-template>\n<ng-template #labelTemplate>\n  <ng-content select=\"materialize-step-label\"></ng-content>\n</ng-template>\n"
                    }] }
        ];
        /** @nocollapse */
        StepComponent.ctorParameters = function () { return []; };
        StepComponent.propDecorators = {
            labelTemplate: [{ type: core.ViewChild, args: ['labelTemplate', { static: false },] }],
            indicatorTemplate: [{ type: core.ViewChild, args: ['indicatorTemplate', { static: false },] }]
        };
        return StepComponent;
    }());
    if (false) {
        /** @type {?} */
        StepComponent.prototype.labelTemplate;
        /** @type {?} */
        StepComponent.prototype.indicatorTemplate;
        /** @type {?} */
        StepComponent.prototype.prefix;
        /** @type {?} */
        StepComponent.prototype.isCompleted;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/stepper/step/step-indicator/step-indicator.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StepIndicatorComponent = /** @class */ (function () {
        function StepIndicatorComponent() {
            this.prefix = config.components.prefix;
        }
        StepIndicatorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-step-indicator",
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        return StepIndicatorComponent;
    }());
    if (false) {
        /** @type {?} */
        StepIndicatorComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/stepper/step/step-label/step-label.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StepLabelComponent = /** @class */ (function () {
        function StepLabelComponent() {
            this.prefix = config.components.prefix;
        }
        StepLabelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-step-label",
                        template: "<div [className]=\"prefix + '-step-label'\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        return StepLabelComponent;
    }());
    if (false) {
        /** @type {?} */
        StepLabelComponent.prototype.prefix;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/stepper/stepper.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StepperComponent = /** @class */ (function () {
        function StepperComponent() {
            this.className = StepperComponent.defaultProps.className;
            this.activeIndex = StepperComponent.defaultProps.activeIndex;
            this.showTicks = StepperComponent.defaultProps.showTicks;
            this.prefix = config.components.prefix;
            this.isContentReady = true;
            this.validateContent = this.validateContent.bind(this);
        }
        /**
         * @return {?}
         */
        StepperComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            this.validateContent();
            this.steps.changes.subscribe(this.validateContent);
        };
        /**
         * @return {?}
         */
        StepperComponent.prototype.validateContent = /**
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.isContentReady = false;
                _this.validateSteps();
            }), 0);
        };
        /**
         * @return {?}
         */
        StepperComponent.prototype.validateSteps = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.steps.forEach((/**
             * @param {?} step
             * @param {?} index
             * @return {?}
             */
            function (step, index) {
                step.isCompleted = (index < _this.activeIndex && _this.showTicks);
            }));
        };
        StepperComponent.defaultProps = {
            activeIndex: 0,
            className: '',
            showTicks: true
        };
        StepperComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-stepper }",
                        template: "<div [ngClass]=\"[prefix + '-stepper', className]\">\n  <ng-container *ngFor=\"let step of steps; index as i\">\n    <div [ngClass]=\"prefix + '-step-divider'\" *ngIf=\"i > 0\" [class.completed]=\"i <= activeIndex\"></div>\n\n    <div\n      [ngClass]=\"prefix + '-step'\"\n      [class.active]=\"i === activeIndex\"\n      [class.completed]=\"i < activeIndex\"\n      *ngIf=\"!isContentReady\"\n    >\n      <ng-template [ngTemplateOutlet]=\"step.indicatorTemplate\"></ng-template>\n      <ng-template [ngTemplateOutlet]=\"step.labelTemplate\"></ng-template>\n    </div>\n  </ng-container>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        StepperComponent.ctorParameters = function () { return []; };
        StepperComponent.propDecorators = {
            className: [{ type: core.Input }],
            activeIndex: [{ type: core.Input }],
            showTicks: [{ type: core.Input }],
            steps: [{ type: core.ContentChildren, args: [StepComponent,] }]
        };
        return StepperComponent;
    }());
    if (false) {
        /** @type {?} */
        StepperComponent.defaultProps;
        /** @type {?} */
        StepperComponent.prototype.className;
        /** @type {?} */
        StepperComponent.prototype.activeIndex;
        /** @type {?} */
        StepperComponent.prototype.showTicks;
        /** @type {?} */
        StepperComponent.prototype.steps;
        /** @type {?} */
        StepperComponent.prototype.prefix;
        /** @type {?} */
        StepperComponent.prototype.isContentReady;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/stepper/stepper.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeStepperModule = /** @class */ (function () {
        function MaterializeStepperModule() {
        }
        MaterializeStepperModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            StepComponent,
                            StepIndicatorComponent,
                            StepLabelComponent,
                            StepperComponent
                        ],
                        exports: [
                            StepComponent,
                            StepIndicatorComponent,
                            StepLabelComponent,
                            StepperComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeIconModule
                        ]
                    },] }
        ];
        return MaterializeStepperModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/stepper/stepper.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function StepperModel() { }
    if (false) {
        /** @type {?} */
        StepperModel.prototype.activeIndex;
        /** @type {?} */
        StepperModel.prototype.className;
        /** @type {?} */
        StepperModel.prototype.showTicks;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/switch/switch.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SwitchComponent = /** @class */ (function () {
        function SwitchComponent() {
            this.className = SwitchComponent.defaultProps.className;
            this.disabled = SwitchComponent.defaultProps.disabled;
            this.id = SwitchComponent.defaultProps.id;
            this.name = SwitchComponent.defaultProps.name;
            this.required = SwitchComponent.defaultProps.required;
            this.value = SwitchComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.onChangeEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        SwitchComponent.prototype.toggleValue = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = false;
                this.value = !this.value;
                this.onChange(this.value);
                this.onChangeEmitter.emit(this.value);
            }
        };
        /**
         * @return {?}
         */
        SwitchComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.isFocused = false;
        };
        /**
         * @return {?}
         */
        SwitchComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
                this.onTouched();
            }
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        SwitchComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SwitchComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SwitchComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        SwitchComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        SwitchComponent.prototype.onChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) { };
        /**
         * @return {?}
         */
        SwitchComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        SwitchComponent.defaultProps = {
            className: '',
            disabled: false,
            id: null,
            name: '',
            required: false,
            value: false
        };
        SwitchComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return SwitchComponent; }))
                            }],
                        selector: config.components.prefix + "-switch }",
                        template: "<div [ngClass]=\"[prefix + '-switch', className]\"\n\n  (click)=\"toggleValue()\"\n  (focus)=\"onFocus()\"\n  (blur)=\"onBlur()\"\n\n  [class.active]=\"value\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n>\n  <div [ngClass]=\"prefix + '-switch-label'\">\n    <ng-content></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-switch-track'\">\n    <div [ngClass]=\"prefix + '-switch-indicator'\">\n      <div [ngClass]=\"prefix + '-switch-indicator-ripple'\" materializeRipple [isRippleActive]=\"!disabled\" [rippleDuration]=\"200\"></div>\n    </div>\n  </div>\n\n  <input type=\"checkbox\" [disabled]=\"disabled\" [attr.id]=\"id\" [name]=\"name\" [required]=\"required\" [value]=\"value\" />\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        SwitchComponent.ctorParameters = function () { return []; };
        SwitchComponent.propDecorators = {
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            id: [{ type: core.Input }],
            name: [{ type: core.Input }],
            required: [{ type: core.Input }],
            value: [{ type: core.Input }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }]
        };
        return SwitchComponent;
    }());
    if (false) {
        /** @type {?} */
        SwitchComponent.defaultProps;
        /** @type {?} */
        SwitchComponent.prototype.className;
        /** @type {?} */
        SwitchComponent.prototype.disabled;
        /** @type {?} */
        SwitchComponent.prototype.id;
        /** @type {?} */
        SwitchComponent.prototype.name;
        /** @type {?} */
        SwitchComponent.prototype.required;
        /** @type {?} */
        SwitchComponent.prototype.value;
        /** @type {?} */
        SwitchComponent.prototype.onChangeEmitter;
        /** @type {?} */
        SwitchComponent.prototype.prefix;
        /** @type {?} */
        SwitchComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/switch/switch.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeSwitchModule = /** @class */ (function () {
        function MaterializeSwitchModule() {
        }
        MaterializeSwitchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [SwitchComponent],
                        exports: [SwitchComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeSwitchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/switch/switch.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function SwitchModel() { }
    if (false) {
        /** @type {?} */
        SwitchModel.prototype.className;
        /** @type {?} */
        SwitchModel.prototype.disabled;
        /** @type {?} */
        SwitchModel.prototype.id;
        /** @type {?} */
        SwitchModel.prototype.name;
        /** @type {?} */
        SwitchModel.prototype.required;
        /** @type {?} */
        SwitchModel.prototype.value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/tab-group/tab/tab.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TabComponent = /** @class */ (function () {
        function TabComponent() {
            this.className = TabComponent.defaultProps.className;
            this.disabled = TabComponent.defaultProps.disabled;
            this.link = TabComponent.defaultProps.link;
            this.title = TabComponent.defaultProps.title;
            this.isActive = false;
        }
        TabComponent.defaultProps = {
            className: '',
            disabled: false,
            link: '',
            title: ''
        };
        TabComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-tab }",
                        template: "<div [hidden]=\"!isActive\" [ngClass]=\"className\">\n  <ng-content></ng-content>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        TabComponent.ctorParameters = function () { return []; };
        TabComponent.propDecorators = {
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            link: [{ type: core.Input }],
            title: [{ type: core.Input }]
        };
        return TabComponent;
    }());
    if (false) {
        /** @type {?} */
        TabComponent.defaultProps;
        /** @type {?} */
        TabComponent.prototype.className;
        /** @type {?} */
        TabComponent.prototype.disabled;
        /** @type {?} */
        TabComponent.prototype.link;
        /** @type {?} */
        TabComponent.prototype.title;
        /** @type {?} */
        TabComponent.prototype.isActive;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/tab-group/tab-group.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TabGroupComponent = /** @class */ (function () {
        function TabGroupComponent(router, renderer) {
            this.router = router;
            this.renderer = renderer;
            this.className = TabGroupComponent.defaultProps.className;
            this.selectedIndex = TabGroupComponent.defaultProps.selectedIndex;
            this.transitionDuration = TabGroupComponent.defaultProps.transitionDuration;
            this.prefix = config.components.prefix;
            this.onTabSelectEmitter = new core.EventEmitter();
            this.supportedEvents = supportedEvents();
            this.update = this.update.bind(this);
            window.addEventListener(this.supportedEvents.resize, this.update);
        }
        /**
         * @return {?}
         */
        TabGroupComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            setTimeout(this.update, 250);
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        TabGroupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.selectedIndex && !changes.selectedIndex.isFirstChange()) {
                this.moveIndicator(changes.selectedIndex.currentValue, true);
            }
        };
        /**
         * @return {?}
         */
        TabGroupComponent.prototype.update = /**
         * @return {?}
         */
        function () {
            this.moveIndicator(this.selectedIndex, false);
        };
        /**
         * @param {?} index
         * @return {?}
         */
        TabGroupComponent.prototype.selectTab = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            var _this = this;
            /** @type {?} */
            var tabs = this.tabs.toArray();
            /** @type {?} */
            var selectedTab = tabs[index];
            if (!selectedTab.disabled) {
                this.selectedIndex = index;
                this.onTabSelectEmitter.emit(index);
                this.moveIndicator(this.selectedIndex, true);
                if (selectedTab.link) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.router.navigate([selectedTab.link]);
                    }), this.transitionDuration);
                }
            }
        };
        /**
         * @param {?} index
         * @return {?}
         */
        TabGroupComponent.prototype.activateIndex = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this.tabs.forEach((/**
             * @param {?} tab
             * @param {?} i
             * @return {?}
             */
            function (tab, i) {
                tab.isActive = i === index;
            }));
        };
        /**
         * @param {?} index
         * @param {?} hasAnimation
         * @return {?}
         */
        TabGroupComponent.prototype.moveIndicator = /**
         * @param {?} index
         * @param {?} hasAnimation
         * @return {?}
         */
        function (index, hasAnimation) {
            this.activateIndex(index);
            /** @type {?} */
            var child = this.headerRef.nativeElement.children[index];
            /** @type {?} */
            var transitionDuration = hasAnimation
                ? this.transitionDuration + "ms"
                : null;
            this.renderer.setStyle(this.indicatorRef.nativeElement, 'transitionDuration', transitionDuration);
            this.renderer.setStyle(this.indicatorRef.nativeElement, 'width', child.offsetWidth + "px");
            this.renderer.setStyle(this.indicatorRef.nativeElement, 'transform', "translateX(" + child.offsetLeft + "px)");
        };
        TabGroupComponent.defaultProps = {
            className: '',
            selectedIndex: 0,
            transitionDuration: 450
        };
        TabGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: config.components.prefix + "-tab-group }",
                        template: "<div [ngClass]=\"className\">\n  <ul [ngClass]=\"prefix + '-tab-group'\" #header>\n\n    <li (click)=\"selectTab(i)\"\n      *ngFor=\"let tab of tabs; let i = index\"\n\n      [ngClass]=\"prefix + '-tab-group-item'\"\n      [class.active]=\"i === selectedIndex\"\n      [class.disabled]=\"tab.disabled\"\n      [isRippleActive]=\"!tab.disabled\"\n\n      materializeRipple\n    >\n      {{ tab.title }}\n    </li>\n\n    <div [ngClass]=\"prefix + '-tab-group-indicator-container'\" #indicator>\n      <div [ngClass]=\"prefix + '-tab-group-indicator'\"></div>\n    </div>\n  </ul>\n  \n  <div>\n    <ng-content select=\"materialize-tab\"></ng-content>\n  </div>\n</div>\n"
                    }] }
        ];
        /** @nocollapse */
        TabGroupComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: core.Renderer2 }
        ]; };
        TabGroupComponent.propDecorators = {
            tabs: [{ type: core.ContentChildren, args: [TabComponent,] }],
            indicatorRef: [{ type: core.ViewChild, args: ['indicator', { static: true },] }],
            headerRef: [{ type: core.ViewChild, args: ['header', { static: true },] }],
            onTabSelectEmitter: [{ type: core.Output, args: ['onSelectTab',] }],
            className: [{ type: core.Input }],
            selectedIndex: [{ type: core.Input }],
            transitionDuration: [{ type: core.Input }]
        };
        return TabGroupComponent;
    }());
    if (false) {
        /** @type {?} */
        TabGroupComponent.defaultProps;
        /** @type {?} */
        TabGroupComponent.prototype.tabs;
        /** @type {?} */
        TabGroupComponent.prototype.indicatorRef;
        /** @type {?} */
        TabGroupComponent.prototype.headerRef;
        /** @type {?} */
        TabGroupComponent.prototype.onTabSelectEmitter;
        /** @type {?} */
        TabGroupComponent.prototype.className;
        /** @type {?} */
        TabGroupComponent.prototype.selectedIndex;
        /** @type {?} */
        TabGroupComponent.prototype.transitionDuration;
        /** @type {?} */
        TabGroupComponent.prototype.prefix;
        /** @type {?} */
        TabGroupComponent.prototype.supportedEvents;
        /**
         * @type {?}
         * @private
         */
        TabGroupComponent.prototype.router;
        /**
         * @type {?}
         * @private
         */
        TabGroupComponent.prototype.renderer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/tab-group/tab-group.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeTabGroupModule = /** @class */ (function () {
        function MaterializeTabGroupModule() {
        }
        MaterializeTabGroupModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            TabComponent,
                            TabGroupComponent
                        ],
                        exports: [
                            TabComponent,
                            TabGroupComponent
                        ],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule
                        ]
                    },] }
        ];
        return MaterializeTabGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/tab-group/tab-group.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function TabGroupModel() { }
    if (false) {
        /** @type {?} */
        TabGroupModel.prototype.className;
        /** @type {?} */
        TabGroupModel.prototype.selectedIndex;
        /** @type {?} */
        TabGroupModel.prototype.transitionDuration;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/tab-group/tab/tab.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function TabModel() { }
    if (false) {
        /** @type {?} */
        TabModel.prototype.className;
        /** @type {?} */
        TabModel.prototype.disabled;
        /** @type {?} */
        TabModel.prototype.link;
        /** @type {?} */
        TabModel.prototype.title;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/textarea/textarea.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextAreaComponent = /** @class */ (function () {
        function TextAreaComponent() {
            this.className = TextAreaComponent.defaultProps.className;
            this.disabled = TextAreaComponent.defaultProps.disabled;
            this.floatLabel = TextAreaComponent.defaultProps.floatLabel;
            this.hasCounter = TextAreaComponent.defaultProps.hasCounter;
            this.id = TextAreaComponent.defaultProps.id;
            this.maxLength = TextAreaComponent.defaultProps.maxLength;
            this.minLength = TextAreaComponent.defaultProps.minLength;
            this.name = TextAreaComponent.defaultProps.name;
            this.placeholder = TextAreaComponent.defaultProps.placeholder;
            this.required = TextAreaComponent.defaultProps.required;
            this.rows = TextAreaComponent.defaultProps.rows;
            this.value = TextAreaComponent.defaultProps.value;
            this.prefix = config.components.prefix;
            this.isFocused = false;
            this.onBlurEmitter = new core.EventEmitter();
            this.onChangeEmitter = new core.EventEmitter();
            this.onFocusEmitter = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        TextAreaComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.onBlurEmitter.emit();
            this.isFocused = false;
        };
        /**
         * @return {?}
         */
        TextAreaComponent.prototype.onFocus = /**
         * @return {?}
         */
        function () {
            if (!this.disabled) {
                this.isFocused = true;
                this.onTouched();
                this.onFocusEmitter.emit();
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        TextAreaComponent.prototype.onChange = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var value = event.target.value;
            this.value = value;
            this.onChangeEmitter.emit(event);
            this.onTextAreaChange(value);
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        TextAreaComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        TextAreaComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.value = value;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        TextAreaComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTextAreaChange = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        TextAreaComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouched = fn;
        };
        /**
         * @param {?} value
         * @return {?}
         */
        TextAreaComponent.prototype.onTextAreaChange = /**
         * @param {?} value
         * @return {?}
         */
        function (value) { };
        /**
         * @return {?}
         */
        TextAreaComponent.prototype.onTouched = /**
         * @return {?}
         */
        function () { };
        TextAreaComponent.defaultProps = {
            className: '',
            disabled: false,
            floatLabel: '',
            hasCounter: false,
            id: null,
            maxLength: 500,
            minLength: 0,
            name: '',
            placeholder: '',
            required: false,
            rows: 1,
            value: ''
        };
        TextAreaComponent.decorators = [
            { type: core.Component, args: [{
                        providers: [{
                                multi: true,
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return TextAreaComponent; }))
                            }],
                        selector: config.components.prefix + "-textarea }",
                        template: "<div (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n  [ngClass]=\"[prefix + '-form-control-container', className]\"\n  [class.float-label]=\"floatLabel\"\n  [class.active]=\"value || placeholder\"\n  [class.focused]=\"isFocused\"\n  [class.disabled]=\"disabled\"\n>\n  <div [ngClass]=\"prefix + '-form-control-wrapper'\">\n    <div [ngClass]=\"prefix + '-form-control-label'\">{{ floatLabel }}</div>\n\n    <textarea (input)=\"onChange($event)\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n      [ngClass]=\"prefix + '-form-control'\"\n      [disabled]=\"disabled\"\n      [attr.id]=\"id\"\n      [maxLength]=\"maxLength\"\n      [minLength]=\"minLength\"\n      [name]=\"name\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      [rows]=\"rows\"\n      [value]=\"value\">\n    </textarea>\n  </div>\n</div>\n\n<materialize-form-message type=\"info\" *ngIf=\"hasCounter\">{{ value.length }} / {{ maxLength }}</materialize-form-message>\n"
                    }] }
        ];
        /** @nocollapse */
        TextAreaComponent.ctorParameters = function () { return []; };
        TextAreaComponent.propDecorators = {
            onFocusEmitter: [{ type: core.Output, args: ['onFocus',] }],
            onChangeEmitter: [{ type: core.Output, args: ['onChange',] }],
            onBlurEmitter: [{ type: core.Output, args: ['onBlur',] }],
            className: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            floatLabel: [{ type: core.Input }],
            hasCounter: [{ type: core.Input }],
            id: [{ type: core.Input }],
            maxLength: [{ type: core.Input }],
            minLength: [{ type: core.Input }],
            name: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            required: [{ type: core.Input }],
            rows: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return TextAreaComponent;
    }());
    if (false) {
        /** @type {?} */
        TextAreaComponent.defaultProps;
        /** @type {?} */
        TextAreaComponent.prototype.onFocusEmitter;
        /** @type {?} */
        TextAreaComponent.prototype.onChangeEmitter;
        /** @type {?} */
        TextAreaComponent.prototype.onBlurEmitter;
        /** @type {?} */
        TextAreaComponent.prototype.className;
        /** @type {?} */
        TextAreaComponent.prototype.disabled;
        /** @type {?} */
        TextAreaComponent.prototype.floatLabel;
        /** @type {?} */
        TextAreaComponent.prototype.hasCounter;
        /** @type {?} */
        TextAreaComponent.prototype.id;
        /** @type {?} */
        TextAreaComponent.prototype.maxLength;
        /** @type {?} */
        TextAreaComponent.prototype.minLength;
        /** @type {?} */
        TextAreaComponent.prototype.name;
        /** @type {?} */
        TextAreaComponent.prototype.placeholder;
        /** @type {?} */
        TextAreaComponent.prototype.required;
        /** @type {?} */
        TextAreaComponent.prototype.rows;
        /** @type {?} */
        TextAreaComponent.prototype.value;
        /** @type {?} */
        TextAreaComponent.prototype.prefix;
        /** @type {?} */
        TextAreaComponent.prototype.isFocused;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/textarea/textarea.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MaterializeTextAreaModule = /** @class */ (function () {
        function MaterializeTextAreaModule() {
        }
        MaterializeTextAreaModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [TextAreaComponent],
                        exports: [TextAreaComponent],
                        imports: [
                            common.CommonModule,
                            MaterializeCommonModule,
                            MaterializeFormMessageModule
                        ]
                    },] }
        ];
        return MaterializeTextAreaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: app/completed-components/textarea/textarea.model.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @license
     * Copyright Workylab. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
     */
    /**
     * @record
     */
    function TextAreaModel() { }
    if (false) {
        /** @type {?} */
        TextAreaModel.prototype.className;
        /** @type {?} */
        TextAreaModel.prototype.disabled;
        /** @type {?} */
        TextAreaModel.prototype.floatLabel;
        /** @type {?} */
        TextAreaModel.prototype.hasCounter;
        /** @type {?} */
        TextAreaModel.prototype.id;
        /** @type {?} */
        TextAreaModel.prototype.maxLength;
        /** @type {?} */
        TextAreaModel.prototype.minLength;
        /** @type {?} */
        TextAreaModel.prototype.name;
        /** @type {?} */
        TextAreaModel.prototype.placeholder;
        /** @type {?} */
        TextAreaModel.prototype.required;
        /** @type {?} */
        TextAreaModel.prototype.rows;
        /** @type {?} */
        TextAreaModel.prototype.value;
    }

    exports.AccordionComponent = AccordionComponent;
    exports.BUTTON_LEVELS = BUTTON_LEVELS;
    exports.BUTTON_TYPES = BUTTON_TYPES;
    exports.ButtonComponent = ButtonComponent;
    exports.ButtonToggleComponent = ButtonToggleComponent;
    exports.ButtonToggleGroupComponent = ButtonToggleGroupComponent;
    exports.CalendarComponent = CalendarComponent;
    exports.CardComponent = CardComponent;
    exports.CheckboxComponent = CheckboxComponent;
    exports.CollapsibleComponent = CollapsibleComponent;
    exports.CollapsibleContentComponent = CollapsibleContentComponent;
    exports.CollapsibleTitleComponent = CollapsibleTitleComponent;
    exports.DRAWER_POSITIONS = DRAWER_POSITIONS;
    exports.DRAWER_TYPES = DRAWER_TYPES;
    exports.DatePickerComponent = DatePickerComponent;
    exports.DrawerComponent = DrawerComponent;
    exports.DrawerContainerComponent = DrawerContainerComponent;
    exports.DrawerContentComponent = DrawerContentComponent;
    exports.DrawerModel = DrawerModel;
    exports.FORM_MESSAGE_LEVELS = FORM_MESSAGE_LEVELS;
    exports.FormMessageComponent = FormMessageComponent;
    exports.GlossaryComponent = GlossaryComponent;
    exports.GlossaryItemComponent = GlossaryItemComponent;
    exports.HTMLVisualizerComponent = HTMLVisualizerComponent;
    exports.ICON_SIZES = ICON_SIZES;
    exports.INPUT_TYPE = INPUT_TYPE;
    exports.IconComponent = IconComponent;
    exports.InputComponent = InputComponent;
    exports.LabelComponent = LabelComponent;
    exports.MaterializeAccordionModule = MaterializeAccordionModule;
    exports.MaterializeButtonModule = MaterializeButtonModule;
    exports.MaterializeButtonToggleGroupModule = MaterializeButtonToggleGroupModule;
    exports.MaterializeCalendarModule = MaterializeCalendarModule;
    exports.MaterializeCardModule = MaterializeCardModule;
    exports.MaterializeCheckboxModule = MaterializeCheckboxModule;
    exports.MaterializeCollapsibleModule = MaterializeCollapsibleModule;
    exports.MaterializeCommonModule = MaterializeCommonModule;
    exports.MaterializeDatePickerModule = MaterializeDatePickerModule;
    exports.MaterializeDrawerModule = MaterializeDrawerModule;
    exports.MaterializeFormMessageModule = MaterializeFormMessageModule;
    exports.MaterializeGlossaryModule = MaterializeGlossaryModule;
    exports.MaterializeHTMLVisualizerModule = MaterializeHTMLVisualizerModule;
    exports.MaterializeIconModule = MaterializeIconModule;
    exports.MaterializeInputModule = MaterializeInputModule;
    exports.MaterializeLabelModule = MaterializeLabelModule;
    exports.MaterializeModalModule = MaterializeModalModule;
    exports.MaterializeNavbarModule = MaterializeNavbarModule;
    exports.MaterializeRadioGroupModule = MaterializeRadioGroupModule;
    exports.MaterializeScrollSpyModule = MaterializeScrollSpyModule;
    exports.MaterializeSelectModule = MaterializeSelectModule;
    exports.MaterializeSliderModule = MaterializeSliderModule;
    exports.MaterializeStepperModule = MaterializeStepperModule;
    exports.MaterializeSwitchModule = MaterializeSwitchModule;
    exports.MaterializeTabGroupModule = MaterializeTabGroupModule;
    exports.MaterializeTextAreaModule = MaterializeTextAreaModule;
    exports.ModalComponent = ModalComponent;
    exports.NavbarComponent = NavbarComponent;
    exports.PrefixDirective = PrefixDirective;
    exports.RadioComponent = RadioComponent;
    exports.RadioGroupComponent = RadioGroupComponent;
    exports.RippleDirective = RippleDirective;
    exports.ScrollSpyComponent = ScrollSpyComponent;
    exports.ScrollSpyItemComponent = ScrollSpyItemComponent;
    exports.SelectComponent = SelectComponent;
    exports.SelectOptionComponent = SelectOptionComponent;
    exports.SliderComponent = SliderComponent;
    exports.SliderIndicatorComponent = SliderIndicatorComponent;
    exports.SliderOptionComponent = SliderOptionComponent;
    exports.StepComponent = StepComponent;
    exports.StepIndicatorComponent = StepIndicatorComponent;
    exports.StepLabelComponent = StepLabelComponent;
    exports.StepperComponent = StepperComponent;
    exports.SuffixDirective = SuffixDirective;
    exports.SwitchComponent = SwitchComponent;
    exports.TabComponent = TabComponent;
    exports.TabGroupComponent = TabGroupComponent;
    exports.TextAreaComponent = TextAreaComponent;
    exports.ɵa = config;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=materialize-angular.umd.js.map
