/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SwitchModel } from './switch.model';
import * as ɵngcc0 from '@angular/core';
export declare class SwitchComponent implements ControlValueAccessor, SwitchModel {
    static readonly defaultProps: SwitchModel;
    className: string;
    disabled: boolean;
    id: string | null;
    name: string;
    required: boolean;
    value: boolean;
    onChangeEmitter: EventEmitter<boolean>;
    prefix: string;
    isFocused: boolean;
    constructor();
    toggleValue(): void;
    onBlur(): void;
    onFocus(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: (value: boolean) => void): void;
    registerOnTouched(fn: () => void): void;
    onChange(value: boolean): void;
    onTouched(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwitchComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SwitchComponent, "materialize-switch }", never, { "className": "className"; "disabled": "disabled"; "id": "id"; "name": "name"; "required": "required"; "value": "value"; }, { "onChangeEmitter": "onChange"; }, never, ["*"]>;
}

//# sourceMappingURL=switch.component.d.ts.map