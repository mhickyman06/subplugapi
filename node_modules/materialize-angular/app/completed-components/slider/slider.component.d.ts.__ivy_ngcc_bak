/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, QueryList, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SliderModel } from './slider.model';
import { SliderOptionComponent } from './slider-option/slider-option.component';
import { SupportedEventsModel } from '../../components/common/models/supported-events.model';
export declare class SliderComponent implements AfterContentInit, AfterViewInit, ControlValueAccessor, SliderModel {
    private renderer;
    static readonly tickClassName: string;
    static readonly defaultProps: SliderModel;
    options: QueryList<SliderOptionComponent>;
    sliderIndicatorContainer: ElementRef;
    sliderTrack: ElementRef;
    sliderTrackBackground: ElementRef;
    sliderTrackInterval: ElementRef;
    onChangeEmitter: EventEmitter<number | string | boolean | null>;
    className: string;
    disabled: boolean;
    required: boolean;
    showLabels: boolean;
    showTicks: boolean;
    value: number | string | boolean | null;
    prefix: string;
    isFocused: boolean;
    supportedEvents: SupportedEventsModel;
    constructor(renderer: Renderer2);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    update(): void;
    registerEventOptions(): void;
    onOptionClick(value: number | string | boolean | null): void;
    renderPositions(): void;
    removeTicks(): void;
    actionDown(event: any): void;
    actionMove(event: any): void;
    actionUp(event: any): void;
    moveToValue(value: number | string | boolean | null, hasAnimation: boolean): void;
    activeOption(value: number | string | boolean | null): void;
    getValueFromXCoordinate(x: number): string | number | boolean;
    getIndexFromXCoordinate(x: number): number;
    getXCoordinateByEventType(event: any, eventType: string): number;
    getXCoordinate(event: any, eventType: string): any;
    getPixelInterval(): number;
    animate(x: number, hasAnimation: boolean): void;
    onFocus(): void;
    onBlur(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: number | string | boolean | null): void;
    registerOnChange(fn: (value: number | string | boolean | null) => void): void;
    registerOnTouched(fn: () => void): void;
    onChange(value: number | string | boolean | null): void;
    onTouched(): void;
}
