/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { AfterContentInit, EventEmitter, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { RadioComponent } from './radio/radio.component';
import { RadioGroupModel } from './radio-group.model';
import * as ɵngcc0 from '@angular/core';
export declare class RadioGroupComponent implements AfterContentInit, ControlValueAccessor, RadioGroupModel {
    static readonly defaultProps: RadioGroupModel;
    radiosQueryList: QueryList<RadioComponent>;
    onChangeEmitter: EventEmitter<string>;
    canUncheck: boolean;
    className: string;
    disabled: boolean;
    name: string;
    required: boolean;
    value: string;
    prefix: string;
    isFocused: boolean;
    constructor();
    ngAfterContentInit(): void;
    initRadios(): void;
    registerRadios(): void;
    toggleRadios(value: string): void;
    setValueAllRadios(value: string): void;
    disableAllRadios(disabled: boolean): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string): void;
    registerOnChange(fn: (value: string) => void): void;
    registerOnTouched(fn: () => void): void;
    onChange(value: string): void;
    onTouched(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RadioGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RadioGroupComponent, "materialize-radio-group }", never, { "canUncheck": "canUncheck"; "className": "className"; "disabled": "disabled"; "name": "name"; "required": "required"; "value": "value"; }, { "onChangeEmitter": "onChange"; }, ["radiosQueryList"], ["materialize-radio"]>;
}

//# sourceMappingURL=radio-group.component.d.ts.map