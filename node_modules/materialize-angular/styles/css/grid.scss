/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */

@import '../theme/main';

$materialize-grid-columns: 12;
$materialize-grid-gap-size: 16px;
$materialize-media-breakpoint-sm: 576px;
$materialize-media-breakpoint-md: 768px;
$materialize-media-breakpoint-lg: 992px;
$materialize-media-breakpoint-xl: 1200px;
$materialize-container-max-width-sm: 540px;
$materialize-container-max-width-md: 720px;
$materialize-container-max-width-lg: 960px;
$materialize-container-max-width-xl: 1140px;
$materialize-media-breakpoints: (
  sm: (
    breakpoint: 576px,
    container-width: 540px,
    min: 576px,
    max: 767px
  ),
  md: (
    breakpoint: 768px,
    container-width: 720px,
    min: 768px,
    max: 991px
  ),
  lg: (
    breakpoint: 992px,
    container-width: 960px,
    min: 992px,
    max: 1199px
  ),
  xl: (
    breakpoint: 1200px,
    container-width: 1140px,
    min: 1200px
  )
);

.#{$materialize-prefix}-container,
.#{$materialize-prefix}-container-fluid {
  margin-left: auto;
  margin-right: auto;
  padding-left: $materialize-grid-gap-size;
  padding-right: $materialize-grid-gap-size;
  width: 100%;
}

.#{$materialize-prefix}-row {
  display: grid;
  grid-auto-rows: min-content;
  grid-template-columns: repeat($materialize-grid-columns, 1fr);
  margin-left: -$materialize-grid-gap-size;
  margin-right: -$materialize-grid-gap-size;
}

.#{$materialize-prefix}-row-gap {
  grid-gap: $materialize-grid-gap-size;
}

[class^='#{$materialize-prefix}-col-'] {
  padding: 0 $materialize-grid-gap-size;
}

@mixin generate-container-rules($materialize-breakpoints) {
  @each $key, $value in $materialize-breakpoints {
    @media (min-width: map-get($value, 'breakpoint')) {
      .#{$materialize-prefix}-container {
        max-width: map-get($value, 'container-width');
      }
    }
  }
}

@mixin generate-hidden-classes($materialize-media-queries) {
  @each $key, $value in $materialize-media-queries {
    @if map-get($value, 'max') {
      @media (min-width: map-get($value, 'min')) and (max-width: map-get($value, 'max')) {
        .#{$materialize-prefix}-hidden-#{$key} {
          display: none;
        }
      }
    }
    @else {
      @media (min-width: map-get($value, 'min')) {
        .#{$materialize-prefix}-hidden-#{$key} {
          display: none;
        }
      }
    }
  }
}

@mixin generate-columns($columns, $materialize-breakpoints) {
  @for $i from 1 through $columns {
    .#{$materialize-prefix}-col-#{$i} {
      grid-column: span $i;
    }
  }

  @each $key, $value in $materialize-breakpoints {
    @media (min-width: map-get($value, 'breakpoint')) {
      @for $i from 1 through $columns {
        .#{$materialize-prefix}-col-#{$key}-#{$i} {
          grid-column: span $i;
        }
      }
    }
  }
}

@include generate-columns($materialize-grid-columns, $materialize-media-breakpoints);
@include generate-hidden-classes($materialize-media-breakpoints);
@include generate-container-rules($materialize-media-breakpoints);
