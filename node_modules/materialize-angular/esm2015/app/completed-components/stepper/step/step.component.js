/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/stepper/step/step.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, TemplateRef, ViewChild } from '@angular/core';
import { config } from '../../../config';
export class StepComponent {
    constructor() {
        this.prefix = config.components.prefix;
        this.isCompleted = false;
    }
}
StepComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-step }`,
                template: "<ng-template #indicatorTemplate>\n  <div [ngClass]=\"prefix + '-step-indicator'\">\n    <materialize-icon [className]=\"prefix + '-step-indicator-icon'\" *ngIf=\"isCompleted\">done</materialize-icon>\n    <ng-content select=\"materialize-step-indicator\" *ngIf=\"!isCompleted\"></ng-content>\n  </div>\n</ng-template>\n<ng-template #labelTemplate>\n  <ng-content select=\"materialize-step-label\"></ng-content>\n</ng-template>\n"
            }] }
];
/** @nocollapse */
StepComponent.ctorParameters = () => [];
StepComponent.propDecorators = {
    labelTemplate: [{ type: ViewChild, args: ['labelTemplate', { static: false },] }],
    indicatorTemplate: [{ type: ViewChild, args: ['indicatorTemplate', { static: false },] }]
};
if (false) {
    /** @type {?} */
    StepComponent.prototype.labelTemplate;
    /** @type {?} */
    StepComponent.prototype.indicatorTemplate;
    /** @type {?} */
    StepComponent.prototype.prefix;
    /** @type {?} */
    StepComponent.prototype.isCompleted;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL3N0ZXBwZXIvc3RlcC9zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBTXpDLE1BQU0sT0FBTyxhQUFhO0lBUXhCO1FBSk8sV0FBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBS3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0lBQzNCLENBQUM7OztZQWRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsR0FBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU8sU0FBUztnQkFDaEQsd2JBQW9DO2FBQ3JDOzs7Ozs0QkFFRSxTQUFTLFNBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtnQ0FDNUMsU0FBUyxTQUFDLG1CQUFtQixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTs7OztJQURqRCxzQ0FBK0U7O0lBQy9FLDBDQUF1Rjs7SUFFdkYsK0JBQXlDOztJQUV6QyxvQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LXN0ZXAgfWAsXG4gIHRlbXBsYXRlVXJsOiAnLi9zdGVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTdGVwQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgnbGFiZWxUZW1wbGF0ZScsIHsgc3RhdGljOiBmYWxzZSB9KSBsYWJlbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBAVmlld0NoaWxkKCdpbmRpY2F0b3JUZW1wbGF0ZScsIHsgc3RhdGljOiBmYWxzZSB9KSBpbmRpY2F0b3JUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICBwdWJsaWMgcHJlZml4ID0gY29uZmlnLmNvbXBvbmVudHMucHJlZml4O1xuXG4gIHB1YmxpYyBpc0NvbXBsZXRlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlzQ29tcGxldGVkID0gZmFsc2U7XG4gIH1cbn1cbiJdfQ==