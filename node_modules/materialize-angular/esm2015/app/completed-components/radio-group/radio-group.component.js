/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/radio-group/radio-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ContentChildren, EventEmitter, forwardRef, Input, Output, QueryList } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { config } from '../../config';
import { RadioComponent } from './radio/radio.component';
export class RadioGroupComponent {
    constructor() {
        this.canUncheck = RadioGroupComponent.defaultProps.canUncheck;
        this.className = RadioGroupComponent.defaultProps.className;
        this.disabled = RadioGroupComponent.defaultProps.disabled;
        this.name = RadioGroupComponent.defaultProps.name;
        this.required = RadioGroupComponent.defaultProps.required;
        this.value = RadioGroupComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.initRadios = this.initRadios.bind(this);
        this.registerRadios = this.registerRadios.bind(this);
        this.toggleRadios = this.toggleRadios.bind(this);
        this.onChangeEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.initRadios();
        this.radiosQueryList.changes.subscribe(this.initRadios);
    }
    /**
     * @return {?}
     */
    initRadios() {
        this.disableAllRadios(this.disabled);
        setTimeout(this.registerRadios, 0);
    }
    /**
     * @return {?}
     */
    registerRadios() {
        this.radiosQueryList.forEach((/**
         * @param {?} radio
         * @return {?}
         */
        radio => {
            radio.isActive = (radio.value === this.value);
            radio.onClickEmitter.subscribe(this.toggleRadios);
        }));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    toggleRadios(value) {
        this.setValueAllRadios(value);
        /** @type {?} */
        const currentRadio = this.radiosQueryList.find((/**
         * @param {?} radio
         * @return {?}
         */
        radio => radio.value === value));
        this.value = currentRadio && currentRadio.isActive
            ? currentRadio.value
            : '';
        this.onTouched();
        this.onChange(this.value);
        this.onChangeEmitter.emit(this.value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValueAllRadios(value) {
        this.radiosQueryList.forEach((/**
         * @param {?} radio
         * @return {?}
         */
        radio => {
            if (radio.value !== value) {
                radio.isActive = false;
            }
            if (radio.value === value && !this.canUncheck) {
                radio.isActive = true;
            }
        }));
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    disableAllRadios(disabled) {
        this.radiosQueryList.forEach((/**
         * @param {?} radio
         * @return {?}
         */
        radio => {
            radio.disabled = disabled;
        }));
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.disableAllRadios(this.disabled);
        }), 0);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setValueAllRadios(this.value);
        }), 0);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) {
    }
    /**
     * @return {?}
     */
    onTouched() { }
}
RadioGroupComponent.defaultProps = {
    canUncheck: false,
    className: '',
    disabled: false,
    name: '',
    required: false,
    value: ''
};
RadioGroupComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RadioGroupComponent))
                    }],
                selector: `${config.components.prefix}-radio-group }`,
                template: "<div [ngClass]=\"[prefix + '-radio-group', className]\">\n  <ng-content select=\"materialize-radio\"></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
RadioGroupComponent.ctorParameters = () => [];
RadioGroupComponent.propDecorators = {
    radiosQueryList: [{ type: ContentChildren, args: [RadioComponent,] }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }],
    canUncheck: [{ type: Input }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RadioGroupComponent.defaultProps;
    /** @type {?} */
    RadioGroupComponent.prototype.radiosQueryList;
    /** @type {?} */
    RadioGroupComponent.prototype.onChangeEmitter;
    /** @type {?} */
    RadioGroupComponent.prototype.canUncheck;
    /** @type {?} */
    RadioGroupComponent.prototype.className;
    /** @type {?} */
    RadioGroupComponent.prototype.disabled;
    /** @type {?} */
    RadioGroupComponent.prototype.name;
    /** @type {?} */
    RadioGroupComponent.prototype.required;
    /** @type {?} */
    RadioGroupComponent.prototype.value;
    /** @type {?} */
    RadioGroupComponent.prototype.prefix;
    /** @type {?} */
    RadioGroupComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,