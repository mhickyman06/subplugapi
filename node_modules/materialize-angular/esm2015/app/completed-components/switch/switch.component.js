/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/switch/switch.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { config } from '../../config';
export class SwitchComponent {
    constructor() {
        this.className = SwitchComponent.defaultProps.className;
        this.disabled = SwitchComponent.defaultProps.disabled;
        this.id = SwitchComponent.defaultProps.id;
        this.name = SwitchComponent.defaultProps.name;
        this.required = SwitchComponent.defaultProps.required;
        this.value = SwitchComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isFocused = false;
        this.onChangeEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    toggleValue() {
        if (!this.disabled) {
            this.isFocused = false;
            this.value = !this.value;
            this.onChange(this.value);
            this.onChangeEmitter.emit(this.value);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
            this.onTouched();
        }
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onChange(value) { }
    /**
     * @return {?}
     */
    onTouched() { }
}
SwitchComponent.defaultProps = {
    className: '',
    disabled: false,
    id: null,
    name: '',
    required: false,
    value: false
};
SwitchComponent.decorators = [
    { type: Component, args: [{
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => SwitchComponent))
                    }],
                selector: `${config.components.prefix}-switch }`,
                template: "<div [ngClass]=\"[prefix + '-switch', className]\"\n\n  (click)=\"toggleValue()\"\n  (focus)=\"onFocus()\"\n  (blur)=\"onBlur()\"\n\n  [class.active]=\"value\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n>\n  <div [ngClass]=\"prefix + '-switch-label'\">\n    <ng-content></ng-content>\n  </div>\n\n  <div [ngClass]=\"prefix + '-switch-track'\">\n    <div [ngClass]=\"prefix + '-switch-indicator'\">\n      <div [ngClass]=\"prefix + '-switch-indicator-ripple'\" materializeRipple [isRippleActive]=\"!disabled\" [rippleDuration]=\"200\"></div>\n    </div>\n  </div>\n\n  <input type=\"checkbox\" [disabled]=\"disabled\" [attr.id]=\"id\" [name]=\"name\" [required]=\"required\" [value]=\"value\" />\n</div>\n"
            }] }
];
/** @nocollapse */
SwitchComponent.ctorParameters = () => [];
SwitchComponent.propDecorators = {
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    required: [{ type: Input }],
    value: [{ type: Input }],
    onChangeEmitter: [{ type: Output, args: ['onChange',] }]
};
if (false) {
    /** @type {?} */
    SwitchComponent.defaultProps;
    /** @type {?} */
    SwitchComponent.prototype.className;
    /** @type {?} */
    SwitchComponent.prototype.disabled;
    /** @type {?} */
    SwitchComponent.prototype.id;
    /** @type {?} */
    SwitchComponent.prototype.name;
    /** @type {?} */
    SwitchComponent.prototype.required;
    /** @type {?} */
    SwitchComponent.prototype.value;
    /** @type {?} */
    SwitchComponent.prototype.onChangeEmitter;
    /** @type {?} */
    SwitchComponent.prototype.prefix;
    /** @type {?} */
    SwitchComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsaXplLWFuZ3VsYXIvIiwic291cmNlcyI6WyJhcHAvY29tcGxldGVkLWNvbXBvbmVudHMvc3dpdGNoL3N3aXRjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFZdEMsTUFBTSxPQUFPLGVBQWU7SUF1QjFCO1FBYlMsY0FBUyxHQUFXLGVBQWUsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQzNELGFBQVEsR0FBWSxlQUFlLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUMxRCxPQUFFLEdBQWtCLGVBQWUsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO1FBQ3BELFNBQUksR0FBVyxlQUFlLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUNqRCxhQUFRLEdBQVksZUFBZSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDMUQsVUFBSyxHQUFZLGVBQWUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBSXRELFdBQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUt2QyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUV2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFDNUMsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUV6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFFdEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxVQUFtQjtRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFjO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBNEI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxFQUFjO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7O0lBRUQsUUFBUSxDQUFDLEtBQWMsSUFBUyxDQUFDOzs7O0lBRWpDLFNBQVMsS0FBVSxDQUFDOztBQXBFSiw0QkFBWSxHQUFnQjtJQUMxQyxTQUFTLEVBQUUsRUFBRTtJQUNiLFFBQVEsRUFBRSxLQUFLO0lBQ2YsRUFBRSxFQUFFLElBQUk7SUFDUixJQUFJLEVBQUUsRUFBRTtJQUNSLFFBQVEsRUFBRSxLQUFLO0lBQ2YsS0FBSyxFQUFFLEtBQUs7Q0FDYixDQUFDOztZQWpCSCxTQUFTLFNBQUM7Z0JBQ1QsU0FBUyxFQUFFLENBQUM7d0JBQ1YsS0FBSyxFQUFFLElBQUk7d0JBQ1gsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxlQUFlLEVBQUM7cUJBQy9DLENBQUM7Z0JBQ0YsUUFBUSxFQUFFLEdBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLFdBQVc7Z0JBQ2xELDJ3QkFBc0M7YUFDdkM7Ozs7O3dCQVdFLEtBQUs7dUJBQ0wsS0FBSztpQkFDTCxLQUFLO21CQUNMLEtBQUs7dUJBQ0wsS0FBSztvQkFDTCxLQUFLOzhCQUVMLE1BQU0sU0FBQyxVQUFVOzs7O0lBaEJsQiw2QkFPRTs7SUFFRixvQ0FBb0U7O0lBQ3BFLG1DQUFtRTs7SUFDbkUsNkJBQTZEOztJQUM3RCwrQkFBMEQ7O0lBQzFELG1DQUFtRTs7SUFDbkUsZ0NBQTZEOztJQUU3RCwwQ0FBMkQ7O0lBRTNELGlDQUF5Qzs7SUFFekMsb0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IFdvcmt5bGFiLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93b3JreWxhYi9tYXRlcmlhbGl6ZS1hbmd1bGFyL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBTd2l0Y2hNb2RlbCB9IGZyb20gJy4vc3dpdGNoLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHByb3ZpZGVyczogW3tcbiAgICBtdWx0aTogdHJ1ZSxcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTd2l0Y2hDb21wb25lbnQpXG4gIH1dLFxuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LXN3aXRjaCB9YCxcbiAgdGVtcGxhdGVVcmw6ICcuL3N3aXRjaC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU3dpdGNoQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFN3aXRjaE1vZGVsIHtcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wczogU3dpdGNoTW9kZWwgPSB7XG4gICAgY2xhc3NOYW1lOiAnJyxcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgaWQ6IG51bGwsXG4gICAgbmFtZTogJycsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIHZhbHVlOiBmYWxzZVxuICB9O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gU3dpdGNoQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gU3dpdGNoQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5kaXNhYmxlZDtcbiAgQElucHV0KCkgaWQ6IHN0cmluZyB8IG51bGwgPSBTd2l0Y2hDb21wb25lbnQuZGVmYXVsdFByb3BzLmlkO1xuICBASW5wdXQoKSBuYW1lOiBzdHJpbmcgPSBTd2l0Y2hDb21wb25lbnQuZGVmYXVsdFByb3BzLm5hbWU7XG4gIEBJbnB1dCgpIHJlcXVpcmVkOiBib29sZWFuID0gU3dpdGNoQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5yZXF1aXJlZDtcbiAgQElucHV0KCkgdmFsdWU6IGJvb2xlYW4gPSBTd2l0Y2hDb21wb25lbnQuZGVmYXVsdFByb3BzLnZhbHVlO1xuXG4gIEBPdXRwdXQoJ29uQ2hhbmdlJykgb25DaGFuZ2VFbWl0dGVyOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcblxuICBwdWJsaWMgaXNGb2N1c2VkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaXNGb2N1c2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLm9uQ2hhbmdlRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgfVxuXG4gIHRvZ2dsZVZhbHVlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudmFsdWUgPSAhdGhpcy52YWx1ZTtcblxuICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLnZhbHVlKTtcbiAgICAgIHRoaXMub25DaGFuZ2VFbWl0dGVyLmVtaXQodGhpcy52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKCk6IHZvaWQge1xuICAgIHRoaXMuaXNGb2N1c2VkID0gZmFsc2U7XG4gIH1cblxuICBvbkZvY3VzKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5pc0ZvY3VzZWQgPSB0cnVlO1xuXG4gICAgICB0aGlzLm9uVG91Y2hlZCgpO1xuICAgIH1cbiAgfVxuXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5vblRvdWNoZWQgPSBmbjtcbiAgfVxuXG4gIG9uQ2hhbmdlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7fVxuXG4gIG9uVG91Y2hlZCgpOiB2b2lkIHt9XG59XG4iXX0=