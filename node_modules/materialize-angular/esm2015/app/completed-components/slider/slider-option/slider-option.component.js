/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/slider/slider-option/slider-option.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { config } from '../../../config';
export class SliderOptionComponent {
    constructor() {
        this.className = SliderOptionComponent.defaultProps.className;
        this.value = SliderOptionComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.isActive = false;
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.onClickEmitter.emit(this.value);
    }
}
SliderOptionComponent.defaultProps = {
    className: '',
    value: null
};
SliderOptionComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-slider-option }`,
                template: "<div [ngClass]=\"[prefix + '-slider-option-container', className]\"\n  [class.active]=\"isActive\"\n\n  (click)=\"onClick()\"\n  #template>\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
SliderOptionComponent.ctorParameters = () => [];
SliderOptionComponent.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['template', { static: true },] }],
    className: [{ type: Input }],
    value: [{ type: Input }],
    onClickEmitter: [{ type: Output, args: ['onClick',] }]
};
if (false) {
    /** @type {?} */
    SliderOptionComponent.defaultProps;
    /** @type {?} */
    SliderOptionComponent.prototype.templateRef;
    /** @type {?} */
    SliderOptionComponent.prototype.className;
    /** @type {?} */
    SliderOptionComponent.prototype.value;
    /** @type {?} */
    SliderOptionComponent.prototype.onClickEmitter;
    /** @type {?} */
    SliderOptionComponent.prototype.prefix;
    /** @type {?} */
    SliderOptionComponent.prototype.isActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL3NsaWRlci9zbGlkZXItb3B0aW9uL3NsaWRlci1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFPekMsTUFBTSxPQUFPLHFCQUFxQjtJQWdCaEM7UUFSUyxjQUFTLEdBQVcscUJBQXFCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUNqRSxVQUFLLEdBQXFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFJckYsV0FBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBSXZDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUMzQyxDQUFDOzs7O0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDOztBQXRCZSxrQ0FBWSxHQUFzQjtJQUNoRCxTQUFTLEVBQUUsRUFBRTtJQUNiLEtBQUssRUFBRSxJQUFJO0NBQ1osQ0FBQzs7WUFSSCxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLEdBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFPLGtCQUFrQjtnQkFDekQsOExBQTZDO2FBQzlDOzs7OzswQkFPRSxTQUFTLFNBQUMsVUFBVSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTt3QkFFdEMsS0FBSztvQkFDTCxLQUFLOzZCQUVMLE1BQU0sU0FBQyxTQUFTOzs7O0lBVmpCLG1DQUdFOztJQUVGLDRDQUFpRTs7SUFFakUsMENBQTBFOztJQUMxRSxzQ0FBNEY7O0lBRTVGLCtDQUFrRjs7SUFFbEYsdUNBQXlDOztJQUN6Qyx5Q0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgU2xpZGVyT3B0aW9uTW9kZWwgfSBmcm9tICcuL3NsaWRlci1vcHRpb24ubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1zbGlkZXItb3B0aW9uIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vc2xpZGVyLW9wdGlvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2xpZGVyT3B0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgU2xpZGVyT3B0aW9uTW9kZWwge1xuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdFByb3BzOiBTbGlkZXJPcHRpb25Nb2RlbCA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIHZhbHVlOiBudWxsXG4gIH07XG5cbiAgQFZpZXdDaGlsZCgndGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KSB0ZW1wbGF0ZVJlZjogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IFNsaWRlck9wdGlvbkNvbXBvbmVudC5kZWZhdWx0UHJvcHMuY2xhc3NOYW1lO1xuICBASW5wdXQoKSB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbiB8IG51bGwgPSBTbGlkZXJPcHRpb25Db21wb25lbnQuZGVmYXVsdFByb3BzLnZhbHVlO1xuXG4gIEBPdXRwdXQoJ29uQ2xpY2snKSBvbkNsaWNrRW1pdHRlcjogRXZlbnRFbWl0dGVyPG51bWJlciB8IHN0cmluZyB8IGJvb2xlYW4gfCBudWxsPjtcblxuICBwdWJsaWMgcHJlZml4ID0gY29uZmlnLmNvbXBvbmVudHMucHJlZml4O1xuICBwdWJsaWMgaXNBY3RpdmU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMub25DbGlja0VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIH1cblxuICBvbkNsaWNrKCkge1xuICAgIHRoaXMub25DbGlja0VtaXR0ZXIuZW1pdCh0aGlzLnZhbHVlKTtcbiAgfVxufVxuIl19