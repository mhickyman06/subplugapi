/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/button-toggle-group/button-toggle/button-toggle.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { config } from '../../../config';
export class ButtonToggleComponent {
    constructor() {
        this.className = ButtonToggleComponent.defaultProps.className;
        this.disabled = ButtonToggleComponent.defaultProps.disabled;
        this.name = ButtonToggleComponent.defaultProps.name;
        this.value = ButtonToggleComponent.defaultProps.value;
        this.prefix = config.components.prefix;
        this.onClickEmitter = new EventEmitter();
        this.isActive = false;
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onClick() {
        if (!this.disabled) {
            this.isActive = !this.isActive;
            this.isFocused = false;
            this.onClickEmitter.emit(this.value);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.isFocused = false;
    }
    /**
     * @return {?}
     */
    onFocus() {
        if (!this.disabled) {
            this.isFocused = true;
        }
    }
}
ButtonToggleComponent.defaultProps = {
    className: '',
    disabled: false,
    name: '',
    value: ''
};
ButtonToggleComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-button-toggle }`,
                template: "<div (click)=\"onClick()\" (blur)=\"onBlur()\" (focus)=\"onFocus()\"\n\n  [ngClass]=\"[prefix + '-button-toggle', className]\"\n  [class.active]=\"isActive\"\n  [class.disabled]=\"disabled\"\n  [class.focused]=\"isFocused\"\n  [tabindex]=\"disabled ? '-1': '0'\"\n  [isRippleActive]=\"!disabled\"\n\n  materializeRipple  \n>\n  <ng-content></ng-content>\n</div>\n"
            }] }
];
/** @nocollapse */
ButtonToggleComponent.ctorParameters = () => [];
ButtonToggleComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    className: [{ type: Input }],
    disabled: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ButtonToggleComponent.defaultProps;
    /** @type {?} */
    ButtonToggleComponent.prototype.onClickEmitter;
    /** @type {?} */
    ButtonToggleComponent.prototype.className;
    /** @type {?} */
    ButtonToggleComponent.prototype.disabled;
    /** @type {?} */
    ButtonToggleComponent.prototype.name;
    /** @type {?} */
    ButtonToggleComponent.prototype.value;
    /** @type {?} */
    ButtonToggleComponent.prototype.prefix;
    /** @type {?} */
    ButtonToggleComponent.prototype.isActive;
    /** @type {?} */
    ButtonToggleComponent.prototype.isFocused;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLXRvZ2dsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL2J1dHRvbi10b2dnbGUtZ3JvdXAvYnV0dG9uLXRvZ2dsZS9idXR0b24tdG9nZ2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQU16QyxNQUFNLE9BQU8scUJBQXFCO0lBb0JoQztRQVZTLGNBQVMsR0FBVyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO1FBQ2pFLGFBQVEsR0FBWSxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1FBQ2hFLFNBQUksR0FBVyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ3ZELFVBQUssR0FBVyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO1FBRTNELFdBQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQU12QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDdEM7SUFDSCxDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDdkI7SUFDSCxDQUFDOztBQTFDZSxrQ0FBWSxHQUFzQjtJQUNoRCxTQUFTLEVBQUUsRUFBRTtJQUNiLFFBQVEsRUFBRSxLQUFLO0lBQ2YsSUFBSSxFQUFFLEVBQUU7SUFDUixLQUFLLEVBQUUsRUFBRTtDQUNWLENBQUM7O1lBVkgsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxHQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTyxrQkFBa0I7Z0JBQ3pELHVYQUE2QzthQUM5Qzs7Ozs7NkJBU0UsTUFBTSxTQUFDLFNBQVM7d0JBRWhCLEtBQUs7dUJBQ0wsS0FBSzttQkFDTCxLQUFLO29CQUNMLEtBQUs7Ozs7SUFaTixtQ0FLRTs7SUFFRiwrQ0FBd0Q7O0lBRXhELDBDQUEwRTs7SUFDMUUseUNBQXlFOztJQUN6RSxxQ0FBZ0U7O0lBQ2hFLHNDQUFrRTs7SUFFbEUsdUNBQXlDOztJQUV6Qyx5Q0FBeUI7O0lBQ3pCLDBDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCdXR0b25Ub2dnbGVNb2RlbCB9IGZyb20gJy4vYnV0dG9uLXRvZ2dsZS5tb2RlbCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGAkeyBjb25maWcuY29tcG9uZW50cy5wcmVmaXggfS1idXR0b24tdG9nZ2xlIH1gLFxuICB0ZW1wbGF0ZVVybDogJy4vYnV0dG9uLXRvZ2dsZS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQnV0dG9uVG9nZ2xlQ29tcG9uZW50IGltcGxlbWVudHMgQnV0dG9uVG9nZ2xlTW9kZWwge1xuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdFByb3BzOiBCdXR0b25Ub2dnbGVNb2RlbCA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBuYW1lOiAnJyxcbiAgICB2YWx1ZTogJydcbiAgfTtcblxuICBAT3V0cHV0KCdvbkNsaWNrJykgb25DbGlja0VtaXR0ZXI6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nID0gQnV0dG9uVG9nZ2xlQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5jbGFzc05hbWU7XG4gIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuID0gQnV0dG9uVG9nZ2xlQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5kaXNhYmxlZDtcbiAgQElucHV0KCkgbmFtZTogc3RyaW5nID0gQnV0dG9uVG9nZ2xlQ29tcG9uZW50LmRlZmF1bHRQcm9wcy5uYW1lO1xuICBASW5wdXQoKSB2YWx1ZTogc3RyaW5nID0gQnV0dG9uVG9nZ2xlQ29tcG9uZW50LmRlZmF1bHRQcm9wcy52YWx1ZTtcblxuICBwdWJsaWMgcHJlZml4ID0gY29uZmlnLmNvbXBvbmVudHMucHJlZml4O1xuXG4gIHB1YmxpYyBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgcHVibGljIGlzRm9jdXNlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9uQ2xpY2tFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmlzQWN0aXZlID0gIXRoaXMuaXNBY3RpdmU7XG4gICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5vbkNsaWNrRW1pdHRlci5lbWl0KHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuICB9XG5cbiAgb25Gb2N1cygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==