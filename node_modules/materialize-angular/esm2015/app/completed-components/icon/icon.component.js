/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/icon/icon.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ICON_SIZES } from './icon.model';
import { config } from '../../config';
export class IconComponent {
    constructor() {
        this.className = IconComponent.defaultProps.className;
        this.size = IconComponent.defaultProps.size;
        this.prefix = config.components.prefix;
        this.onClickEmitter = new EventEmitter();
        this.onBlurEmitter = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClick() {
        this.onClickEmitter.emit();
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.onBlurEmitter.emit();
    }
}
IconComponent.defaultProps = {
    className: '',
    size: ICON_SIZES.NONE
};
IconComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-icon }`,
                template: "<span class=\"icon\" [ngClass]=\"[prefix + '-icon', size, className]\" (click)=\"onClick()\" (blur)=\"onBlur()\">\n  <ng-content></ng-content>\n</span>\n"
            }] }
];
/** @nocollapse */
IconComponent.ctorParameters = () => [];
IconComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    onBlurEmitter: [{ type: Output, args: ['onBlur',] }],
    className: [{ type: Input }],
    size: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IconComponent.defaultProps;
    /** @type {?} */
    IconComponent.prototype.onClickEmitter;
    /** @type {?} */
    IconComponent.prototype.onBlurEmitter;
    /** @type {?} */
    IconComponent.prototype.className;
    /** @type {?} */
    IconComponent.prototype.size;
    /** @type {?} */
    IconComponent.prototype.prefix;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL2ljb24vaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sY0FBYyxDQUFDO0FBQ3JELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFNdEMsTUFBTSxPQUFPLGFBQWE7SUFjeEI7UUFMUyxjQUFTLEdBQVcsYUFBYSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDekQsU0FBSSxHQUFlLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBRXJELFdBQU0sR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUd2QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQzFDLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7QUF4QmUsMEJBQVksR0FBYztJQUN4QyxTQUFTLEVBQUUsRUFBRTtJQUNiLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtDQUN0QixDQUFDOztZQVJILFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsR0FBSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU8sU0FBUztnQkFDaEQscUtBQW9DO2FBQ3JDOzs7Ozs2QkFPRSxNQUFNLFNBQUMsU0FBUzs0QkFDaEIsTUFBTSxTQUFDLFFBQVE7d0JBRWYsS0FBSzttQkFDTCxLQUFLOzs7O0lBVE4sMkJBR0U7O0lBRUYsdUNBQXNEOztJQUN0RCxzQ0FBb0Q7O0lBRXBELGtDQUFrRTs7SUFDbEUsNkJBQTREOztJQUU1RCwrQkFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgV29ya3lsYWIuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dvcmt5bGFiL21hdGVyaWFsaXplLWFuZ3VsYXIvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUNPTl9TSVpFUywgSWNvbk1vZGVsIH0gZnJvbSAnLi9pY29uLm1vZGVsJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LWljb24gfWAsXG4gIHRlbXBsYXRlVXJsOiAnLi9pY29uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBJY29uQ29tcG9uZW50IGltcGxlbWVudHMgSWNvbk1vZGVsIHtcbiAgc3RhdGljIHJlYWRvbmx5IGRlZmF1bHRQcm9wczogSWNvbk1vZGVsID0ge1xuICAgIGNsYXNzTmFtZTogJycsXG4gICAgc2l6ZTogSUNPTl9TSVpFUy5OT05FXG4gIH07XG5cbiAgQE91dHB1dCgnb25DbGljaycpIG9uQ2xpY2tFbWl0dGVyOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gIEBPdXRwdXQoJ29uQmx1cicpIG9uQmx1ckVtaXR0ZXI6IEV2ZW50RW1pdHRlcjx2b2lkPjtcblxuICBASW5wdXQoKSBjbGFzc05hbWU6IHN0cmluZyA9IEljb25Db21wb25lbnQuZGVmYXVsdFByb3BzLmNsYXNzTmFtZTtcbiAgQElucHV0KCkgc2l6ZTogSUNPTl9TSVpFUyA9IEljb25Db21wb25lbnQuZGVmYXVsdFByb3BzLnNpemU7XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9uQ2xpY2tFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgIHRoaXMub25CbHVyRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgfVxuXG4gIG9uQ2xpY2soKSB7XG4gICAgdGhpcy5vbkNsaWNrRW1pdHRlci5lbWl0KCk7XG4gIH1cblxuICBvbkJsdXIoKSB7XG4gICAgdGhpcy5vbkJsdXJFbWl0dGVyLmVtaXQoKTtcbiAgfVxufVxuIl19