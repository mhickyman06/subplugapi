/**
 * @fileoverview added by tsickle
 * Generated from: app/completed-components/glossary/glossary-item/glossary-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Workylab. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://raw.githubusercontent.com/workylab/materialize-angular/master/LICENSE
 */
import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { config } from '../../../config';
export class GlossaryItemComponent {
    constructor() {
        this.className = GlossaryItemComponent.defaultProps.className;
        this.referenceId = GlossaryItemComponent.defaultProps.referenceId;
        this.prefix = config.components.prefix;
        this.isActive = false;
        this.onClickEmitter = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        this.onClickEmitter.emit(this.referenceId);
    }
}
GlossaryItemComponent.defaultProps = {
    className: '',
    referenceId: ''
};
GlossaryItemComponent.decorators = [
    { type: Component, args: [{
                selector: `${config.components.prefix}-glossary-item`,
                template: "<li\n  [ngClass]=\"[prefix + '-glossary-item', className]\"\n  [class.active]=\"isActive\"\n>\n  <ng-content></ng-content>\n</li>\n"
            }] }
];
/** @nocollapse */
GlossaryItemComponent.ctorParameters = () => [];
GlossaryItemComponent.propDecorators = {
    onClickEmitter: [{ type: Output, args: ['onClick',] }],
    className: [{ type: Input }],
    referenceId: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    GlossaryItemComponent.defaultProps;
    /** @type {?} */
    GlossaryItemComponent.prototype.onClickEmitter;
    /** @type {?} */
    GlossaryItemComponent.prototype.className;
    /** @type {?} */
    GlossaryItemComponent.prototype.referenceId;
    /** @type {?} */
    GlossaryItemComponent.prototype.prefix;
    /** @type {?} */
    GlossaryItemComponent.prototype.isActive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvc3NhcnktaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbGl6ZS1hbmd1bGFyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBsZXRlZC1jb21wb25lbnRzL2dsb3NzYXJ5L2dsb3NzYXJ5LWl0ZW0vZ2xvc3NhcnktaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBT3pDLE1BQU0sT0FBTyxxQkFBcUI7SUFlaEM7UUFQUyxjQUFTLEdBQVcscUJBQXFCLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUNqRSxnQkFBVyxHQUFXLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFFdkUsV0FBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBS3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUNuRCxDQUFDOzs7OztJQUdELE9BQU8sQ0FBQyxLQUFVO1FBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QyxDQUFDOztBQXRCZSxrQ0FBWSxHQUFzQjtJQUNoRCxTQUFTLEVBQUUsRUFBRTtJQUNiLFdBQVcsRUFBRSxFQUFFO0NBQ2hCLENBQUM7O1lBUkgsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxHQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTyxnQkFBZ0I7Z0JBQ3ZELCtJQUE2QzthQUM5Qzs7Ozs7NkJBT0UsTUFBTSxTQUFDLFNBQVM7d0JBRWhCLEtBQUs7MEJBQ0wsS0FBSztzQkFXTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBbkJqQyxtQ0FHRTs7SUFFRiwrQ0FBd0Q7O0lBRXhELDBDQUEwRTs7SUFDMUUsNENBQThFOztJQUU5RSx1Q0FBeUM7O0lBRXpDLHlDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBXb3JreWxhYi4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd29ya3lsYWIvbWF0ZXJpYWxpemUtYW5ndWxhci9tYXN0ZXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBHbG9zc2FyeUl0ZW1Nb2RlbCB9IGZyb20gJy4vZ2xvc3NhcnktaXRlbS5tb2RlbCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogYCR7IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeCB9LWdsb3NzYXJ5LWl0ZW1gLFxuICB0ZW1wbGF0ZVVybDogJy4vZ2xvc3NhcnktaXRlbS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgR2xvc3NhcnlJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgR2xvc3NhcnlJdGVtTW9kZWwge1xuICBzdGF0aWMgcmVhZG9ubHkgZGVmYXVsdFByb3BzOiBHbG9zc2FyeUl0ZW1Nb2RlbCA9IHtcbiAgICBjbGFzc05hbWU6ICcnLFxuICAgIHJlZmVyZW5jZUlkOiAnJ1xuICB9O1xuXG4gIEBPdXRwdXQoJ29uQ2xpY2snKSBvbkNsaWNrRW1pdHRlcjogRXZlbnRFbWl0dGVyPHN0cmluZz47XG5cbiAgQElucHV0KCkgY2xhc3NOYW1lOiBzdHJpbmcgPSBHbG9zc2FyeUl0ZW1Db21wb25lbnQuZGVmYXVsdFByb3BzLmNsYXNzTmFtZTtcbiAgQElucHV0KCkgcmVmZXJlbmNlSWQ6IHN0cmluZyA9IEdsb3NzYXJ5SXRlbUNvbXBvbmVudC5kZWZhdWx0UHJvcHMucmVmZXJlbmNlSWQ7XG5cbiAgcHVibGljIHByZWZpeCA9IGNvbmZpZy5jb21wb25lbnRzLnByZWZpeDtcblxuICBwdWJsaWMgaXNBY3RpdmU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMub25DbGlja0VtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgb25DbGljayhldmVudDogYW55KSB7XG4gICAgdGhpcy5vbkNsaWNrRW1pdHRlci5lbWl0KHRoaXMucmVmZXJlbmNlSWQpO1xuICB9XG59XG4iXX0=